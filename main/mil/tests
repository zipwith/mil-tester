exec: masktestexamples   ./milc -m -pcosoboro masktestexamples.mil

exec: importchasing      ./milc -m -pco -v comb.mil

exec: masking            ./milc -m -pco masking.mil

exec: shifts             ./milc -m -pco shifts.mil

exec: multi              ./milc -m -pco multi.mil

-------
.mil: no-entrypoint       ./milc -m
-- This program should give an error because there
-- are no defined entrypoints:
v <- return 42

-------
.mil: top-level-atom    ./milc -m
-- A minimal top level definition.
entrypoint v
v <- return 42

-------
.mil: top-level-prim    ./milc -m -p
require "basic.mil"
entrypoint v
v <- mul((6, 7))

-------
.mil: top-level-prim-opt  ./milc -m -po
require "basic.mil"
entrypoint v
v <- mul((6, 7))

-------
.mil: unoptimized-to-llvm ./milc -l -pcsr
-- An example to check that the LLVM code generator can handle
-- unoptimized MIL code
entrypoint b
b[] = y <- return 2
      return y

-------
.mil: area-as-entrypoint  ./milc -l --llvm-main=main
entrypoint vram

vram <- area (Stored (Bit 32)) init
        aligned 2048

external init :: Init (Stored (Bit 32))

-------
.mil: area-as-entrypoint-init-clash  ./milc -l --llvm-main=main
entrypoint vram

vram <- area (Stored (Bit 32)) init
        aligned 2048

entrypoint init -- cannot have init as both an external and an entrypoint
external init :: Init (Stored (Bit 32))

-------
.mil: entrypoint-primitive-clash  ./milc -l --llvm-main=main
entrypoint foo
external foo :: Word -> Word

-------
.mil: entrypoint-primitive-safe  ./milc -l --llvm-main=main
external foo :: Word -> Word

entrypoint bar
bar <- return foo

-------
.mil: toplevel-as-entrypoint  ./milc -l --llvm-main=main
entrypoint verily, nay

verily <- primEq((0,0))
nay    <- primEq((0,1))

-------
.mil: pathological-looping-example  ./milc -m -pcosoro

b78[t0, t1] =
  t2 <- t1 @ t0
  b73[t2, t1, t0]

b73 :: [Word, [Word] ->> [Word], Word] >>= [Word]
b73[t0, t1, t2] =
  t3 <- b78[t2, t1]
  loop(())

b68 :: [Word, [Word] ->> [Word], Word] >>= [Word]
b68[t0, t1, t2] =
  t3 <- t1 @ t2
  t4 <- b78[t0, t1]
  add((t3, t4))

entrypoint k54
k54{t0, t1} t2 = b68[t0, t1, t2]

-------
.mil: derived-block-examples  ./milc -m -pcoso

primitive pred :: [Word] >>= [Flag]
primitive op   :: [Word] >>= [Word]

data Maybe a = Nothing | Just a

b[x] = t <- pred((x))
       if t then b1[]
            else b2[x]
b1[]  = Nothing()
b2[x] = Just(x)

c[x] = s <- b[x]
       case s of Nothing -> c1[x]
                 Just    -> c2[s]
c1[x] = return x
c2[t] = v <- Just 0 t
        op((v))

entrypoint c

-------
.mil: pair-of-ids  ./milc -m -pco

id <- k{}
k{} x = return x

[x,y] <- return [id, id]
entrypoint x

-------
.mil: multiLhs   ./milc -m -pco
export one
entrypoint two
[one, two] <- return [1, 2]

entrypoint three
three <- add((one, two))

-------
.mil: bad-type-signatures ./milc -m -pco
require "basic.mil"

export f :: [a] >>= [a]
f[x] = add((x, 1))

export g :: [a] >>= [a]
g[x] = bnot((x))

-------
.mil: bad-check-body-calls  ./milc -m -pco
require "basic.mil"

export b, c
b[x] = u <- add((x,x)); bnot((x))
c[x] = u <- add((x,x)); bnot((x))

-------
exec: typesizes-in-mil   ./milc -m -pco --32 simplecaps.mil

-------
exec: typesizes-in-milr  ./milc -m -pcosoro --32 simplecaps.mil

-------
exec: typesizes-in-mil-64   ./milc -m -pco --64 simplecaps.mil

-------
exec: typesizes-in-mil-64r  ./milc -m -pcosoro --64 simplecaps.mil

-------
.mil: t-dot-c-example   ./milc -m -pcosoro
require "basic.mil"
  
bitdata CNode/32 = CNode [ ptr  :: Bit 27 | radix :: Bit 5 ]

data DecodeResult
  = Failed  Word             -- depth
  | Success Word Word Word   -- slot, index, depth

entrypoint decodeCNode
decodeCNode [cn, index, depth]
 = cnode    <- CNode 0 cn
   radix    <- CNode.CNode 1 cnode
   radixw   <- bit5ToWord @ radix
   newDepth <- sub((depth, radixw))
   pos      <- primSge((newDepth,0))
   if pos then decodeSuccess[cnode, radixw, index, newDepth]
          else decodeFailed[depth]

decodeSuccess[cnode, radixw, index, newDepth]
 = newIndex <- shl((index, radixw))
   shift    <- sub((32, radixw))      -- how many bits to shift for index
   i        <- lshr((index, shift))   -- index into cnode
   offset   <- shl((i, 4))            -- multiply by 16
   ptrraw   <- CNode.CNode 0 cnode
   ptr      <- bit27ToWord @ ptrraw
   base     <- shl((ptr, 5))
   addr     <- add((base, offset))
   Success(addr, newIndex, newDepth)

decodeFailed[depth]
 = Failed(depth)

external bit5ToWord  {primBitToWord 5}  :: [Bit 5]  ->> [Word]
external bit27ToWord {primBitToWord 27} :: [Bit 27] ->> [Word]

-------
