This file contains tests for external generators
-----------------------
exec:  gens-list-all   ./milc -e

-----------------------
.lc:  gen-no-ref    ./milc -pcosoboro -m
external putchar :: Word -> Proc Unit

entrypoint main
main = putchar 1

-----------------------
.lc:  gen-same-ref   ./milc -pcosoboro -m
external putchar {putchar} :: Word -> Proc Unit

entrypoint main
main = putchar 1

-----------------------
.lc:  gen-diff-ref    ./milc -pcosoboro -m
external putchar {putChar} :: Word -> Proc Unit

entrypoint main
main = putchar 1

-----------------------
.lc:  gen-no-ref1    ./milc -pcosoboro -m

entrypoint putchar
external putchar :: Word -> Proc Unit

entrypoint getchar
external getchar :: Proc Word

-----------------------
.lc:  gen-same-ref1    ./milc -pcosoboro -m

entrypoint putchar
external putchar {putchar} :: Word -> Proc Unit

entrypoint getchar
external getchar {getchar} :: Proc Word

-----------------------
.lc:  gen-diff-ref1    ./milc -pcosoboro -m

entrypoint putchar
external putchar {putChar} :: Word -> Proc Unit

entrypoint getchar
external getchar {getChar} :: Proc Word

-----------------------
.lc:  gen-no-ref2    ./milc -pcosoboro -m

entrypoint vram
external vram :: Word

-----------------------
.lc:  gen-no-ref3    ./milc -pcosoboro -m --32

entrypoint wide
external wide :: Bit 64

-----------------------
.lc:  gen-no-ref3-used    ./milc -pcosoboro -m --32

entrypoint wide
external wide :: Bit 64

entrypoint mywide
mywide = wide

-----------------------
.lc:  gen-no-ref4    ./milc -pcosoboro -m --64

entrypoint wide
external wide :: Bit 64

-----------------------
.lc:  gen-no-ref4-used    ./milc -pcosoboro -m --64

entrypoint wide
external wide :: Bit 64

entrypoint mywide
mywide = wide

-----------------------
.lc:  gen-same-ref2    ./milc -pcosoboro -m

entrypoint vram
external vram {vram} :: Word

-----------------------
.lc:  gen-diff-ref2    ./milc -pcosoboro -m

entrypoint vram
external vram {videoRam} :: Word

-----------------------
.mil: gen-external-notused   ./milc -m -pcosoro
-- external entrypoint, requiring representation change, not used in code
entrypoint large

external large :: Bit 128

-----------------------
.mil: gen-external-used   ./milc -m -pcosoro
-- external entrypoint, requiring representation change, not used in code
entrypoint large

external large :: Bit 128

entrypoint mylarge
mylarge <- return large

-----------------------
.lc: polymorphic-external-co ./milc -m -pco
external id :: a -> a
entrypoint x, y, z
x = id 1
y = id B1
z = id "hello"
-----------------------
.lc: polymorphic-external-coso ./milc -m -pcoso
external id :: a -> a
entrypoint x, y, z
x = id 1
y = id B1
z = id "hello"
-----------------------
.lc: polymorphic-external-cosoro ./milc -m -pcosoro
external id :: a -> a
entrypoint x, y, z
x = id 1
y = id B1
z = id "hello"
-----------------------
.lc: polymorphic-external-gen-co ./milc -m -pco
entrypoint x1, x2, x4
external plus {primBitPlus n} :: Bit n -> Bit n -> Bit n
x1 = plus B1 B0
x2 = plus B10 B11
x4 = plus B0010 B0011
-----------------------
.lc: polymorphic-external-gen-coso ./milc -m -pcoso
entrypoint x1, x2, x4
external plus {primBitPlus n} :: Bit n -> Bit n -> Bit n
x1 = plus B1 B0
x2 = plus B10 B11
x4 = plus B0010 B0011
-----------------------
.lc: polymorphic-external-gen-cosoro ./milc -m -pcosoro
entrypoint x1, x2, x4
external plus {primBitPlus n} :: Bit n -> Bit n -> Bit n
x1 = plus B1 B0
x2 = plus B10 B11
x4 = plus B0010 B0011
-----------------------
.lc: polymorphic-external-scope-err ./milc -m -pco
external initStored {primInitStored n a}    :: t -> Init (Stored t)
-----------------------
.lc: primBitFromLiteral-basic   ./milc -pcosoboro -m
entrypoint invalid1, invalid2, invalid3

external invalid1 {primBitFromLiteral 12}      :: Unit -> Bit 12 -- too few parameters
external invalid2 {primBitFromLiteral Flag 16} :: Unit -> Bit 16 -- first param not nat
external invalid3 {primBitFromLiteral 16 Word} :: Unit -> Bit 16 -- second param not nat

-----------------------
.lc: primBitFromLiteral-basic1   ./milc -pcosoboro -m
entrypoint invalid4, invalid5

external invalid4 {primBitFromLiteral 0  1M}   :: ProxyNat 0 -> Bit 1M -- bit width too large
external invalid5 {primBitFromLiteral 0  8K}   :: ProxyNat 0 -> Bit 8K

-----------------------
.lc: primBitFromLiteral-pos-32  ./milc -pcosoboro -m --32

entrypoint zero, zero1, one1
external   zero  {primBitFromLiteral 0 0} :: ProxyNat 0 -> Bit 0
external   zero1 {primBitFromLiteral 0 1} :: ProxyNat 0 -> Bit 1
external   one1  {primBitFromLiteral 1 1} :: ProxyNat 1 -> Bit 1

entrypoint blit42
external blit42 {primBitFromLiteral 42 32 4294967296} :: ProxyNat 42 -> Bit 32

entrypoint blit10
external blit10 {primBitFromLiteral 10 32 4294967296} :: ProxyNat 10 -> Bit 32

entrypoint blit48
blit48 = e3
external e3 {primBitFromLiteral 48 32 4294967296} :: ProxyNat 48 -> Bit 32

entrypoint four12, four31, four32, four33, four64, four72
external four12  {primBitFromLiteral 4 12} :: ProxyNat 4 -> Bit 12
external four31  {primBitFromLiteral 4 31} :: ProxyNat 4 -> Bit 31
external four32  {primBitFromLiteral 4 32} :: ProxyNat 4 -> Bit 32
external four33  {primBitFromLiteral 4 33} :: ProxyNat 4 -> Bit 33
external four64  {primBitFromLiteral 4 64} :: ProxyNat 4 -> Bit 64
external four72  {primBitFromLiteral 4 72} :: ProxyNat 4 -> Bit 72

-----------------------
.lc: primBitFromLiteral-pos-64  ./milc -pcosoboro -m --64

entrypoint four12, four31, four32, four33, four64, four72
external four12  {primBitFromLiteral 4 12} :: ProxyNat 4 -> Bit 12
external four31  {primBitFromLiteral 4 31} :: ProxyNat 4 -> Bit 31
external four32  {primBitFromLiteral 4 32} :: ProxyNat 4 -> Bit 32
external four33  {primBitFromLiteral 4 33} :: ProxyNat 4 -> Bit 33
external four64  {primBitFromLiteral 4 64} :: ProxyNat 4 -> Bit 64
external four72  {primBitFromLiteral 4 72} :: ProxyNat 4 -> Bit 72
-----------------------
.lc: primBitFromLiteral-neg-32  ./milc -pcosoboro -m --32

entrypoint fourBit0, fourBit1, fourBit2, fourBit3
external fourBit0 {primBitFromLiteral 4 0} :: ProxyNat 4 -> Bit 0
external fourBit1 {primBitFromLiteral 4 1} :: ProxyNat 4 -> Bit 1
external fourBit2 {primBitFromLiteral 4 2} :: ProxyNat 4 -> Bit 2
external fourBit3 {primBitFromLiteral 4 3} :: ProxyNat 4 -> Bit 3 -- should be ok

entrypoint byteMax, badByteMax, worseByteMax
external byteMax      {primBitFromLiteral 255 8} :: ProxyNat 255 -> Bit 8 -- ok
external badByteMax   {primBitFromLiteral 256 8} :: ProxyNat 256 -> Bit 8
external worseByteMax {primBitFromLiteral 257 8} :: ProxyNat 257 -> Bit 8

-----------------------
.lc: primBitToWord-pos-32   ./milc -pcosoboro -m --32

entrypoint toWord0, toWord1 -- Unit and Flag special cases
external toWord0  {primBitToWord 0 } :: Bit 0  -> Word
external toWord1  {primBitToWord 1 } :: Bit 1  -> Word

entrypoint toWord2, toWord12, toWord31, toWord32
external toWord2  {primBitToWord 2 } :: Bit 2  -> Word
external toWord12 {primBitToWord 12} :: Bit 12 -> Word
external toWord31 {primBitToWord 31} :: Bit 31 -> Word
external toWord32 {primBitToWord 32} :: Bit 32 -> Word

-----------------------
.lc: primBitToWord-neg-32   ./milc -pcosoboro -m --32

entrypoint toWord33, toWord64, toWord65   -- too big for a Word
external toWord33 {primBitToWord 33} :: Bit 33 -> Word
external toWord64 {primBitToWord 64} :: Bit 64 -> Word
external toWord65 {primBitToWord 65} :: Bit 65 -> Word

-----------------------
.lc: primBitToWord-pos-64   ./milc -pcosoboro -m --64

entrypoint toWord0, toWord1 -- Unit and Flag special cases
external toWord0  {primBitToWord 0 } :: Bit 0  -> Word
external toWord1  {primBitToWord 1 } :: Bit 1  -> Word

entrypoint toWord2, toWord12, toWord31, toWord32, toWord33, toWord64
external toWord2  {primBitToWord 2 } :: Bit 2  -> Word
external toWord12 {primBitToWord 12} :: Bit 12 -> Word
external toWord31 {primBitToWord 31} :: Bit 31 -> Word
external toWord32 {primBitToWord 32} :: Bit 32 -> Word
external toWord33 {primBitToWord 33} :: Bit 33 -> Word
external toWord64 {primBitToWord 64} :: Bit 64 -> Word

-----------------------
.lc: primBitToWord-neg-64   ./milc -pcosoboro -m --64

entrypoint toWord65   -- too big for a Word
external toWord65 {primBitToWord 65} :: Bit 65 -> Word

-----------------------
.lc: primWordToBit-pos-32   ./milc -pcosoboro -m --32

entrypoint toBit0, toBit1 -- Unit and Flag special cases
external toBit0  {primWordToBit 0 } :: Word -> Bit 0
external toBit1  {primWordToBit 1 } :: Word -> Bit 1

entrypoint toBit2, toBit12, toBit31, toBit32
external toBit2  {primWordToBit 2 } :: Word -> Bit 2
external toBit12 {primWordToBit 12} :: Word -> Bit 12
external toBit31 {primWordToBit 31} :: Word -> Bit 31
external toBit32 {primWordToBit 32} :: Word -> Bit 32

-----------------------
.lc: primWordToBit-neg-32   ./milc -pcosoboro -m --32

entrypoint toBit33, toBit64, toBit65   -- too big for a Word
external toBit33 {primWordToBit 33} :: Word -> Bit 33
external toBit64 {primWordToBit 64} :: Word -> Bit 64
external toBit65 {primWordToBit 65} :: Word -> Bit 65

-----------------------
.lc: primWordToBit-pos-64   ./milc -pcosoboro -m --64

entrypoint toBit0, toBit1 -- Unit and Flag special cases
external toBit0  {primWordToBit 0 } :: Word -> Bit 0
external toBit1  {primWordToBit 1 } :: Word -> Bit 1

entrypoint toBit2, toBit12, toBit31, toBit32, toBit33, toBit64
external toBit2  {primWordToBit 2 } :: Word -> Bit 2
external toBit12 {primWordToBit 12} :: Word -> Bit 12
external toBit31 {primWordToBit 31} :: Word -> Bit 31
external toBit32 {primWordToBit 32} :: Word -> Bit 32
external toBit33 {primWordToBit 33} :: Word -> Bit 33
external toBit64 {primWordToBit 64} :: Word -> Bit 64

-----------------------
.lc: primWordToBit-neg-64   ./milc -pcosoboro -m --64

entrypoint toBit65, toBit192   -- too big for a Word
external toBit65  {primWordToBit 65}  :: Word -> Bit 65
external toBit192 {primWordToBit 192} :: Word -> Bit 192

-----------------------
.lc: primBitConcat-pos-32   ./milc -pcosoboro -m --32

entrypoint cat_1_1, cat_1_2, cat_2_1
external cat_1_1   {primBitsConcat  1  1  2} :: Bit 1  -> Bit 1  -> Bit 2
external cat_1_2   {primBitsConcat  1  2  3} :: Bit 1  -> Bit 2  -> Bit 3
external cat_2_1   {primBitsConcat  2  1  3} :: Bit 2  -> Bit 1  -> Bit 3

entrypoint cat_2_2, cat_12_12, cat_16_16, cat_32_16, cat_32_32
external cat_2_2   {primBitsConcat  2  2  4} :: Bit 2  -> Bit 2  -> Bit 4
external cat_12_12 {primBitsConcat 12 12 24} :: Bit 12 -> Bit 12 -> Bit 24
external cat_16_16 {primBitsConcat 16 16 32} :: Bit 16 -> Bit 16 -> Bit 32
external cat_32_16 {primBitsConcat 32 16 48} :: Bit 32 -> Bit 16 -> Bit 48
external cat_32_32 {primBitsConcat 32 32 64} :: Bit 32 -> Bit 32 -> Bit 64

entrypoint cat3_5
cat3_5 = c3_5
external c3_5 {primBitsConcat 3 5 8} :: Bit 3 -> Bit 5 -> Bit 8

entrypoint cat5_3
cat5_3 = c5_3
external c5_3 {primBitsConcat 5 3 8} :: Bit 5 -> Bit 3 -> Bit 8

entrypoint cat16_32
cat16_32 = c16_32
external c16_32 {primBitsConcat 16 32 48} :: Bit 16 -> Bit 32 -> Bit 48

-----------------------
.lc: primBitConcat-neg-32   ./milc -pcosoboro -m --32

entrypoint cat_0_0, cat_0_1, cat_1_0, cat_0_2, cat_2_0
external cat_0_0   {primBitsConcat  0  0  0} :: Bit 0  -> Bit 0  -> Bit 0
external cat_0_1   {primBitsConcat  0  1  1} :: Bit 0  -> Bit 1  -> Bit 1
external cat_1_0   {primBitsConcat  1  0  1} :: Bit 1  -> Bit 0  -> Bit 1
external cat_0_2   {primBitsConcat  0  2  2} :: Bit 0  -> Bit 2  -> Bit 2
external cat_2_0   {primBitsConcat  2  0  2} :: Bit 2  -> Bit 0  -> Bit 2

entrypoint cat_2_2, cat_12_12, cat_16_16, cat_32_16, cat_32_32
external cat_2_2   {primBitsConcat  2  2  3} :: Bit 2  -> Bit 2  -> Bit 3
external cat_12_12 {primBitsConcat 12 12 32} :: Bit 12 -> Bit 12 -> Bit 32
external cat_16_16 {primBitsConcat 16 16 30} :: Bit 16 -> Bit 16 -> Bit 30
external cat_32_16 {primBitsConcat 32 16 54} :: Bit 32 -> Bit 16 -> Bit 54
external cat_32_32 {primBitsConcat 32 32 72} :: Bit 32 -> Bit 32 -> Bit 72

-----------------------
.lc: primBitConcat-pos-64   ./milc -pcosoboro -m --64

entrypoint cat_2_2, cat_12_12, cat_16_16, cat_32_16, cat_32_32
external cat_2_2   {primBitsConcat  2  2  4} :: Bit 2  -> Bit 2  -> Bit 4
external cat_12_12 {primBitsConcat 12 12 24} :: Bit 12 -> Bit 12 -> Bit 24
external cat_16_16 {primBitsConcat 16 16 32} :: Bit 16 -> Bit 16 -> Bit 32
external cat_32_16 {primBitsConcat 32 16 48} :: Bit 32 -> Bit 16 -> Bit 48
external cat_32_32 {primBitsConcat 32 32 64} :: Bit 32 -> Bit 32 -> Bit 64

-----------------------
.lc: primBitConcat-neg-64   ./milc -pcosoboro -m --64

entrypoint cat_2_2, cat_12_12, cat_16_16, cat_32_16, cat_32_32
external cat_2_2   {primBitsConcat  2  2  3} :: Bit 2  -> Bit 2  -> Bit 3
external cat_12_12 {primBitsConcat 12 12 12} :: Bit 12 -> Bit 12 -> Bit 12
external cat_16_16 {primBitsConcat 16 16 30} :: Bit 16 -> Bit 16 -> Bit 30
external cat_32_16 {primBitsConcat 32 16 54} :: Bit 32 -> Bit 16 -> Bit 54
external cat_32_32 {primBitsConcat 32 32 72} :: Bit 32 -> Bit 32 -> Bit 72

-----------------------
.lc: primBitSelect-pos-32  ./milc -pcosoboro -m --32

entrypoint nullFromNull0
external nullFromNull0 {primBitSelect 0 0 0} :: Bit 0 -> ProxyNat 0 -> Bit 0

entrypoint nullFromFlag0, nullFromFlag1
external nullFromFlag0 {primBitSelect 1 0 0} :: Bit 1 -> ProxyNat 0 -> Bit 0
external nullFromFlag1 {primBitSelect 1 1 0} :: Bit 1 -> ProxyNat 1 -> Bit 0

entrypoint bitFromFlag0
external bitFromFlag0  {primBitSelect 1 0 1} :: Bit 1 -> ProxyNat 0 -> Bit 1

entrypoint nullFromByte0, nullFromByte1, nullFromByte2, nullFromByte4
entrypoint nullFromByte5, nullFromByte7, nullFromByte8
external nullFromByte0 {primBitSelect 8 0 0} :: Bit 8 -> ProxyNat 0 -> Bit 0
external nullFromByte1 {primBitSelect 8 1 0} :: Bit 8 -> ProxyNat 1 -> Bit 0
external nullFromByte2 {primBitSelect 8 2 0} :: Bit 8 -> ProxyNat 2 -> Bit 0
external nullFromByte4 {primBitSelect 8 4 0} :: Bit 8 -> ProxyNat 4 -> Bit 0
external nullFromByte5 {primBitSelect 8 5 0} :: Bit 8 -> ProxyNat 5 -> Bit 0
external nullFromByte7 {primBitSelect 8 7 0} :: Bit 8 -> ProxyNat 7 -> Bit 0
external nullFromByte8 {primBitSelect 8 8 0} :: Bit 8 -> ProxyNat 8 -> Bit 0

entrypoint bitFromByte0, bitFromByte1, bitFromByte2, bitFromByte4
entrypoint bitFromByte5, bitFromByte7
external bitFromByte0 {primBitSelect 8 0 1} :: Bit 8 -> ProxyNat 0 -> Bit 1
external bitFromByte1 {primBitSelect 8 1 1} :: Bit 8 -> ProxyNat 1 -> Bit 1
external bitFromByte2 {primBitSelect 8 2 1} :: Bit 8 -> ProxyNat 2 -> Bit 1
external bitFromByte4 {primBitSelect 8 4 1} :: Bit 8 -> ProxyNat 4 -> Bit 1
external bitFromByte5 {primBitSelect 8 5 1} :: Bit 8 -> ProxyNat 5 -> Bit 1
external bitFromByte7 {primBitSelect 8 7 1} :: Bit 8 -> ProxyNat 7 -> Bit 1

entrypoint nibbleFromByte0, nibbleFromByte1, nibbleFromByte2, nibbleFromByte4
external nibbleFromByte0 {primBitSelect 8 0 4} :: Bit 8 -> ProxyNat 0 -> Bit 4
external nibbleFromByte1 {primBitSelect 8 1 4} :: Bit 8 -> ProxyNat 1 -> Bit 4
external nibbleFromByte2 {primBitSelect 8 2 4} :: Bit 8 -> ProxyNat 2 -> Bit 4
external nibbleFromByte4 {primBitSelect 8 4 4} :: Bit 8 -> ProxyNat 4 -> Bit 4

-----------------------
.lc: primBitSelect-neg-32  ./milc -pcosoboro -m --32

entrypoint bitFromNull0, bitFromNull1, nibbleFromNull
external bitFromNull0   {primBitSelect 0 0 1} :: Bit 0 -> ProxyNat 0 -> Bit 1
external bitFromNull1   {primBitSelect 0 1 1} :: Bit 0 -> ProxyNat 1 -> Bit 1
external nibbleFromNull {primBitSelect 0 0 4} :: Bit 0 -> ProxyNat 0 -> Bit 4

entrypoint nibbleFromFlag0
external nibbleFromFlag0 {primBitSelect 1 0 4} :: Bit 1 -> ProxyNat 0 -> Bit 4

entrypoint nullFromByte9, nullFromByte15
external nullFromByte9  {primBitSelect 8  9 0} :: Bit 8 -> ProxyNat  9 -> Bit 0
external nullFromByte15 {primBitSelect 8 15 0} :: Bit 8 -> ProxyNat 15 -> Bit 0

entrypoint bitFromByte8, bitFromByte9, bitFromByte15
external bitFromByte8  {primBitSelect 8  8 1} :: Bit 8 -> ProxyNat  8 -> Bit 1
external bitFromByte9  {primBitSelect 8  9 1} :: Bit 8 -> ProxyNat  9 -> Bit 1
external bitFromByte15 {primBitSelect 8 15 1} :: Bit 8 -> ProxyNat 15 -> Bit 1

entrypoint nibbleFromByte5, nibbleFromByte8, nibbleFromByte9, nibbleFromByte15
external nibbleFromByte5  {primBitSelect 8  5 4} :: Bit 8 -> ProxyNat  5 -> Bit 4
external nibbleFromByte8  {primBitSelect 8  8 4} :: Bit 8 -> ProxyNat  8 -> Bit 4
external nibbleFromByte9  {primBitSelect 8  9 4} :: Bit 8 -> ProxyNat  9 -> Bit 4
external nibbleFromByte15 {primBitSelect 8 15 4} :: Bit 8 -> ProxyNat 15 -> Bit 4

-----------------------
.lc: primBitSelect1-pos-32  ./milc -pcosoboro -m --32

entrypoint nullFromLong0,  nullFromLong1,  nullFromLong2,  nullFromLong29
external nullFromLong0  {primBitSelect 64  0 0} :: Bit 64 -> ProxyNat  0 -> Bit 0
external nullFromLong1  {primBitSelect 64  1 0} :: Bit 64 -> ProxyNat  1 -> Bit 0
external nullFromLong2  {primBitSelect 64  2 0} :: Bit 64 -> ProxyNat  2 -> Bit 0
external nullFromLong29 {primBitSelect 64 29 0} :: Bit 64 -> ProxyNat 29 -> Bit 0

entrypoint nullFromLong31, nullFromLong32, nullFromLong33, nullFromLong48
external nullFromLong31 {primBitSelect 64 31 0} :: Bit 64 -> ProxyNat 31 -> Bit 0
external nullFromLong32 {primBitSelect 64 32 0} :: Bit 64 -> ProxyNat 32 -> Bit 0
external nullFromLong33 {primBitSelect 64 33 0} :: Bit 64 -> ProxyNat 33 -> Bit 0
external nullFromLong48 {primBitSelect 64 48 0} :: Bit 64 -> ProxyNat 48 -> Bit 0

entrypoint nullFromLong63, nullFromLong64
external nullFromLong63 {primBitSelect 64 63 0} :: Bit 64 -> ProxyNat 63 -> Bit 0
external nullFromLong64 {primBitSelect 64 64 0} :: Bit 64 -> ProxyNat 64 -> Bit 0

entrypoint bitFromLong0,  bitFromLong1,  bitFromLong2,  bitFromLong29
external bitFromLong0  {primBitSelect 64  0 1} :: Bit 64 -> ProxyNat  0 -> Bit 1
external bitFromLong1  {primBitSelect 64  1 1} :: Bit 64 -> ProxyNat  1 -> Bit 1
external bitFromLong2  {primBitSelect 64  2 1} :: Bit 64 -> ProxyNat  2 -> Bit 1
external bitFromLong29 {primBitSelect 64 29 1} :: Bit 64 -> ProxyNat 29 -> Bit 1

entrypoint bitFromLong31, bitFromLong32, bitFromLong33, bitFromLong48
external bitFromLong31 {primBitSelect 64 31 1} :: Bit 64 -> ProxyNat 31 -> Bit 1
external bitFromLong32 {primBitSelect 64 32 1} :: Bit 64 -> ProxyNat 32 -> Bit 1
external bitFromLong33 {primBitSelect 64 33 1} :: Bit 64 -> ProxyNat 33 -> Bit 1
external bitFromLong48 {primBitSelect 64 48 1} :: Bit 64 -> ProxyNat 48 -> Bit 1

entrypoint bitFromLong63
external bitFromLong63 {primBitSelect 64 63 1} :: Bit 64 -> ProxyNat 63 -> Bit 1

entrypoint byteFromLong0,  byteFromLong1,  byteFromLong2,  byteFromLong29
external byteFromLong0  {primBitSelect 64  0 8} :: Bit 64 -> ProxyNat  0 -> Bit 8
external byteFromLong1  {primBitSelect 64  1 8} :: Bit 64 -> ProxyNat  1 -> Bit 8
external byteFromLong2  {primBitSelect 64  2 8} :: Bit 64 -> ProxyNat  2 -> Bit 8
external byteFromLong29 {primBitSelect 64 29 8} :: Bit 64 -> ProxyNat 29 -> Bit 8

entrypoint byteFromLong31, byteFromLong32, byteFromLong33, byteFromLong48
external byteFromLong31 {primBitSelect 64 31 8} :: Bit 64 -> ProxyNat 31 -> Bit 8
external byteFromLong32 {primBitSelect 64 32 8} :: Bit 64 -> ProxyNat 32 -> Bit 8
external byteFromLong33 {primBitSelect 64 33 8} :: Bit 64 -> ProxyNat 33 -> Bit 8
external byteFromLong48 {primBitSelect 64 48 8} :: Bit 64 -> ProxyNat 48 -> Bit 8

-----------------------
.lc: primBitSelect1-pos-64  ./milc -pcosoboro -m --64

entrypoint nullFromNull0
external nullFromNull0 {primBitSelect 0  0 0} :: Bit 0 -> ProxyNat  0 -> Bit 0

entrypoint nullFromFlag0, nullFromFlag1
external nullFromFlag0 {primBitSelect 1  0 0} :: Bit 1 -> ProxyNat  0 -> Bit 0
external nullFromFlag1 {primBitSelect 1  1 0} :: Bit 1 -> ProxyNat  1 -> Bit 0

entrypoint bitFromFlag0
external bitFromFlag0  {primBitSelect 1  0 1} :: Bit 1 -> ProxyNat  0 -> Bit 1

entrypoint nullFromLong0,  nullFromLong1,  nullFromLong2,  nullFromLong29
external nullFromLong0  {primBitSelect 64  0 0} :: Bit 64 -> ProxyNat  0 -> Bit 0
external nullFromLong1  {primBitSelect 64  1 0} :: Bit 64 -> ProxyNat  1 -> Bit 0
external nullFromLong2  {primBitSelect 64  2 0} :: Bit 64 -> ProxyNat  2 -> Bit 0
external nullFromLong29 {primBitSelect 64 29 0} :: Bit 64 -> ProxyNat 29 -> Bit 0

entrypoint nullFromLong31, nullFromLong32, nullFromLong33, nullFromLong48
external nullFromLong31 {primBitSelect 64 31 0} :: Bit 64 -> ProxyNat 31 -> Bit 0
external nullFromLong32 {primBitSelect 64 32 0} :: Bit 64 -> ProxyNat 32 -> Bit 0
external nullFromLong33 {primBitSelect 64 33 0} :: Bit 64 -> ProxyNat 33 -> Bit 0
external nullFromLong48 {primBitSelect 64 48 0} :: Bit 64 -> ProxyNat 48 -> Bit 0

entrypoint nullFromLong63, nullFromLong64
external nullFromLong63 {primBitSelect 64 63 0} :: Bit 64 -> ProxyNat 63 -> Bit 0
external nullFromLong64 {primBitSelect 64 64 0} :: Bit 64 -> ProxyNat 64 -> Bit 0

entrypoint bitFromLong0,  bitFromLong1,  bitFromLong2,  bitFromLong29
external bitFromLong0  {primBitSelect 64  0 1} :: Bit 64 -> ProxyNat  0 -> Bit 1
external bitFromLong1  {primBitSelect 64  1 1} :: Bit 64 -> ProxyNat  1 -> Bit 1
external bitFromLong2  {primBitSelect 64  2 1} :: Bit 64 -> ProxyNat  2 -> Bit 1
external bitFromLong29 {primBitSelect 64 29 1} :: Bit 64 -> ProxyNat 29 -> Bit 1

entrypoint bitFromLong31, bitFromLong32, bitFromLong33, bitFromLong48
external bitFromLong31 {primBitSelect 64 31 1} :: Bit 64 -> ProxyNat 31 -> Bit 1
external bitFromLong32 {primBitSelect 64 32 1} :: Bit 64 -> ProxyNat 32 -> Bit 1
external bitFromLong33 {primBitSelect 64 33 1} :: Bit 64 -> ProxyNat 33 -> Bit 1
external bitFromLong48 {primBitSelect 64 48 1} :: Bit 64 -> ProxyNat 48 -> Bit 1

entrypoint bitFromLong63
external bitFromLong63 {primBitSelect 64 63 1} :: Bit 64 -> ProxyNat 63 -> Bit 1

entrypoint byteFromLong0,  byteFromLong1,  byteFromLong2,  byteFromLong29
external byteFromLong0  {primBitSelect 64  0 8} :: Bit 64 -> ProxyNat  0 -> Bit 8
external byteFromLong1  {primBitSelect 64  1 8} :: Bit 64 -> ProxyNat  1 -> Bit 8
external byteFromLong2  {primBitSelect 64  2 8} :: Bit 64 -> ProxyNat  2 -> Bit 8
external byteFromLong29 {primBitSelect 64 29 8} :: Bit 64 -> ProxyNat 29 -> Bit 8

entrypoint byteFromLong31, byteFromLong32, byteFromLong33, byteFromLong48
external byteFromLong31 {primBitSelect 64 31 8} :: Bit 64 -> ProxyNat 31 -> Bit 8
external byteFromLong32 {primBitSelect 64 32 8} :: Bit 64 -> ProxyNat 32 -> Bit 8
external byteFromLong33 {primBitSelect 64 33 8} :: Bit 64 -> ProxyNat 33 -> Bit 8
external byteFromLong48 {primBitSelect 64 48 8} :: Bit 64 -> ProxyNat 48 -> Bit 8

-----------------------
.lc: primBitSelect1-neg-32  ./milc -pcosoboro -m --32

entrypoint nullFromLong65, nullFromLong80
external nullFromLong65 {primBitSelect 64 65 0} :: Bit 64 -> ProxyNat 65 -> Bit 0
external nullFromLong80 {primBitSelect 64 80 0} :: Bit 64 -> ProxyNat 80 -> Bit 0

entrypoint bitFromLong64, bitFromLong65, bitFromLong80
external bitFromLong64 {primBitSelect 64 64 1} :: Bit 64 -> ProxyNat 64 -> Bit 1
external bitFromLong65 {primBitSelect 64 65 1} :: Bit 64 -> ProxyNat 65 -> Bit 1
external bitFromLong80 {primBitSelect 64 80 1} :: Bit 64 -> ProxyNat 80 -> Bit 1

entrypoint byteFromLong57, byteFromLong60, byteFromLong63, byteFromLong64
external byteFromLong57 {primBitSelect 64 57 8} :: Bit 64 -> ProxyNat 57 -> Bit 8
external byteFromLong60 {primBitSelect 64 60 8} :: Bit 64 -> ProxyNat 60 -> Bit 8
external byteFromLong63 {primBitSelect 64 63 8} :: Bit 64 -> ProxyNat 63 -> Bit 8
external byteFromLong64 {primBitSelect 64 64 8} :: Bit 64 -> ProxyNat 64 -> Bit 8

entrypoint byteFromLong80
external byteFromLong80 {primBitSelect 64 80 8} :: Bit 64 -> ProxyNat 80 -> Bit 8

-----------------------
.lc: primBitSelect1-neg-64  ./milc -pcosoboro -m --64

entrypoint nullFromLong65, nullFromLong80
external nullFromLong65 {primBitSelect 64 65 0} :: Bit 64 -> ProxyNat 65 -> Bit 0
external nullFromLong80 {primBitSelect 64 80 0} :: Bit 64 -> ProxyNat 80 -> Bit 0

entrypoint bitFromLong64, bitFromLong65, bitFromLong80
external bitFromLong64 {primBitSelect 64 64 1} :: Bit 64 -> ProxyNat 64 -> Bit 1
external bitFromLong65 {primBitSelect 64 65 1} :: Bit 64 -> ProxyNat 65 -> Bit 1
external bitFromLong80 {primBitSelect 64 80 1} :: Bit 64 -> ProxyNat 80 -> Bit 1

entrypoint byteFromLong57, byteFromLong60, byteFromLong63, byteFromLong64
external byteFromLong57 {primBitSelect 64 57 8} :: Bit 64 -> ProxyNat 57 -> Bit 8
external byteFromLong60 {primBitSelect 64 60 8} :: Bit 64 -> ProxyNat 60 -> Bit 8
external byteFromLong63 {primBitSelect 64 63 8} :: Bit 64 -> ProxyNat 63 -> Bit 8
external byteFromLong64 {primBitSelect 64 64 8} :: Bit 64 -> ProxyNat 64 -> Bit 8

entrypoint byteFromLong80
external byteFromLong80 {primBitSelect 64 80 8} :: Bit 64 -> ProxyNat 80 -> Bit 8

-----------------------
.lc: primBitsHi-pos-32  ./milc -pcosoboro -m --32

entrypoint nullHi0
external nullHi0 {primBitsHi 0 0} :: Bit 0 -> Bit 0

entrypoint flagHi0, flagHi1
external flagHi0 {primBitsHi 1 0} :: Bit 1 -> Bit 0
external flagHi1 {primBitsHi 1 1} :: Bit 1 -> Bit 1

entrypoint byteHi0, byteHi1, byteHi2, byteHi3, byteHi4
entrypoint byteHi5, byteHi6, byteHi7, byteHi8
external byteHi0 {primBitsHi 8 0} :: Bit 8 -> Bit 0
external byteHi1 {primBitsHi 8 1} :: Bit 8 -> Bit 1
external byteHi2 {primBitsHi 8 2} :: Bit 8 -> Bit 2
external byteHi3 {primBitsHi 8 3} :: Bit 8 -> Bit 3
external byteHi4 {primBitsHi 8 4} :: Bit 8 -> Bit 4
external byteHi5 {primBitsHi 8 5} :: Bit 8 -> Bit 5
external byteHi6 {primBitsHi 8 6} :: Bit 8 -> Bit 6
external byteHi7 {primBitsHi 8 7} :: Bit 8 -> Bit 7
external byteHi8 {primBitsHi 8 8} :: Bit 8 -> Bit 8

entrypoint intHi0, intHi1, intHi2, intHi3, intHi4
entrypoint intHi5, intHi6, intHi7, intHi8
entrypoint intHi30,intHi31,intHi32
external intHi0  {primBitsHi 32 0}  :: Bit 32 -> Bit 0
external intHi1  {primBitsHi 32 1}  :: Bit 32 -> Bit 1
external intHi2  {primBitsHi 32 2}  :: Bit 32 -> Bit 2
external intHi3  {primBitsHi 32 3}  :: Bit 32 -> Bit 3
external intHi4  {primBitsHi 32 4}  :: Bit 32 -> Bit 4
external intHi5  {primBitsHi 32 5}  :: Bit 32 -> Bit 5
external intHi6  {primBitsHi 32 6}  :: Bit 32 -> Bit 6
external intHi7  {primBitsHi 32 7}  :: Bit 32 -> Bit 7
external intHi8  {primBitsHi 32 8}  :: Bit 32 -> Bit 8
external intHi30 {primBitsHi 32 30} :: Bit 32 -> Bit 30
external intHi31 {primBitsHi 32 31} :: Bit 32 -> Bit 31
external intHi32 {primBitsHi 32 32} :: Bit 32 -> Bit 32

entrypoint midHi0,  midHi1,  midHi2,  midHi4,  midHi9,  midHi16
entrypoint midHi17, midHi18, midHi24, midHi32, midHi40, midHi47
entrypoint midHi48
external midHi0  {primBitsHi 48 0}  :: Bit 48 -> Bit 0
external midHi1  {primBitsHi 48 1}  :: Bit 48 -> Bit 1
external midHi2  {primBitsHi 48 2}  :: Bit 48 -> Bit 2
external midHi4  {primBitsHi 48 4}  :: Bit 48 -> Bit 4
external midHi9  {primBitsHi 48 9}  :: Bit 48 -> Bit 9
external midHi16 {primBitsHi 48 16} :: Bit 48 -> Bit 16
external midHi17 {primBitsHi 48 17} :: Bit 48 -> Bit 17
external midHi18 {primBitsHi 48 18} :: Bit 48 -> Bit 18
external midHi24 {primBitsHi 48 24} :: Bit 48 -> Bit 24
external midHi32 {primBitsHi 48 32} :: Bit 48 -> Bit 32
external midHi40 {primBitsHi 48 40} :: Bit 48 -> Bit 40
external midHi47 {primBitsHi 48 47} :: Bit 48 -> Bit 47
external midHi48 {primBitsHi 48 48} :: Bit 48 -> Bit 48

entrypoint longHi0,  longHi1,  longHi2,  longHi4,  longHi9,  longHi16
entrypoint longHi17, longHi18, longHi24, longHi32, longHi40, longHi47
entrypoint longHi48, longHi54, longHi60, longHi62, longHi63, longHi64
external longHi0  {primBitsHi 64 0}  :: Bit 64 -> Bit 0
external longHi1  {primBitsHi 64 1}  :: Bit 64 -> Bit 1
external longHi2  {primBitsHi 64 2}  :: Bit 64 -> Bit 2
external longHi4  {primBitsHi 64 4}  :: Bit 64 -> Bit 4
external longHi9  {primBitsHi 64 9}  :: Bit 64 -> Bit 9
external longHi16 {primBitsHi 64 16} :: Bit 64 -> Bit 16
external longHi17 {primBitsHi 64 17} :: Bit 64 -> Bit 17
external longHi18 {primBitsHi 64 18} :: Bit 64 -> Bit 18
external longHi24 {primBitsHi 64 24} :: Bit 64 -> Bit 24
external longHi32 {primBitsHi 64 32} :: Bit 64 -> Bit 32
external longHi40 {primBitsHi 64 40} :: Bit 64 -> Bit 40
external longHi47 {primBitsHi 64 47} :: Bit 64 -> Bit 47
external longHi48 {primBitsHi 64 48} :: Bit 64 -> Bit 48
external longHi54 {primBitsHi 64 54} :: Bit 64 -> Bit 54
external longHi60 {primBitsHi 64 60} :: Bit 64 -> Bit 60
external longHi62 {primBitsHi 64 62} :: Bit 64 -> Bit 62
external longHi63 {primBitsHi 64 63} :: Bit 64 -> Bit 63
external longHi64 {primBitsHi 64 64} :: Bit 64 -> Bit 64

-----------------------
.lc: primBitsHi-neg-32  ./milc -pcosoboro -m --32

entrypoint nullHi1, nullHi4
external nullHi1 {primBitsHi 0 1} :: Bit 0 -> Bit 1
external nullHi4 {primBitsHi 0 4} :: Bit 0 -> Bit 4

entrypoint flagHi2, flagHi4
external flagHi2 {primBitsHi 1 2} :: Bit 1 -> Bit 2
external flagHi4 {primBitsHi 1 4} :: Bit 1 -> Bit 4

entrypoint byteHi9, byteHi12
external byteHi9  {primBitsHi 8 9}  :: Bit 8 -> Bit 9
external byteHi12 {primBitsHi 8 12} :: Bit 8 -> Bit 12

entrypoint intHi33, intHi48, intHi64
external intHi33 {primBitsHi 32 33} :: Bit 32 -> Bit 33
external intHi48 {primBitsHi 32 48} :: Bit 32 -> Bit 48
external intHi64 {primBitsHi 32 64} :: Bit 32 -> Bit 64

entrypoint midHi49,  midHi64,  midHi96
external midHi49 {primBitsHi 48 49} :: Bit 48 -> Bit 49
external midHi64 {primBitsHi 48 64} :: Bit 48 -> Bit 64
external midHi96 {primBitsHi 48 96} :: Bit 48 -> Bit 96

entrypoint longHi65, longHi72, longHi96
external longHi65 {primBitsHi 64 65} :: Bit 64 -> Bit 65
external longHi72 {primBitsHi 64 72} :: Bit 64 -> Bit 72
external longHi96 {primBitsHi 64 96} :: Bit 64 -> Bit 96

-----------------------
.lc: primBitsHi-pos-64  ./milc -pcosoboro -m --64

entrypoint nullHi0
external nullHi0 {primBitsHi 0 0} :: Bit 0 -> Bit 0

entrypoint flagHi0, flagHi1
external flagHi0 {primBitsHi 1 0} :: Bit 1 -> Bit 0
external flagHi1 {primBitsHi 1 1} :: Bit 1 -> Bit 1

entrypoint byteHi0, byteHi1, byteHi2, byteHi3, byteHi4
entrypoint byteHi5, byteHi6, byteHi7, byteHi8
external byteHi0 {primBitsHi 8 0} :: Bit 8 -> Bit 0
external byteHi1 {primBitsHi 8 1} :: Bit 8 -> Bit 1
external byteHi2 {primBitsHi 8 2} :: Bit 8 -> Bit 2
external byteHi3 {primBitsHi 8 3} :: Bit 8 -> Bit 3
external byteHi4 {primBitsHi 8 4} :: Bit 8 -> Bit 4
external byteHi5 {primBitsHi 8 5} :: Bit 8 -> Bit 5
external byteHi6 {primBitsHi 8 6} :: Bit 8 -> Bit 6
external byteHi7 {primBitsHi 8 7} :: Bit 8 -> Bit 7
external byteHi8 {primBitsHi 8 8} :: Bit 8 -> Bit 8

entrypoint intHi0, intHi1, intHi2, intHi3, intHi4
entrypoint intHi5, intHi6, intHi7, intHi8
entrypoint intHi30,intHi31,intHi32
external intHi0  {primBitsHi 32 0}  :: Bit 32 -> Bit 0
external intHi1  {primBitsHi 32 1}  :: Bit 32 -> Bit 1
external intHi2  {primBitsHi 32 2}  :: Bit 32 -> Bit 2
external intHi3  {primBitsHi 32 3}  :: Bit 32 -> Bit 3
external intHi4  {primBitsHi 32 4}  :: Bit 32 -> Bit 4
external intHi5  {primBitsHi 32 5}  :: Bit 32 -> Bit 5
external intHi6  {primBitsHi 32 6}  :: Bit 32 -> Bit 6
external intHi7  {primBitsHi 32 7}  :: Bit 32 -> Bit 7
external intHi8  {primBitsHi 32 8}  :: Bit 32 -> Bit 8
external intHi30 {primBitsHi 32 30} :: Bit 32 -> Bit 30
external intHi31 {primBitsHi 32 31} :: Bit 32 -> Bit 31
external intHi32 {primBitsHi 32 32} :: Bit 32 -> Bit 32

entrypoint midHi0,  midHi1,  midHi2,  midHi4,  midHi9,  midHi16
entrypoint midHi17, midHi18, midHi24, midHi32, midHi40, midHi47
entrypoint midHi48
external midHi0  {primBitsHi 48 0}  :: Bit 48 -> Bit 0
external midHi1  {primBitsHi 48 1}  :: Bit 48 -> Bit 1
external midHi2  {primBitsHi 48 2}  :: Bit 48 -> Bit 2
external midHi4  {primBitsHi 48 4}  :: Bit 48 -> Bit 4
external midHi9  {primBitsHi 48 9}  :: Bit 48 -> Bit 9
external midHi16 {primBitsHi 48 16} :: Bit 48 -> Bit 16
external midHi17 {primBitsHi 48 17} :: Bit 48 -> Bit 17
external midHi18 {primBitsHi 48 18} :: Bit 48 -> Bit 18
external midHi24 {primBitsHi 48 24} :: Bit 48 -> Bit 24
external midHi32 {primBitsHi 48 32} :: Bit 48 -> Bit 32
external midHi40 {primBitsHi 48 40} :: Bit 48 -> Bit 40
external midHi47 {primBitsHi 48 47} :: Bit 48 -> Bit 47
external midHi48 {primBitsHi 48 48} :: Bit 48 -> Bit 48

entrypoint longHi0,  longHi1,  longHi2,  longHi4,  longHi9,  longHi16
entrypoint longHi17, longHi18, longHi24, longHi32, longHi40, longHi47
entrypoint longHi48, longHi54, longHi60, longHi62, longHi63, longHi64
external longHi0  {primBitsHi 64 0}  :: Bit 64 -> Bit 0
external longHi1  {primBitsHi 64 1}  :: Bit 64 -> Bit 1
external longHi2  {primBitsHi 64 2}  :: Bit 64 -> Bit 2
external longHi4  {primBitsHi 64 4}  :: Bit 64 -> Bit 4
external longHi9  {primBitsHi 64 9}  :: Bit 64 -> Bit 9
external longHi16 {primBitsHi 64 16} :: Bit 64 -> Bit 16
external longHi17 {primBitsHi 64 17} :: Bit 64 -> Bit 17
external longHi18 {primBitsHi 64 18} :: Bit 64 -> Bit 18
external longHi24 {primBitsHi 64 24} :: Bit 64 -> Bit 24
external longHi32 {primBitsHi 64 32} :: Bit 64 -> Bit 32
external longHi40 {primBitsHi 64 40} :: Bit 64 -> Bit 40
external longHi47 {primBitsHi 64 47} :: Bit 64 -> Bit 47
external longHi48 {primBitsHi 64 48} :: Bit 64 -> Bit 48
external longHi54 {primBitsHi 64 54} :: Bit 64 -> Bit 54
external longHi60 {primBitsHi 64 60} :: Bit 64 -> Bit 60
external longHi62 {primBitsHi 64 62} :: Bit 64 -> Bit 62
external longHi63 {primBitsHi 64 63} :: Bit 64 -> Bit 63
external longHi64 {primBitsHi 64 64} :: Bit 64 -> Bit 64

-----------------------
.lc: primBitsHi-neg-64  ./milc -pcosoboro -m --64

entrypoint nullHi1, nullHi4
external nullHi1 {primBitsHi 0 1} :: Bit 0 -> Bit 1
external nullHi4 {primBitsHi 0 4} :: Bit 0 -> Bit 4

entrypoint flagHi2, flagHi4
external flagHi2 {primBitsHi 1 2} :: Bit 1 -> Bit 2
external flagHi4 {primBitsHi 1 4} :: Bit 1 -> Bit 4

entrypoint byteHi9, byteHi12
external byteHi9  {primBitsHi 8 9}  :: Bit 8 -> Bit 9
external byteHi12 {primBitsHi 8 12} :: Bit 8 -> Bit 12

entrypoint intHi33, intHi48, intHi64
external intHi33 {primBitsHi 32 33} :: Bit 32 -> Bit 33
external intHi48 {primBitsHi 32 48} :: Bit 32 -> Bit 48
external intHi64 {primBitsHi 32 64} :: Bit 32 -> Bit 64

entrypoint midHi49,  midHi64,  midHi96
external midHi49 {primBitsHi 48 49} :: Bit 48 -> Bit 49
external midHi64 {primBitsHi 48 64} :: Bit 48 -> Bit 64
external midHi96 {primBitsHi 48 96} :: Bit 48 -> Bit 96

entrypoint longHi65, longHi72, longHi96
external longHi65 {primBitsHi 64 65} :: Bit 64 -> Bit 65
external longHi72 {primBitsHi 64 72} :: Bit 64 -> Bit 72
external longHi96 {primBitsHi 64 96} :: Bit 64 -> Bit 96

-----------------------
.lc: primBitsLo-pos-32  ./milc -pcosoboro -m --32

entrypoint nullLo0
external nullLo0 {primBitsLo 0 0} :: Bit 0 -> Bit 0

entrypoint flagLo0, flagLo1
external flagLo0 {primBitsLo 1 0} :: Bit 1 -> Bit 0
external flagLo1 {primBitsLo 1 1} :: Bit 1 -> Bit 1

entrypoint byteLo0, byteLo1, byteLo2, byteLo3, byteLo4
entrypoint byteLo5, byteLo6, byteLo7, byteLo8
external byteLo0 {primBitsLo 8 0} :: Bit 8 -> Bit 0
external byteLo1 {primBitsLo 8 1} :: Bit 8 -> Bit 1
external byteLo2 {primBitsLo 8 2} :: Bit 8 -> Bit 2
external byteLo3 {primBitsLo 8 3} :: Bit 8 -> Bit 3
external byteLo4 {primBitsLo 8 4} :: Bit 8 -> Bit 4
external byteLo5 {primBitsLo 8 5} :: Bit 8 -> Bit 5
external byteLo6 {primBitsLo 8 6} :: Bit 8 -> Bit 6
external byteLo7 {primBitsLo 8 7} :: Bit 8 -> Bit 7
external byteLo8 {primBitsLo 8 8} :: Bit 8 -> Bit 8

entrypoint intLo0, intLo1, intLo2, intLo3, intLo4
entrypoint intLo5, intLo6, intLo7, intLo8
entrypoint intLo30,intLo31,intLo32
external intLo0  {primBitsLo 32 0}  :: Bit 32 -> Bit 0
external intLo1  {primBitsLo 32 1}  :: Bit 32 -> Bit 1
external intLo2  {primBitsLo 32 2}  :: Bit 32 -> Bit 2
external intLo3  {primBitsLo 32 3}  :: Bit 32 -> Bit 3
external intLo4  {primBitsLo 32 4}  :: Bit 32 -> Bit 4
external intLo5  {primBitsLo 32 5}  :: Bit 32 -> Bit 5
external intLo6  {primBitsLo 32 6}  :: Bit 32 -> Bit 6
external intLo7  {primBitsLo 32 7}  :: Bit 32 -> Bit 7
external intLo8  {primBitsLo 32 8}  :: Bit 32 -> Bit 8
external intLo30 {primBitsLo 32 30} :: Bit 32 -> Bit 30
external intLo31 {primBitsLo 32 31} :: Bit 32 -> Bit 31
external intLo32 {primBitsLo 32 32} :: Bit 32 -> Bit 32

entrypoint midLo0,  midLo1,  midLo2,  midLo4,  midLo9,  midLo16
entrypoint midLo17, midLo18, midLo24, midLo32, midLo40, midLo47
entrypoint midLo48
external midLo0  {primBitsLo 48 0}  :: Bit 48 -> Bit 0
external midLo1  {primBitsLo 48 1}  :: Bit 48 -> Bit 1
external midLo2  {primBitsLo 48 2}  :: Bit 48 -> Bit 2
external midLo4  {primBitsLo 48 4}  :: Bit 48 -> Bit 4
external midLo9  {primBitsLo 48 9}  :: Bit 48 -> Bit 9
external midLo16 {primBitsLo 48 16} :: Bit 48 -> Bit 16
external midLo17 {primBitsLo 48 17} :: Bit 48 -> Bit 17
external midLo18 {primBitsLo 48 18} :: Bit 48 -> Bit 18
external midLo24 {primBitsLo 48 24} :: Bit 48 -> Bit 24
external midLo32 {primBitsLo 48 32} :: Bit 48 -> Bit 32
external midLo40 {primBitsLo 48 40} :: Bit 48 -> Bit 40
external midLo47 {primBitsLo 48 47} :: Bit 48 -> Bit 47
external midLo48 {primBitsLo 48 48} :: Bit 48 -> Bit 48

entrypoint longLo0,  longLo1,  longLo2,  longLo4,  longLo9,  longLo16
entrypoint longLo17, longLo18, longLo24, longLo32, longLo40, longLo47
entrypoint longLo48, longLo54, longLo60, longLo62, longLo63, longLo64
external longLo0  {primBitsLo 64 0}  :: Bit 64 -> Bit 0
external longLo1  {primBitsLo 64 1}  :: Bit 64 -> Bit 1
external longLo2  {primBitsLo 64 2}  :: Bit 64 -> Bit 2
external longLo4  {primBitsLo 64 4}  :: Bit 64 -> Bit 4
external longLo9  {primBitsLo 64 9}  :: Bit 64 -> Bit 9
external longLo16 {primBitsLo 64 16} :: Bit 64 -> Bit 16
external longLo17 {primBitsLo 64 17} :: Bit 64 -> Bit 17
external longLo18 {primBitsLo 64 18} :: Bit 64 -> Bit 18
external longLo24 {primBitsLo 64 24} :: Bit 64 -> Bit 24
external longLo32 {primBitsLo 64 32} :: Bit 64 -> Bit 32
external longLo40 {primBitsLo 64 40} :: Bit 64 -> Bit 40
external longLo47 {primBitsLo 64 47} :: Bit 64 -> Bit 47
external longLo48 {primBitsLo 64 48} :: Bit 64 -> Bit 48
external longLo54 {primBitsLo 64 54} :: Bit 64 -> Bit 54
external longLo60 {primBitsLo 64 60} :: Bit 64 -> Bit 60
external longLo62 {primBitsLo 64 62} :: Bit 64 -> Bit 62
external longLo63 {primBitsLo 64 63} :: Bit 64 -> Bit 63
external longLo64 {primBitsLo 64 64} :: Bit 64 -> Bit 64

-----------------------
.lc: primBitsLo-neg-32  ./milc -pcosoboro -m --32

entrypoint nullLo1, nullLo4
external nullLo1 {primBitsLo 0 1} :: Bit 0 -> Bit 1
external nullLo4 {primBitsLo 0 4} :: Bit 0 -> Bit 4

entrypoint flagLo2, flagLo4
external flagLo2 {primBitsLo 1 2} :: Bit 1 -> Bit 2
external flagLo4 {primBitsLo 1 4} :: Bit 1 -> Bit 4

entrypoint byteLo9, byteLo12
external byteLo9  {primBitsLo 8 9}  :: Bit 8 -> Bit 9
external byteLo12 {primBitsLo 8 12} :: Bit 8 -> Bit 12

entrypoint intLo33, intLo48, intLo64
external intLo33 {primBitsLo 32 33} :: Bit 32 -> Bit 33
external intLo48 {primBitsLo 32 48} :: Bit 32 -> Bit 48
external intLo64 {primBitsLo 32 64} :: Bit 32 -> Bit 64

entrypoint midLo49,  midLo64,  midLo96
external midLo49 {primBitsLo 48 49} :: Bit 48 -> Bit 49
external midLo64 {primBitsLo 48 64} :: Bit 48 -> Bit 64
external midLo96 {primBitsLo 48 96} :: Bit 48 -> Bit 96

entrypoint longLo65, longLo72, longLo96
external longLo65 {primBitsLo 64 65} :: Bit 64 -> Bit 65
external longLo72 {primBitsLo 64 72} :: Bit 64 -> Bit 72
external longLo96 {primBitsLo 64 96} :: Bit 64 -> Bit 96

-----------------------
.lc: primBitsLo-pos-64  ./milc -pcosoboro -m --64

entrypoint nullLo0
external nullLo0 {primBitsLo 0 0} :: Bit 0 -> Bit 0

entrypoint flagLo0, flagLo1
external flagLo0 {primBitsLo 1 0} :: Bit 1 -> Bit 0
external flagLo1 {primBitsLo 1 1} :: Bit 1 -> Bit 1

entrypoint byteLo0, byteLo1, byteLo2, byteLo3, byteLo4
entrypoint byteLo5, byteLo6, byteLo7, byteLo8
external byteLo0 {primBitsLo 8 0} :: Bit 8 -> Bit 0
external byteLo1 {primBitsLo 8 1} :: Bit 8 -> Bit 1
external byteLo2 {primBitsLo 8 2} :: Bit 8 -> Bit 2
external byteLo3 {primBitsLo 8 3} :: Bit 8 -> Bit 3
external byteLo4 {primBitsLo 8 4} :: Bit 8 -> Bit 4
external byteLo5 {primBitsLo 8 5} :: Bit 8 -> Bit 5
external byteLo6 {primBitsLo 8 6} :: Bit 8 -> Bit 6
external byteLo7 {primBitsLo 8 7} :: Bit 8 -> Bit 7
external byteLo8 {primBitsLo 8 8} :: Bit 8 -> Bit 8

entrypoint intLo0, intLo1, intLo2, intLo3, intLo4
entrypoint intLo5, intLo6, intLo7, intLo8
entrypoint intLo30,intLo31,intLo32
external intLo0  {primBitsLo 32 0}  :: Bit 32 -> Bit 0
external intLo1  {primBitsLo 32 1}  :: Bit 32 -> Bit 1
external intLo2  {primBitsLo 32 2}  :: Bit 32 -> Bit 2
external intLo3  {primBitsLo 32 3}  :: Bit 32 -> Bit 3
external intLo4  {primBitsLo 32 4}  :: Bit 32 -> Bit 4
external intLo5  {primBitsLo 32 5}  :: Bit 32 -> Bit 5
external intLo6  {primBitsLo 32 6}  :: Bit 32 -> Bit 6
external intLo7  {primBitsLo 32 7}  :: Bit 32 -> Bit 7
external intLo8  {primBitsLo 32 8}  :: Bit 32 -> Bit 8
external intLo30 {primBitsLo 32 30} :: Bit 32 -> Bit 30
external intLo31 {primBitsLo 32 31} :: Bit 32 -> Bit 31
external intLo32 {primBitsLo 32 32} :: Bit 32 -> Bit 32

entrypoint midLo0,  midLo1,  midLo2,  midLo4,  midLo9,  midLo16
entrypoint midLo17, midLo18, midLo24, midLo32, midLo40, midLo47
entrypoint midLo48
external midLo0  {primBitsLo 48 0}  :: Bit 48 -> Bit 0
external midLo1  {primBitsLo 48 1}  :: Bit 48 -> Bit 1
external midLo2  {primBitsLo 48 2}  :: Bit 48 -> Bit 2
external midLo4  {primBitsLo 48 4}  :: Bit 48 -> Bit 4
external midLo9  {primBitsLo 48 9}  :: Bit 48 -> Bit 9
external midLo16 {primBitsLo 48 16} :: Bit 48 -> Bit 16
external midLo17 {primBitsLo 48 17} :: Bit 48 -> Bit 17
external midLo18 {primBitsLo 48 18} :: Bit 48 -> Bit 18
external midLo24 {primBitsLo 48 24} :: Bit 48 -> Bit 24
external midLo32 {primBitsLo 48 32} :: Bit 48 -> Bit 32
external midLo40 {primBitsLo 48 40} :: Bit 48 -> Bit 40
external midLo47 {primBitsLo 48 47} :: Bit 48 -> Bit 47
external midLo48 {primBitsLo 48 48} :: Bit 48 -> Bit 48

entrypoint longLo0,  longLo1,  longLo2,  longLo4,  longLo9,  longLo16
entrypoint longLo17, longLo18, longLo24, longLo32, longLo40, longLo47
entrypoint longLo48, longLo54, longLo60, longLo62, longLo63, longLo64
external longLo0  {primBitsLo 64 0}  :: Bit 64 -> Bit 0
external longLo1  {primBitsLo 64 1}  :: Bit 64 -> Bit 1
external longLo2  {primBitsLo 64 2}  :: Bit 64 -> Bit 2
external longLo4  {primBitsLo 64 4}  :: Bit 64 -> Bit 4
external longLo9  {primBitsLo 64 9}  :: Bit 64 -> Bit 9
external longLo16 {primBitsLo 64 16} :: Bit 64 -> Bit 16
external longLo17 {primBitsLo 64 17} :: Bit 64 -> Bit 17
external longLo18 {primBitsLo 64 18} :: Bit 64 -> Bit 18
external longLo24 {primBitsLo 64 24} :: Bit 64 -> Bit 24
external longLo32 {primBitsLo 64 32} :: Bit 64 -> Bit 32
external longLo40 {primBitsLo 64 40} :: Bit 64 -> Bit 40
external longLo47 {primBitsLo 64 47} :: Bit 64 -> Bit 47
external longLo48 {primBitsLo 64 48} :: Bit 64 -> Bit 48
external longLo54 {primBitsLo 64 54} :: Bit 64 -> Bit 54
external longLo60 {primBitsLo 64 60} :: Bit 64 -> Bit 60
external longLo62 {primBitsLo 64 62} :: Bit 64 -> Bit 62
external longLo63 {primBitsLo 64 63} :: Bit 64 -> Bit 63
external longLo64 {primBitsLo 64 64} :: Bit 64 -> Bit 64

-----------------------
.lc: primBitsLo-neg-64  ./milc -pcosoboro -m --64

entrypoint nullLo1, nullLo4
external nullLo1 {primBitsLo 0 1} :: Bit 0 -> Bit 1
external nullLo4 {primBitsLo 0 4} :: Bit 0 -> Bit 4

entrypoint flagLo2, flagLo4
external flagLo2 {primBitsLo 1 2} :: Bit 1 -> Bit 2
external flagLo4 {primBitsLo 1 4} :: Bit 1 -> Bit 4

entrypoint byteLo9, byteLo12
external byteLo9  {primBitsLo 8 9}  :: Bit 8 -> Bit 9
external byteLo12 {primBitsLo 8 12} :: Bit 8 -> Bit 12

entrypoint intLo33, intLo48, intLo64
external intLo33 {primBitsLo 32 33} :: Bit 32 -> Bit 33
external intLo48 {primBitsLo 32 48} :: Bit 32 -> Bit 48
external intLo64 {primBitsLo 32 64} :: Bit 32 -> Bit 64

entrypoint midLo49,  midLo64,  midLo96
external midLo49 {primBitsLo 48 49} :: Bit 48 -> Bit 49
external midLo64 {primBitsLo 48 64} :: Bit 48 -> Bit 64
external midLo96 {primBitsLo 48 96} :: Bit 48 -> Bit 96

entrypoint longLo65, longLo72, longLo96
external longLo65 {primBitsLo 64 65} :: Bit 64 -> Bit 65
external longLo72 {primBitsLo 64 72} :: Bit 64 -> Bit 72
external longLo96 {primBitsLo 64 96} :: Bit 64 -> Bit 96

-----------------------
exec: primBitsHiLo-pos-32  ./milc -pcosoboro -m --32 bitsHiLo.lc
-----------------------
exec: primBitsHiLo-noopt-pos-32  ./milc -pcosobor -m --32 bitsHiLo.lc
-----------------------
.lc: primIxFromLiteral-pos-32   ./milc -pcosoboro -m --32

entrypoint ix1, ix2, ix12, ix32, ix256, ix1G
external ix1   {primIxFromLiteral 0 1}   :: ProxyNat  0 -> Ix 1
external ix2   {primIxFromLiteral 1 2}   :: ProxyNat  1 -> Ix 2
external ix12  {primIxFromLiteral 8 12}  :: ProxyNat  8 -> Ix 12
external ix32  {primIxFromLiteral 17 32} :: ProxyNat 17 -> Ix 32
external ix256 {primIxFromLiteral 8 256} :: ProxyNat  8 -> Ix 256
external ix1G  {primIxFromLiteral 68 1G} :: ProxyNat 68 -> Ix 1G

-----------------------
.lc: primIxFromLiteral-neg-32   ./milc -pcosoboro -m --32

-- values too large for modulus:
entrypoint ix1, ix2, ix12, ix32, ix256, ix1G
external ix1   {primIxFromLiteral 10 1}    :: ProxyNat 10 -> Ix 1
external ix2   {primIxFromLiteral 11 2}    :: ProxyNat 11 -> Ix 2
external ix12  {primIxFromLiteral 18 12}   :: ProxyNat 18 -> Ix 12
external ix32  {primIxFromLiteral 317 32}  :: ProxyNat 317 -> Ix 32
external ix256 {primIxFromLiteral 256 256} :: ProxyNat 256 -> Ix 256
external ix1G  {primIxFromLiteral 2G 1G}   :: ProxyNat 2G -> Ix 1G

-- modulus types too large:
entrypoint ix0, ix2G, ix3G, ix4G
external ix0   {primIxFromLiteral 0 0}   :: ProxyNat  0 -> Ix 0
external ix2G  {primIxFromLiteral 1G 2G} :: ProxyNat 1G -> Ix 2G
external ix3G  {primIxFromLiteral 2G 3G} :: ProxyNat 2G -> Ix 3G
external ix4G  {primIxFromLiteral 3G 4G} :: ProxyNat 3G -> Ix 4G

-----------------------
.lc: primIxFromLiteral-pos-64   ./milc -pcosoboro -m --64

entrypoint ix1, ix2, ix12, ix32, ix256, ix1G, ix2G, ix3G, ix4G
external ix1   {primIxFromLiteral 0 1}   :: ProxyNat  0 -> Ix 1
external ix2   {primIxFromLiteral 1 2}   :: ProxyNat  1 -> Ix 2
external ix12  {primIxFromLiteral 8 12}  :: ProxyNat  8 -> Ix 12
external ix32  {primIxFromLiteral 17 32} :: ProxyNat 17 -> Ix 32
external ix256 {primIxFromLiteral 8 256} :: ProxyNat  8 -> Ix 256
external ix1G  {primIxFromLiteral 68 1G} :: ProxyNat 68 -> Ix 1G
external ix2G  {primIxFromLiteral 1G 2G} :: ProxyNat 1G -> Ix 2G
external ix3G  {primIxFromLiteral 2G 3G} :: ProxyNat 2G -> Ix 3G
external ix4G  {primIxFromLiteral 3G 4G} :: ProxyNat 3G -> Ix 4G

-----------------------
.lc: primIxMaxBound-pos   ./milc -pcosoboro -m --32

entrypoint max1, max2, max12, max32, max256, max257, max1G
external max1   {primIxMaxBound 1}   :: Ix 1
external max2   {primIxMaxBound 2}   :: Ix 2
external max12  {primIxMaxBound 12}  :: Ix 12
external max32  {primIxMaxBound 32}  :: Ix 32
external max256 {primIxMaxBound 256} :: Ix 256
external max257 {primIxMaxBound 257} :: Ix 257
external max1G  {primIxMaxBound 1G}  :: Ix 1G

-----------------------
.lc: primIxMaxBound-neg   ./milc -pcosoboro -m --32

entrypoint max0, max2G
external max0  {primIxMaxBound 0}  :: Ix 0
external max2G {primIxMaxBound 2G} :: Ix 2G

-----------------------
.lc: primIxToBit-pos-32   ./milc -pcosoboro -m --32

-- examples that fit in a single word:
entrypoint ix1ToBit1,     ix1ToBit2,     ix1ToBit3
entrypoint ix2ToBit1,     ix2ToBit2,     ix2ToBit3
entrypoint ix4ToBit2,     ix4ToBit10,    ix257ToBit9, ix257ToBit11
entrypoint ix1000ToBit10, ix1000ToBit12, ix1MToBit20, ix1MToBit32
entrypoint ix511ToBit9,   ix512ToBit9

external ix1ToBit1     {primIxToBit 1     1} :: Ix 1 -> Bit 1
external ix1ToBit2     {primIxToBit 1     2} :: Ix 1 -> Bit 2
external ix1ToBit3     {primIxToBit 1     3} :: Ix 1 -> Bit 3
external ix2ToBit1     {primIxToBit 2     1} :: Ix 2 -> Bit 1
external ix2ToBit2     {primIxToBit 2     2} :: Ix 2 -> Bit 2
external ix2ToBit3     {primIxToBit 2     3} :: Ix 2 -> Bit 3
external ix4ToBit2     {primIxToBit 4     2} :: Ix 4 -> Bit 2
external ix4ToBit10    {primIxToBit 4    10} :: Ix 4 -> Bit 10
external ix257ToBit9   {primIxToBit 257   9} :: Ix 257 -> Bit 9
external ix257ToBit11  {primIxToBit 257  11} :: Ix 257 -> Bit 11
external ix1000ToBit10 {primIxToBit 1000 10} :: Ix 1000 -> Bit 10
external ix1000ToBit12 {primIxToBit 1000 12} :: Ix 1000 -> Bit 12
external ix1MToBit20   {primIxToBit 1M   20} :: Ix 1M -> Bit 20
external ix1MToBit32   {primIxToBit 1M   32} :: Ix 1M -> Bit 32
external ix511ToBit9   {primIxToBit 511   9} :: Ix 511  -> Bit 9
external ix512ToBit9   {primIxToBit 512   9} :: Ix 512  -> Bit 9

-- examples that span multiple words:
entrypoint ix4ToBit33,   ix4ToBit64,  ix257ToBit72
entrypoint ix257ToBit96, ix1MToBit208

external ix4ToBit33    {primIxToBit 4    33} :: Ix 4 -> Bit 33
external ix4ToBit64    {primIxToBit 4    64} :: Ix 4 -> Bit 64
external ix257ToBit72  {primIxToBit 257  72} :: Ix 257 -> Bit 72
external ix257ToBit96  {primIxToBit 257  96} :: Ix 257 -> Bit 96
external ix1MToBit208  {primIxToBit 1M  208} :: Ix 1M -> Bit 208

-----------------------
.lc: primIxToBit-neg-32   ./milc -pcosoboro -m --32

entrypoint ix4ToBit1,   ix257ToBit8, ix1000ToBit9, ix1MToBit12
entrypoint ix1MToBit19, ix2GToBit32, ix257ToBit2M, ix1000ToBit8K
entrypoint ix513ToBit9

external ix4ToBit1     {primIxToBit 4     1} :: Ix 4 -> Bit 1
external ix257ToBit8   {primIxToBit 257   8} :: Ix 257 -> Bit 8
external ix1000ToBit9  {primIxToBit 1000  9} :: Ix 1000 -> Bit 9
external ix1MToBit12   {primIxToBit 1M   12} :: Ix 1M -> Bit 12
external ix1MToBit19   {primIxToBit 1M   19} :: Ix 1M -> Bit 19
external ix2GToBit32   {primIxToBit 2G   32} :: Ix 2G -> Bit 32
external ix257ToBit2M  {primIxToBit 257  2M} :: Ix 257 -> Bit 2M
external ix1000ToBit8K {primIxToBit 1000 8K} :: Ix 1000 -> Bit 8K
external ix513ToBit9   {primIxToBit 513   9} :: Ix 513  -> Bit 9

-----------------------
.lc: primIxShiftL-pos-32   ./milc -pcosoboro -m --32

entrypoint shlix2_1, shlix4_2, shlix8_3, shlix1K_10, shlix1G_30
external shlix2_1   {primIxShiftL  2  1} :: Ix 2  -> Ix 1  -> Ix 2
external shlix4_2   {primIxShiftL  4  2} :: Ix 4  -> Ix 2  -> Ix 4
external shlix8_3   {primIxShiftL  8  3} :: Ix 8  -> Ix 3  -> Ix 8
external shlix1K_10 {primIxShiftL 1K 10} :: Ix 1K -> Ix 10 -> Ix 1K
external shlix1G_30 {primIxShiftL 1G 30} :: Ix 1G -> Ix 30 -> Ix 1G

entrypoint primIxShiftL16
primIxShiftL16 = y0
external y0 {primIxShiftL 16 4} :: Ix 16 -> Ix 4 -> Ix 16

entrypoint primIxShiftL4K
primIxShiftL4K = y1
external y1 {primIxShiftL 4K 12} :: Ix 4K -> Ix 12 -> Ix 4K

-----------------------
.lc: primIxShiftL-neg-32   ./milc -pcosoboro -m --32

entrypoint shlix0_1, shlix1_0, shlix4_3, shlix100_9, shlix3G_31
external shlix0_1   {primIxShiftL   0  1} :: Ix 0   -> Ix 1  -> Ix 0
external shlix1_0   {primIxShiftL   1  0} :: Ix 1   -> Ix 0  -> Ix 1
external shlix4_3   {primIxShiftL   4  3} :: Ix 4   -> Ix 3  -> Ix 4
external shlix100_9 {primIxShiftL 100  9} :: Ix 100 -> Ix 9  -> Ix 100
external shlix3G_31 {primIxShiftL  3G 31} :: Ix 3G  -> Ix 31 -> Ix 3G

-----------------------
.lc: primIxShiftR-pos-32   ./milc -pcosoboro -m --32

entrypoint shrix2_1, shrix4_2, shrix8_3, shrix1K_10, shrix1G_30
external shrix2_1   {primIxShiftR  2  1} :: Ix 2  -> Ix 1  -> Ix 2
external shrix4_2   {primIxShiftR  4  2} :: Ix 4  -> Ix 2  -> Ix 4
external shrix8_3   {primIxShiftR  8  3} :: Ix 8  -> Ix 3  -> Ix 8
external shrix1K_10 {primIxShiftR 1K 10} :: Ix 1K -> Ix 10 -> Ix 1K
external shrix1G_30 {primIxShiftR 1G 30} :: Ix 1G -> Ix 30 -> Ix 1G

entrypoint primIxShiftR16
primIxShiftR16 = y2
external y2 {primIxShiftR 16 4} :: Ix 16 -> Ix 4 -> Ix 16

entrypoint primIxShiftR4K
primIxShiftR4K = y3
external y3 {primIxShiftR 4K 12} :: Ix 4K -> Ix 12 -> Ix 4K

-----------------------
.lc: primIxShiftR-neg-32   ./milc -pcosoboro -m --32

entrypoint shrix0_1, shrix1_0, shrix4_3, shrix100_9, shrix3G_31
external shrix0_1   {primIxShiftL   0  1} :: Ix 0   -> Ix 1  -> Ix 0
external shrix1_0   {primIxShiftL   1  0} :: Ix 1   -> Ix 0  -> Ix 1
external shrix4_3   {primIxShiftL   4  3} :: Ix 4   -> Ix 3  -> Ix 4
external shrix100_9 {primIxShiftL 100  9} :: Ix 100 -> Ix 9  -> Ix 100
external shrix3G_31 {primIxShiftL  3G 31} :: Ix 3G  -> Ix 31 -> Ix 3G

-----------------------
.lc: primModIx-pos-32   ./milc -pcosoboro -m --32

entrypoint modIx2_4
entrypoint modIx10_16, modIx10_32, modIx32_16, modIx32_32, modIx32_1G

external modIx2_4    {primModIx  2  4} :: Bit  2 -> Ix 4
external modIx10_16  {primModIx 10 16} :: Bit 10 -> Ix 16
external modIx10_32  {primModIx 10 32} :: Bit 10 -> Ix 32
external modIx32_16  {primModIx 32 16} :: Bit 32 -> Ix 16
external modIx32_32  {primModIx 32 32} :: Bit 32 -> Ix 32
external modIx32_1G  {primModIx 32 1G} :: Bit 32 -> Ix 1G

entrypoint modIx13_5, modIx24_17
external modIx13_5   {primModIx 13 5}  :: Bit 13 -> Ix 5   -- not power of two
external modIx24_17  {primModIx 24 17} :: Bit 24 -> Ix 17

entrypoint modIx33_8, modIx64_256, modIx72_4K, modIx96_256
external modIx33_8   {primModIx 33 8}   :: Bit 33 -> Ix 8   -- more than one word, power of two
external modIx64_256 {primModIx 64 256} :: Bit 64 -> Ix 256
external modIx72_4K  {primModIx 72 4K}  :: Bit 72 -> Ix 4K
external modIx96_256 {primModIx 96 256} :: Bit 96 -> Ix 256

entrypoint modIx0_1, modIx1_1, modIx2_1, modIx3_1, modIx4_1
external modIx0_1 {primModIx 0 1} :: Bit 0 -> Ix 1
external modIx1_1 {primModIx 1 1} :: Bit 1 -> Ix 1
external modIx2_1 {primModIx 2 1} :: Bit 2 -> Ix 1
external modIx3_1 {primModIx 3 1} :: Bit 3 -> Ix 1
external modIx4_1 {primModIx 4 1} :: Bit 4 -> Ix 1

entrypoint modIx0_2, modIx1_2, modIx2_2, modIx3_2, modIx4_2
external modIx0_2 {primModIx 0 2} :: Bit 0 -> Ix 2
external modIx1_2 {primModIx 1 2} :: Bit 1 -> Ix 2
external modIx2_2 {primModIx 2 2} :: Bit 2 -> Ix 2
external modIx3_2 {primModIx 3 2} :: Bit 3 -> Ix 2
external modIx4_2 {primModIx 4 2} :: Bit 4 -> Ix 2

entrypoint modIx0_3, modIx1_3, modIx2_3, modIx3_3, modIx4_3
external modIx0_3 {primModIx 0 3} :: Bit 0 -> Ix 3
external modIx1_3 {primModIx 1 3} :: Bit 1 -> Ix 3
external modIx2_3 {primModIx 2 3} :: Bit 2 -> Ix 3
external modIx3_3 {primModIx 3 3} :: Bit 3 -> Ix 3
external modIx4_3 {primModIx 4 3} :: Bit 4 -> Ix 3

entrypoint modIx1_4
external modIx1_4 {primModIx 1 4} :: Bit  1 -> Ix 4

entrypoint modIx0_7, modIx1_7, modIx2_7, modIx3_7, modIx4_7
external modIx0_7 {primModIx 0 7} :: Bit 0 -> Ix 7
external modIx1_7 {primModIx 1 7} :: Bit 1 -> Ix 7
external modIx2_7 {primModIx 2 7} :: Bit 2 -> Ix 7
external modIx3_7 {primModIx 3 7} :: Bit 3 -> Ix 7
external modIx4_7 {primModIx 4 7} :: Bit 4 -> Ix 7

entrypoint modIx0_8, modIx1_8, modIx2_8, modIx3_8, modIx4_8
external modIx0_8 {primModIx 0 8} :: Bit 0 -> Ix 8
external modIx1_8 {primModIx 1 8} :: Bit 1 -> Ix 8
external modIx2_8 {primModIx 2 8} :: Bit 2 -> Ix 8
external modIx3_8 {primModIx 3 8} :: Bit 3 -> Ix 8
external modIx4_8 {primModIx 4 8} :: Bit 4 -> Ix 8

-----------------------
.lc: primModIx-neg-32   ./milc -pcosoboro -m --32

entrypoint modIx33_5, modIx64_17
external modIx33_5   {primModIx 33  5} :: Bit 33 -> Ix 5   -- bigger than a word, not power of two
external modIx64_17  {primModIx 64 17} :: Bit 64 -> Ix 17

entrypoint modIx64_8G, modIx12_0, modIx32_2G, modIx32_4G
external modIx64_8G  {primModIx 64 8G} :: Bit 64 -> Ix 8G  -- invalid index size
external modIx12_0   {primModIx 12  0} :: Bit 12 -> Ix 0
external modIx32_2G  {primModIx 32 2G} :: Bit 32 -> Ix 2G
external modIx32_4G  {primModIx 32 4G} :: Bit 32 -> Ix 4G

-----------------------
.lc: primRelaxIx-pos-32   ./milc -pcosoboro -m --32

entrypoint relax1_1, relax1_2, relax3_7, relax1K_1K, relax1K_1G
entrypoint relax1_3, relax2_2, relax2_3, relax3_3
external relax1_1   {primRelaxIx  1  1} :: Ix 1  -> Ix 1
external relax1_2   {primRelaxIx  1  2} :: Ix 1  -> Ix 2
external relax1_3   {primRelaxIx  1  3} :: Ix 1  -> Ix 3
external relax2_2   {primRelaxIx  2  2} :: Ix 2  -> Ix 2
external relax2_3   {primRelaxIx  2  3} :: Ix 2  -> Ix 3
external relax3_3   {primRelaxIx  3  3} :: Ix 3  -> Ix 3
external relax3_7   {primRelaxIx  3  7} :: Ix 3  -> Ix 7
external relax1K_1K {primRelaxIx 1K 1K} :: Ix 1K -> Ix 1K
external relax1K_1G {primRelaxIx 1K 1G} :: Ix 1K -> Ix 1G

-----------------------
.lc: primRelaxIx-neg-32   ./milc -pcosoboro -m --32

entrypoint relax0_4, relax0_0, relax2G_2G, relax2_1, relax7_3, relax1K_72, relax1G_1K
external relax0_4   {primRelaxIx  0  4} :: Ix 0  -> Ix 4
external relax0_0   {primRelaxIx  0  0} :: Ix 0  -> Ix 0
external relax2G_2G {primRelaxIx 2G 2G} :: Ix 2G -> Ix 2G
external relax2_1   {primRelaxIx  2  1} :: Ix 2  -> Ix 1
external relax7_3   {primRelaxIx  7  3} :: Ix 7  -> Ix 3
external relax1K_72 {primRelaxIx 1K 72} :: Ix 1K -> Ix 72
external relax1G_1K {primRelaxIx 1G 1K} :: Ix 1G -> Ix 1K

-----------------------
.lc: primGenIncIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genIncF1, genIncW1, genIncI1, genIncB1, genIncM1
external genIncF1 {primGenIncIx Flag     1} :: Flag   -> (Ix 1 -> Flag)   -> Ix 1 -> Flag
external genIncW1 {primGenIncIx Word     1} :: Word   -> (Ix 1 -> Word)   -> Ix 1 -> Word
external genIncI1 {primGenIncIx (Ix 1)   1} :: Ix 1   -> (Ix 1 -> Ix 1)   -> Ix 1 -> Ix 1
external genIncB1 {primGenIncIx (Bit 64) 1} :: Bit 64 -> (Ix 1 -> Bit 64) -> Ix 1 -> Bit 64
external genIncM1 {primGenIncIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Ix 1 -> M1
type M1 = Maybe (Ix 1)

entrypoint genIncF2, genIncW2, genIncI2, genIncB2, genIncM2
external genIncF2 {primGenIncIx Flag     2} :: Flag   -> (Ix 2 -> Flag)   -> Ix 2 -> Flag
external genIncW2 {primGenIncIx Word     2} :: Word   -> (Ix 2 -> Word)   -> Ix 2 -> Word
external genIncI2 {primGenIncIx (Ix 1)   2} :: Ix 1   -> (Ix 2 -> Ix 1)   -> Ix 2 -> Ix 1
external genIncB2 {primGenIncIx (Bit 64) 2} :: Bit 64 -> (Ix 2 -> Bit 64) -> Ix 2 -> Bit 64
external genIncM2 {primGenIncIx M2       2} :: M2     -> (Ix 2 -> M2)     -> Ix 2 -> M2
type M2 = Maybe (Ix 2)

entrypoint genIncF7, genIncW7, genIncI7, genIncB7, genIncM7
external genIncF7 {primGenIncIx Flag     7} :: Flag   -> (Ix 7 -> Flag)   -> Ix 7 -> Flag
external genIncW7 {primGenIncIx Word     7} :: Word   -> (Ix 7 -> Word)   -> Ix 7 -> Word
external genIncI7 {primGenIncIx (Ix 7)   7} :: Ix 7   -> (Ix 7 -> Ix 7)   -> Ix 7 -> Ix 7
external genIncB7 {primGenIncIx (Bit 64) 7} :: Bit 64 -> (Ix 7 -> Bit 64) -> Ix 7 -> Bit 64
external genIncM7 {primGenIncIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Ix 7 -> M7
type M7 = Maybe (Ix 7)

entrypoint genIncF64, genIncW64, genIncI64, genIncB64, genIncM64
external genIncF64 {primGenIncIx Flag     64} :: Flag   -> (Ix 64 -> Flag)   -> Ix 64 -> Flag
external genIncW64 {primGenIncIx Word     64} :: Word   -> (Ix 64 -> Word)   -> Ix 64 -> Word
external genIncI64 {primGenIncIx (Ix 64)   64} :: Ix 64   -> (Ix 64 -> Ix 64)   -> Ix 64 -> Ix 64
external genIncB64 {primGenIncIx (Bit 64) 64} :: Bit 64 -> (Ix 64 -> Bit 64) -> Ix 64 -> Bit 64
external genIncM64 {primGenIncIx M64       64} :: M64     -> (Ix 64 -> M64)     -> Ix 64 -> M64
type M64 = Maybe (Ix 64)

entrypoint incIx1, incIx7, incIx64
incIx1  = genIncM1  Nothing Just
incIx7  = genIncM7  Nothing Just
incIx64 = genIncM64 Nothing Just

-----------------------
.lc: primGenIncIx-pos-b-32   ./milc -pcosoro -m --32
-- A subset of the previous test; the key difference here is that we've removed the "b" pass.

data Maybe a = Nothing | Just a

entrypoint genIncM1
external genIncM1 {primGenIncIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Ix 1 -> M1
type M1 = Maybe (Ix 1)

entrypoint genIncM7
external genIncM7 {primGenIncIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Ix 7 -> M7
type M7 = Maybe (Ix 7)

entrypoint genIncM64
external genIncM64 {primGenIncIx M64       64} :: M64     -> (Ix 64 -> M64)     -> Ix 64 -> M64
type M64 = Maybe (Ix 64)

entrypoint incIx1, incIx7, incIx64
incIx1  = genIncM1  Nothing Just
incIx7  = genIncM7  Nothing Just
incIx64 = genIncM64 Nothing Just

-----------------------
.lc: primGenIncIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genIncF2G, genIncW2G, genIncI2G, genIncB2G, genIncM2G
external genIncF2G {primGenIncIx Flag     2G} :: Flag   -> (Ix 2G -> Flag)   -> Ix 2G -> Flag
external genIncW2G {primGenIncIx Word     2G} :: Word   -> (Ix 2G -> Word)   -> Ix 2G -> Word
external genIncI2G {primGenIncIx (Ix 2G)   2G} :: Ix 2G   -> (Ix 2G -> Ix 2G)   -> Ix 2G -> Ix 2G
external genIncB2G {primGenIncIx (Bit 64) 2G} :: Bit 64 -> (Ix 2G -> Bit 64) -> Ix 2G -> Bit 64
external genIncM2G {primGenIncIx M2G       2G} :: M2G     -> (Ix 2G -> M2G)     -> Ix 2G -> M2G
type M2G = Maybe (Ix 2G)

-----------------------
.lc: primIncIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint incIx1, incIx2, incIx7, incIx32, incIx100, incIx1G
external incIx1  {primIncIx 1}  :: Ix 1  -> Maybe (Ix 1)
external incIx2   {primIncIx 2}   :: Ix 2   -> Maybe (Ix 2)
external incIx7   {primIncIx 7}   :: Ix 7   -> Maybe (Ix 7)
external incIx32  {primIncIx 32}  :: Ix 32  -> Maybe (Ix 32)
external incIx100 {primIncIx 100} :: Ix 100 -> Maybe (Ix 100)
external incIx1G  {primIncIx 1G}  :: Ix 1G  -> Maybe (Ix 1G)

-----------------------
.lc: primIncIx-pos-b-32  ./milc -pcosoro -m --32

data Maybe a = Nothing | Just a

entrypoint incIx7, incIx32
external incIx7   {primIncIx 7}   :: Ix 7   -> Maybe (Ix 7)
external incIx32  {primIncIx 32}  :: Ix 32  -> Maybe (Ix 32)

-----------------------
.lc: primIncIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint incIx0, incIx2G
external incIx0  {primIncIx 0}  :: Ix 0  -> Maybe (Ix 0)
external incIx2G {primIncIx 2G} :: Ix 2G -> Maybe (Ix 2G)

-----------------------
.lc: primGenDecIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genDecF1, genDecW1, genDecI1, genDecB1, genDecM1
external genDecF1 {primGenDecIx Flag     1} :: Flag   -> (Ix 1 -> Flag)   -> Ix 1 -> Flag
external genDecW1 {primGenDecIx Word     1} :: Word   -> (Ix 1 -> Word)   -> Ix 1 -> Word
external genDecI1 {primGenDecIx (Ix 1)   1} :: Ix 1   -> (Ix 1 -> Ix 1)   -> Ix 1 -> Ix 1
external genDecB1 {primGenDecIx (Bit 64) 1} :: Bit 64 -> (Ix 1 -> Bit 64) -> Ix 1 -> Bit 64
external genDecM1 {primGenDecIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Ix 1 -> M1
type M1 = Maybe (Ix 1)

entrypoint genDecF2, genDecW2, genDecI2, genDecB2, genDecM2
external genDecF2 {primGenDecIx Flag     2} :: Flag   -> (Ix 2 -> Flag)   -> Ix 2 -> Flag
external genDecW2 {primGenDecIx Word     2} :: Word   -> (Ix 2 -> Word)   -> Ix 2 -> Word
external genDecI2 {primGenDecIx (Ix 1)   2} :: Ix 1   -> (Ix 2 -> Ix 1)   -> Ix 2 -> Ix 1
external genDecB2 {primGenDecIx (Bit 64) 2} :: Bit 64 -> (Ix 2 -> Bit 64) -> Ix 2 -> Bit 64
external genDecM2 {primGenDecIx M2       2} :: M2     -> (Ix 2 -> M2)     -> Ix 2 -> M2
type M2 = Maybe (Ix 2)

entrypoint genDecF7, genDecW7, genDecI7, genDecB7, genDecM7
external genDecF7 {primGenDecIx Flag     7} :: Flag   -> (Ix 7 -> Flag)   -> Ix 7 -> Flag
external genDecW7 {primGenDecIx Word     7} :: Word   -> (Ix 7 -> Word)   -> Ix 7 -> Word
external genDecI7 {primGenDecIx (Ix 7)   7} :: Ix 7   -> (Ix 7 -> Ix 7)   -> Ix 7 -> Ix 7
external genDecB7 {primGenDecIx (Bit 64) 7} :: Bit 64 -> (Ix 7 -> Bit 64) -> Ix 7 -> Bit 64
external genDecM7 {primGenDecIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Ix 7 -> M7
type M7 = Maybe (Ix 7)

entrypoint genDecF64, genDecW64, genDecI64, genDecB64, genDecM64
external genDecF64 {primGenDecIx Flag     64} :: Flag   -> (Ix 64 -> Flag)   -> Ix 64 -> Flag
external genDecW64 {primGenDecIx Word     64} :: Word   -> (Ix 64 -> Word)   -> Ix 64 -> Word
external genDecI64 {primGenDecIx (Ix 64)  64} :: Ix 64  -> (Ix 64 -> Ix 64)  -> Ix 64 -> Ix 64
external genDecB64 {primGenDecIx (Bit 64) 64} :: Bit 64 -> (Ix 64 -> Bit 64) -> Ix 64 -> Bit 64
external genDecM64 {primGenDecIx M64      64} :: M64    -> (Ix 64 -> M64)    -> Ix 64 -> M64
type M64 = Maybe (Ix 64)

entrypoint decIx1, decIx7, decIx64
decIx1  = genDecM1  Nothing Just
decIx7  = genDecM7  Nothing Just
decIx64 = genDecM64 Nothing Just

-----------------------
.lc: primGenDecIx-pos-b-32   ./milc -pcosoro -m --32
-- A subset of the previous test; the key difference here is that we've removed the "b" pass.

data Maybe a = Nothing | Just a

entrypoint genDecM1
external genDecM1 {primGenDecIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Ix 1 -> M1
type M1 = Maybe (Ix 1)

entrypoint genDecM7
external genDecM7 {primGenDecIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Ix 7 -> M7
type M7 = Maybe (Ix 7)

entrypoint genDecM64
external genDecM64 {primGenDecIx M64    64} :: M64    -> (Ix 64 -> M64)   -> Ix 64 -> M64
type M64 = Maybe (Ix 64)

entrypoint decIx1, decIx7, decIx64
decIx1  = genDecM1  Nothing Just
decIx7  = genDecM7  Nothing Just
decIx64 = genDecM64 Nothing Just

-----------------------
.lc: primGenDecIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genDecF2G, genDecW2G, genDecI2G, genDecB2G, genDecM2G
external genDecF2G {primGenDecIx Flag     2G} :: Flag   -> (Ix 2G -> Flag)   -> Ix 2G -> Flag
external genDecW2G {primGenDecIx Word     2G} :: Word   -> (Ix 2G -> Word)   -> Ix 2G -> Word
external genDecI2G {primGenDecIx (Ix 2G)  2G} :: Ix 2G  -> (Ix 2G -> Ix 2G)  -> Ix 2G -> Ix 2G
external genDecB2G {primGenDecIx (Bit 64) 2G} :: Bit 64 -> (Ix 2G -> Bit 64) -> Ix 2G -> Bit 64
external genDecM2G {primGenDecIx M2G      2G} :: M2G    -> (Ix 2G -> M2G)    -> Ix 2G -> M2G
type M2G = Maybe (Ix 2G)

-----------------------
.lc: primDecIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint decIx1, decIx2, decIx7, decIx31, decIx65535
external decIx1     {primDecIx 1}     :: Ix 1     -> Maybe (Ix 1)
external decIx2     {primDecIx 2}     :: Ix 2     -> Maybe (Ix 2)
external decIx7     {primDecIx 7}     :: Ix 7     -> Maybe (Ix 7)
external decIx31    {primDecIx 31}    :: Ix 31    -> Maybe (Ix 31)
external decIx65535 {primDecIx 65535} :: Ix 65535 -> Maybe (Ix 65535)

-----------------------
.lc: primDecIx-pos-b-32  ./milc -pcosoro -m --32
-- same code but compiled without "b" pass.

data Maybe a = Nothing | Just a

entrypoint decIx1, decIx2, decIx7, decIx31, decIx65535
external decIx1     {primDecIx 1}     :: Ix 1     -> Maybe (Ix 1)
external decIx2     {primDecIx 2}     :: Ix 2     -> Maybe (Ix 2)
external decIx7     {primDecIx 7}     :: Ix 7     -> Maybe (Ix 7)
external decIx31    {primDecIx 31}    :: Ix 31    -> Maybe (Ix 31)
external decIx65535 {primDecIx 65535} :: Ix 65535 -> Maybe (Ix 65535)

-----------------------
.lc: primDecIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint decIx4, decIx8, decIx32, decIx4K, decIx1G
external decIx4   {primDecIx 4}   :: Ix 4   -> Maybe (Ix 4)   -- powers of two
external decIx8   {primDecIx 8}   :: Ix 8   -> Maybe (Ix 8)
external decIx32  {primDecIx 32}  :: Ix 32  -> Maybe (Ix 32)
external decIx4K  {primDecIx 4K}  :: Ix 4K  -> Maybe (Ix 4K)
external decIx1G  {primDecIx 1G}  :: Ix 1G  -> Maybe (Ix 1G)

entrypoint decIx0, decIx2G
external decIx0   {primDecIx 0}   :: Ix 0   -> Maybe (Ix 0)   -- invalid index types
external decIx2G  {primDecIx 2G}  :: Ix 2G  -> Maybe (Ix 2G)

entrypoint decIx6, decIx3M, decIx100
external decIx6   {primDecIx 6}   :: Ix 6   -> Maybe (Ix 6)
external decIx100 {primDecIx 100} :: Ix 100 -> Maybe (Ix 100)
external decIx3M  {primDecIx 3M}  :: Ix 3M  -> Maybe (Ix 3M)

-----------------------
.lc: primGenLtInc-pos   ./milc -pcsoro -m --32
require "prelude.lc"
  
external genLtInc {primGenLtInc (Maybe (Ix m)) m},
         genLtDec {primGenLtDec (Maybe (Ix m)) m}
   :: Maybe (Ix m) -> (Ix m -> Maybe (Ix m)) -> Ix m -> Ix m -> Ix m -> Maybe (Ix m)

entrypoint ltInc1, ltInc2, ltInc3, ltInc80, ltInc1K, ltInc1G
ltInc1  = genLtInc Nothing Just :: Ix 1  -> Ix 1  -> Ix 1  -> Maybe (Ix 1 )
ltInc2  = genLtInc Nothing Just :: Ix 2  -> Ix 2  -> Ix 2  -> Maybe (Ix 2 )
ltInc3  = genLtInc Nothing Just :: Ix 3  -> Ix 3  -> Ix 3  -> Maybe (Ix 3 )
ltInc80 = genLtInc Nothing Just :: Ix 80 -> Ix 80 -> Ix 80 -> Maybe (Ix 80)
ltInc1K = genLtInc Nothing Just :: Ix 1K -> Ix 1K -> Ix 1K -> Maybe (Ix 1K)
ltInc1G = genLtInc Nothing Just :: Ix 1G -> Ix 1G -> Ix 1G -> Maybe (Ix 1G)

entrypoint ltDec1, ltDec2, ltDec3, ltDec80, ltDec1K, ltDec1G
ltDec1  = genLtDec Nothing Just :: Ix 1  -> Ix 1  -> Ix 1  -> Maybe (Ix 1 )
ltDec2  = genLtDec Nothing Just :: Ix 2  -> Ix 2  -> Ix 2  -> Maybe (Ix 2 )
ltDec3  = genLtDec Nothing Just :: Ix 3  -> Ix 3  -> Ix 3  -> Maybe (Ix 3 )
ltDec80 = genLtDec Nothing Just :: Ix 80 -> Ix 80 -> Ix 80 -> Maybe (Ix 80)
ltDec1K = genLtDec Nothing Just :: Ix 1K -> Ix 1K -> Ix 1K -> Maybe (Ix 1K)
ltDec1G = genLtDec Nothing Just :: Ix 1G -> Ix 1G -> Ix 1G -> Maybe (Ix 1G)

-----------------------
.lc: primGenLtInc-neg   ./milc -pcsoro -m --32
require "prelude.lc"
  
external genLtInc {primGenLtInc (Maybe (Ix m)) m},
         genLtDec {primGenLtDec (Maybe (Ix m)) m}
   :: Maybe (Ix m) -> (Ix m -> Maybe (Ix m)) -> Ix m -> Ix m -> Ix m -> Maybe (Ix m)

entrypoint ltInc0, ltInc3G, ltInc5G
ltInc0  = genLtInc Nothing Just :: Ix 0  -> Ix 0  -> Ix 0  -> Maybe (Ix 0)
ltInc3G = genLtInc Nothing Just :: Ix 3G -> Ix 3G -> Ix 3G -> Maybe (Ix 3G)
ltInc5G = genLtInc Nothing Just :: Ix 5G -> Ix 5G -> Ix 5G -> Maybe (Ix 5G)

entrypoint ltDec0, ltDec3G, ltDec5G
ltDec0  = genLtDec Nothing Just :: Ix 0  -> Ix 0  -> Ix 0  -> Maybe (Ix 0)
ltDec3G = genLtDec Nothing Just :: Ix 3G -> Ix 3G -> Ix 3G -> Maybe (Ix 3G)
ltDec5G = genLtDec Nothing Just :: Ix 5G -> Ix 5G -> Ix 5G -> Maybe (Ix 5G)

-----------------------
.lc: primGenMaybeIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genMaybeIxF1, genMaybeIxW1, genMaybeIxI1, genMaybeIxB1, genMaybeIxM1
external genMaybeIxF1 {primGenMaybeIx Flag     1} :: Flag   -> (Ix 1 -> Flag)   -> Word -> Flag
external genMaybeIxW1 {primGenMaybeIx Word     1} :: Word   -> (Ix 1 -> Word)   -> Word -> Word
external genMaybeIxI1 {primGenMaybeIx (Ix 1)   1} :: Ix 1   -> (Ix 1 -> Ix 1)   -> Word -> Ix 1
external genMaybeIxB1 {primGenMaybeIx (Bit 64) 1} :: Bit 64 -> (Ix 1 -> Bit 64) -> Word -> Bit 64
external genMaybeIxM1 {primGenMaybeIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Word -> M1
type M1 = Maybe (Ix 1)

entrypoint genMaybeIxF2, genMaybeIxW2, genMaybeIxI2, genMaybeIxB2, genMaybeIxM2
external genMaybeIxF2 {primGenMaybeIx Flag     2} :: Flag   -> (Ix 2 -> Flag)   -> Word -> Flag
external genMaybeIxW2 {primGenMaybeIx Word     2} :: Word   -> (Ix 2 -> Word)   -> Word -> Word
external genMaybeIxI2 {primGenMaybeIx (Ix 1)   2} :: Ix 1   -> (Ix 2 -> Ix 1)   -> Word -> Ix 1
external genMaybeIxB2 {primGenMaybeIx (Bit 64) 2} :: Bit 64 -> (Ix 2 -> Bit 64) -> Word -> Bit 64
external genMaybeIxM2 {primGenMaybeIx M2       2} :: M2     -> (Ix 2 -> M2)     -> Word -> M2
type M2 = Maybe (Ix 2)

entrypoint genMaybeIxF7, genMaybeIxW7, genMaybeIxI7, genMaybeIxB7, genMaybeIxM7
external genMaybeIxF7 {primGenMaybeIx Flag     7} :: Flag   -> (Ix 7 -> Flag)   -> Word -> Flag
external genMaybeIxW7 {primGenMaybeIx Word     7} :: Word   -> (Ix 7 -> Word)   -> Word -> Word
external genMaybeIxI7 {primGenMaybeIx (Ix 7)   7} :: Ix 7   -> (Ix 7 -> Ix 7)   -> Word -> Ix 7
external genMaybeIxB7 {primGenMaybeIx (Bit 64) 7} :: Bit 64 -> (Ix 7 -> Bit 64) -> Word -> Bit 64
external genMaybeIxM7 {primGenMaybeIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Word -> M7
type M7 = Maybe (Ix 7)

entrypoint genMaybeIxF64, genMaybeIxW64, genMaybeIxI64, genMaybeIxB64, genMaybeIxM64
external genMaybeIxF64 {primGenMaybeIx Flag     64} :: Flag   -> (Ix 64 -> Flag)   -> Word -> Flag
external genMaybeIxW64 {primGenMaybeIx Word     64} :: Word   -> (Ix 64 -> Word)   -> Word -> Word
external genMaybeIxI64 {primGenMaybeIx (Ix 64)  64} :: Ix 64  -> (Ix 64 -> Ix 64)  -> Word -> Ix 64
external genMaybeIxB64 {primGenMaybeIx (Bit 64) 64} :: Bit 64 -> (Ix 64 -> Bit 64) -> Word -> Bit 64
external genMaybeIxM64 {primGenMaybeIx M64      64} :: M64    -> (Ix 64 -> M64)    -> Word -> M64
type M64 = Maybe (Ix 64)

entrypoint maybeIx1, maybeIx7, maybeIx64
maybeIx1  = genMaybeIxM1  Nothing Just
maybeIx7  = genMaybeIxM7  Nothing Just
maybeIx64 = genMaybeIxM64 Nothing Just

-----------------------
.lc: primGenMaybeIx-pos-b-32   ./milc -pcosoro -m --32
-- A subset of the previous test; the key difference here is that we've removed the "b" pass.

data Maybe a = Nothing | Just a
type M1  = Maybe (Ix 1)
type M7  = Maybe (Ix 7)
type M64 = Maybe (Ix 64)

entrypoint genMaybeIxM1, genMaybeIxM7, genMaybeIxM64
external genMaybeIxM1  {primGenMaybeIx  M1  1} :: M1  -> (Ix 1  -> M1)  -> Word -> M1
external genMaybeIxM7  {primGenMaybeIx  M7  7} :: M7  -> (Ix 7  -> M7)  -> Word -> M7
external genMaybeIxM64 {primGenMaybeIx M64 64} :: M64 -> (Ix 64 -> M64) -> Word -> M64

entrypoint maybeIx1, maybeIx7, maybeIx64
maybeIx1  = genMaybeIxM1  Nothing Just
maybeIx7  = genMaybeIxM7  Nothing Just
maybeIx64 = genMaybeIxM64 Nothing Just

-----------------------
.lc: primGenMaybeIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genMaybeIxF2G, genMaybeIxW2G, genMaybeIxI2G, genMaybeIxB2G, genMaybeIxM2G
external genMaybeIxF2G {primGenMaybeIx Flag     2G} :: Flag   -> (Ix 2G -> Flag)   -> Word -> Flag
external genMaybeIxW2G {primGenMaybeIx Word     2G} :: Word   -> (Ix 2G -> Word)   -> Word -> Word
external genMaybeIxI2G {primGenMaybeIx (Ix 2G)  2G} :: Ix 2G  -> (Ix 2G -> Ix 2G)  -> Word -> Ix 2G
external genMaybeIxB2G {primGenMaybeIx (Bit 64) 2G} :: Bit 64 -> (Ix 2G -> Bit 64) -> Word -> Bit 64
external genMaybeIxM2G {primGenMaybeIx M2G      2G} :: M2G    -> (Ix 2G -> M2G)    -> Word -> M2G
type M2G = Maybe (Ix 2G)

-----------------------
.lc: primGenLeqIx-pos-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genLeqIxF1, genLeqIxW1, genLeqIxI1, genLeqIxB1, genLeqIxM1
external genLeqIxF1 {primGenLeqIx Flag     1} :: Flag   -> (Ix 1 -> Flag)   -> Word -> Ix 1 -> Flag
external genLeqIxW1 {primGenLeqIx Word     1} :: Word   -> (Ix 1 -> Word)   -> Word -> Ix 1 -> Word
external genLeqIxI1 {primGenLeqIx (Ix 1)   1} :: Ix 1   -> (Ix 1 -> Ix 1)   -> Word -> Ix 1 -> Ix 1
external genLeqIxB1 {primGenLeqIx (Bit 64) 1} :: Bit 64 -> (Ix 1 -> Bit 64) -> Word -> Ix 1 -> Bit 64
external genLeqIxM1 {primGenLeqIx M1       1} :: M1     -> (Ix 1 -> M1)     -> Word -> Ix 1 -> M1
type M1 = Maybe (Ix 1)

entrypoint genLeqIxF2, genLeqIxW2, genLeqIxI2, genLeqIxB2, genLeqIxM2
external genLeqIxF2 {primGenLeqIx Flag     2} :: Flag   -> (Ix 2 -> Flag)   -> Word -> Ix 2 -> Flag
external genLeqIxW2 {primGenLeqIx Word     2} :: Word   -> (Ix 2 -> Word)   -> Word -> Ix 2 -> Word
external genLeqIxI2 {primGenLeqIx (Ix 1)   2} :: Ix 1   -> (Ix 2 -> Ix 1)   -> Word -> Ix 2 -> Ix 1
external genLeqIxB2 {primGenLeqIx (Bit 64) 2} :: Bit 64 -> (Ix 2 -> Bit 64) -> Word -> Ix 2 -> Bit 64
external genLeqIxM2 {primGenLeqIx M2       2} :: M2     -> (Ix 2 -> M2)     -> Word -> Ix 2 -> M2
type M2 = Maybe (Ix 2)

entrypoint genLeqIxF7, genLeqIxW7, genLeqIxI7, genLeqIxB7, genLeqIxM7
external genLeqIxF7 {primGenLeqIx Flag     7} :: Flag   -> (Ix 7 -> Flag)   -> Word -> Ix 7 -> Flag
external genLeqIxW7 {primGenLeqIx Word     7} :: Word   -> (Ix 7 -> Word)   -> Word -> Ix 7 -> Word
external genLeqIxI7 {primGenLeqIx (Ix 7)   7} :: Ix 7   -> (Ix 7 -> Ix 7)   -> Word -> Ix 7 -> Ix 7
external genLeqIxB7 {primGenLeqIx (Bit 64) 7} :: Bit 64 -> (Ix 7 -> Bit 64) -> Word -> Ix 7 -> Bit 64
external genLeqIxM7 {primGenLeqIx M7       7} :: M7     -> (Ix 7 -> M7)     -> Word -> Ix 7 -> M7
type M7 = Maybe (Ix 7)

entrypoint genLeqIxF64, genLeqIxW64, genLeqIxI64, genLeqIxB64, genLeqIxM64
external genLeqIxF64 {primGenLeqIx Flag     64} :: Flag   -> (Ix 64 -> Flag)   -> Word -> Ix 64 -> Flag
external genLeqIxW64 {primGenLeqIx Word     64} :: Word   -> (Ix 64 -> Word)   -> Word -> Ix 64 -> Word
external genLeqIxI64 {primGenLeqIx (Ix 64)  64} :: Ix 64  -> (Ix 64 -> Ix 64)  -> Word -> Ix 64 -> Ix 64
external genLeqIxB64 {primGenLeqIx (Bit 64) 64} :: Bit 64 -> (Ix 64 -> Bit 64) -> Word -> Ix 64 -> Bit 64
external genLeqIxM64 {primGenLeqIx M64      64} :: M64    -> (Ix 64 -> M64)    -> Word -> Ix 64 -> M64
type M64 = Maybe (Ix 64)

entrypoint leqIx1, leqIx7, leqIx64
leqIx1  = genLeqIxM1  Nothing Just
leqIx7  = genLeqIxM7  Nothing Just
leqIx64 = genLeqIxM64 Nothing Just

-----------------------
.lc: primGenLeqIx-pos-b-32   ./milc -pcosoro -m --32
-- A subset of the previous test; the key difference here is that we've removed the "b" pass.

data Maybe a = Nothing | Just a
type M1  = Maybe (Ix 1)
type M7  = Maybe (Ix 7)
type M64 = Maybe (Ix 64)

entrypoint genLeqIxM1, genLeqIxM7, genLeqIxM64
external genLeqIxM1  {primGenLeqIx  M1  1} :: M1  -> (Ix 1  -> M1)  -> Word -> Ix 1  -> M1
external genLeqIxM7  {primGenLeqIx  M7  7} :: M7  -> (Ix 7  -> M7)  -> Word -> Ix 7  -> M7
external genLeqIxM64 {primGenLeqIx M64 64} :: M64 -> (Ix 64 -> M64) -> Word -> Ix 64 -> M64

entrypoint leqIx1, leqIx7, leqIx64
leqIx1  = genLeqIxM1  Nothing Just
leqIx7  = genLeqIxM7  Nothing Just
leqIx64 = genLeqIxM64 Nothing Just

-----------------------
.lc: primGenLeqIx-neg-32   ./milc -pcosoboro -m --32

data Maybe a = Nothing | Just a

entrypoint genLeqIxF2G, genLeqIxW2G, genLeqIxI2G, genLeqIxB2G, genLeqIxM2G
external genLeqIxF2G {primGenLeqIx Flag     2G} :: Flag   -> (Ix 2G -> Flag)   -> Word -> Ix 2G -> Flag
external genLeqIxW2G {primGenLeqIx Word     2G} :: Word   -> (Ix 2G -> Word)   -> Word -> Ix 2G -> Word
external genLeqIxI2G {primGenLeqIx (Ix 2G)  2G} :: Ix 2G  -> (Ix 2G -> Ix 2G)  -> Word -> Ix 2G -> Ix 2G
external genLeqIxB2G {primGenLeqIx (Bit 64) 2G} :: Bit 64 -> (Ix 2G -> Bit 64) -> Word -> Ix 2G -> Bit 64
external genLeqIxM2G {primGenLeqIx M2G      2G} :: M2G    -> (Ix 2G -> M2G)    -> Word -> Ix 2G -> M2G
type M2G = Maybe (Ix 2G)

-----------------------
.lc: primIxCompare-pos-32   ./milc -pcosoboro -m --32
require "prelude.lc"  -- for "Bool"

entrypoint ixEq1, ixEq2, ixEq3, ixEq7, ixEq65, ixEq1K
entrypoint ixEq123, ixEq2047M, ixEq1G
external ixEq1     {primIxEq   1}    :: Ix 1     -> Ix 1     -> Bool
external ixEq2     {primIxEq   2}    :: Ix 2     -> Ix 2     -> Bool
external ixEq3     {primIxEq   3}    :: Ix 3     -> Ix 3     -> Bool
external ixEq7     {primIxEq   7}    :: Ix 7     -> Ix 7     -> Bool
external ixEq65    {primIxEq  65}    :: Ix 65    -> Ix 65    -> Bool
external ixEq1K    {primIxEq  1K}    :: Ix 1K    -> Ix 1K    -> Bool
external ixEq123   {primIxEq 123}    :: Ix 123   -> Ix 123   -> Bool
external ixEq2047M {primIxEq  2047M} :: Ix 2047M -> Ix 2047M -> Bool
external ixEq1G    {primIxEq  1G}    :: Ix 1G    -> Ix 1G    -> Bool

entrypoint ixNe15, ixLt15, ixLe15, ixGt15, ixGe15 
external ixNe15    {primIxNe  15}    :: Ix 15    -> Ix 15    -> Bool
external ixLt15    {primIxLt  15}    :: Ix 15    -> Ix 15    -> Bool
external ixLe15    {primIxLe  15}    :: Ix 15    -> Ix 15    -> Bool
external ixGt15    {primIxGt  15}    :: Ix 15    -> Ix 15    -> Bool
external ixGe15    {primIxGe  15}    :: Ix 15    -> Ix 15    -> Bool

entrypoint ixNe1, ixLt1, ixLe1, ixGt1, ixGe1 
external ixNe1     {primIxNe   1}    :: Ix 1     -> Ix 1     -> Bool
external ixLt1     {primIxLt   1}    :: Ix 1     -> Ix 1     -> Bool
external ixLe1     {primIxLe   1}    :: Ix 1     -> Ix 1     -> Bool
external ixGt1     {primIxGt   1}    :: Ix 1     -> Ix 1     -> Bool
external ixGe1     {primIxGe   1}    :: Ix 1     -> Ix 1     -> Bool

entrypoint ixNe2, ixLt2, ixLe2, ixGt2, ixGe2 
external ixNe2     {primIxNe   2}    :: Ix 2     -> Ix 2     -> Bool
external ixLt2     {primIxLt   2}    :: Ix 2     -> Ix 2     -> Bool
external ixLe2     {primIxLe   2}    :: Ix 2     -> Ix 2     -> Bool
external ixGt2     {primIxGt   2}    :: Ix 2     -> Ix 2     -> Bool
external ixGe2     {primIxGe   2}    :: Ix 2     -> Ix 2     -> Bool

entrypoint ixNe3, ixLt3, ixLe3, ixGt3, ixGe3 
external ixNe3     {primIxNe   3}    :: Ix 3     -> Ix 3     -> Bool
external ixLt3     {primIxLt   3}    :: Ix 3     -> Ix 3     -> Bool
external ixLe3     {primIxLe   3}    :: Ix 3     -> Ix 3     -> Bool
external ixGt3     {primIxGt   3}    :: Ix 3     -> Ix 3     -> Bool
external ixGe3     {primIxGe   3}    :: Ix 3     -> Ix 3     -> Bool

-----------------------
.lc: primIxCompare-neg-32   ./milc -pcosoboro -m --32
require "prelude.lc"  -- for "Bool"

entrypoint ixEq0, ixEq2049M, ixEq2G
external ixEq0     {primIxEq      0} :: Ix 0     -> Ix 0     -> Bool
external ixEq2049M {primIxEq  2049M} :: Ix 2049M -> Ix 2049M -> Bool
external ixEq2G    {primIxEq     2G} :: Ix 2G    -> Ix 2G    -> Bool

-----------------------
.lc: primBitNot-pos-32   ./milc -pcosoboro -m --32

entrypoint not0, not1, not2, not7, not64, not497
external not0   {primBitNot   0} :: Bit 0   -> Bit 0
external not1   {primBitNot   1} :: Bit 1   -> Bit 1
external not2   {primBitNot   2} :: Bit 2   -> Bit 2
external not7   {primBitNot   7} :: Bit 7   -> Bit 7
external not64  {primBitNot  64} :: Bit 64  -> Bit 64
external not497 {primBitNot 497} :: Bit 497 -> Bit 497

-----------------------
.lc: primBitNot-pos-64   ./milc -pcosoboro -m --64

entrypoint not0, not1, not2, not7, not64, not497
external not0   {primBitNot   0} :: Bit 0   -> Bit 0
external not1   {primBitNot   1} :: Bit 1   -> Bit 1
external not2   {primBitNot   2} :: Bit 2   -> Bit 2
external not7   {primBitNot   7} :: Bit 7   -> Bit 7
external not64  {primBitNot  64} :: Bit 64  -> Bit 64
external not497 {primBitNot 497} :: Bit 497 -> Bit 497

-----------------------
.lc: primBitNot-neg-32   ./milc -pcosoboro -m --32

entrypoint not1K, not1G
external not1K  {primBitNot  1K} :: Bit 1K  -> Bit 1K
external not1G  {primBitNot  1G} :: Bit 1G  -> Bit 1G

-----------------------
.lc: primBitwise-pos-32   ./milc -pcosoboro -m --32

entrypoint and0, and1, and2, and7, and48, and64, and72, and497, and999
external and0   {primBitAnd   0} :: Bit 0   -> Bit 0   -> Bit 0
external and1   {primBitAnd   1} :: Bit 1   -> Bit 1   -> Bit 1
external and2   {primBitAnd   2} :: Bit 2   -> Bit 2   -> Bit 2
external and7   {primBitAnd   7} :: Bit 7   -> Bit 7   -> Bit 7
external and48  {primBitAnd  48} :: Bit 48  -> Bit 48  -> Bit 48
external and64  {primBitAnd  64} :: Bit 64  -> Bit 64  -> Bit 64
external and72  {primBitAnd  72} :: Bit 72  -> Bit 72  -> Bit 72
external and497 {primBitAnd 497} :: Bit 497 -> Bit 497 -> Bit 497
external and999 {primBitAnd 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint or0, or1, or2, or7, or48, or64, or72, or497, or999
external or0   {primBitOr   0} :: Bit 0   -> Bit 0   -> Bit 0
external or1   {primBitOr   1} :: Bit 1   -> Bit 1   -> Bit 1
external or2   {primBitOr   2} :: Bit 2   -> Bit 2   -> Bit 2
external or7   {primBitOr   7} :: Bit 7   -> Bit 7   -> Bit 7
external or48  {primBitOr  48} :: Bit 48  -> Bit 48  -> Bit 48
external or64  {primBitOr  64} :: Bit 64  -> Bit 64  -> Bit 64
external or72  {primBitOr  72} :: Bit 72  -> Bit 72  -> Bit 72
external or497 {primBitOr 497} :: Bit 497 -> Bit 497 -> Bit 497
external or999 {primBitOr 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint xor0, xor1, xor2, xor7, xor48, xor64, xor72, xor497, xor999
external xor0   {primBitXor   0} :: Bit 0   -> Bit 0   -> Bit 0
external xor1   {primBitXor   1} :: Bit 1   -> Bit 1   -> Bit 1
external xor2   {primBitXor   2} :: Bit 2   -> Bit 2   -> Bit 2
external xor7   {primBitXor   7} :: Bit 7   -> Bit 7   -> Bit 7
external xor48  {primBitXor  48} :: Bit 48  -> Bit 48  -> Bit 48
external xor64  {primBitXor  64} :: Bit 64  -> Bit 64  -> Bit 64
external xor72  {primBitXor  72} :: Bit 72  -> Bit 72  -> Bit 72
external xor497 {primBitXor 497} :: Bit 497 -> Bit 497 -> Bit 497
external xor999 {primBitXor 999} :: Bit 999 -> Bit 999 -> Bit 999

-----------------------
.lc: primBitwise-pos-64   ./milc -pcosoboro -m --64

entrypoint and0, and1, and2, and7, and48, and64, and72, and497, and999
external and0   {primBitAnd   0} :: Bit 0   -> Bit 0   -> Bit 0
external and1   {primBitAnd   1} :: Bit 1   -> Bit 1   -> Bit 1
external and2   {primBitAnd   2} :: Bit 2   -> Bit 2   -> Bit 2
external and7   {primBitAnd   7} :: Bit 7   -> Bit 7   -> Bit 7
external and48  {primBitAnd  48} :: Bit 48  -> Bit 48  -> Bit 48
external and64  {primBitAnd  64} :: Bit 64  -> Bit 64  -> Bit 64
external and72  {primBitAnd  72} :: Bit 72  -> Bit 72  -> Bit 72
external and497 {primBitAnd 497} :: Bit 497 -> Bit 497 -> Bit 497
external and999 {primBitAnd 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint or0, or1, or2, or7, or48, or64, or72, or497, or999
external or0   {primBitOr   0} :: Bit 0   -> Bit 0   -> Bit 0
external or1   {primBitOr   1} :: Bit 1   -> Bit 1   -> Bit 1
external or2   {primBitOr   2} :: Bit 2   -> Bit 2   -> Bit 2
external or7   {primBitOr   7} :: Bit 7   -> Bit 7   -> Bit 7
external or48  {primBitOr  48} :: Bit 48  -> Bit 48  -> Bit 48
external or64  {primBitOr  64} :: Bit 64  -> Bit 64  -> Bit 64
external or72  {primBitOr  72} :: Bit 72  -> Bit 72  -> Bit 72
external or497 {primBitOr 497} :: Bit 497 -> Bit 497 -> Bit 497
external or999 {primBitOr 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint xor0, xor1, xor2, xor7, xor48, xor64, xor72, xor497, xor999
external xor0   {primBitXor   0} :: Bit 0   -> Bit 0   -> Bit 0
external xor1   {primBitXor   1} :: Bit 1   -> Bit 1   -> Bit 1
external xor2   {primBitXor   2} :: Bit 2   -> Bit 2   -> Bit 2
external xor7   {primBitXor   7} :: Bit 7   -> Bit 7   -> Bit 7
external xor48  {primBitXor  48} :: Bit 48  -> Bit 48  -> Bit 48
external xor64  {primBitXor  64} :: Bit 64  -> Bit 64  -> Bit 64
external xor72  {primBitXor  72} :: Bit 72  -> Bit 72  -> Bit 72
external xor497 {primBitXor 497} :: Bit 497 -> Bit 497 -> Bit 497
external xor999 {primBitXor 999} :: Bit 999 -> Bit 999 -> Bit 999

-----------------------
.lc: primBitwise-neg-32   ./milc -pcosoboro -m --32

entrypoint and1K, and1G, or2K, xor1000
external and1K   {primBitAnd   1K} :: Bit 1K   -> Bit 1K
external and1G   {primBitAnd   1G} :: Bit 1G   -> Bit 1G
external or2K    {primBitOr    2K} :: Bit 2K   -> Bit 2K
external xor1000 {primBitXor 1000} :: Bit 1000 -> Bit 1000

-----------------------
.lc: primBitArith-pos-32   ./milc -pcosoboro -m --32

entrypoint neg0, neg1, neg2, neg7, neg32
external neg0   {primBitNegate   0} :: Bit 0   -> Bit 0
external neg1   {primBitNegate   1} :: Bit 1   -> Bit 1
external neg2   {primBitNegate   2} :: Bit 2   -> Bit 2
external neg7   {primBitNegate   7} :: Bit 7   -> Bit 7
external neg32  {primBitNegate  32} :: Bit 32  -> Bit 32

entrypoint plus0, plus1, plus2, plus7, plus32
external plus0   {primBitPlus   0} :: Bit 0   -> Bit 0   -> Bit 0
external plus1   {primBitPlus   1} :: Bit 1   -> Bit 1   -> Bit 1
external plus2   {primBitPlus   2} :: Bit 2   -> Bit 2   -> Bit 2
external plus7   {primBitPlus   7} :: Bit 7   -> Bit 7   -> Bit 7
external plus32  {primBitPlus  32} :: Bit 32  -> Bit 32  -> Bit 32

entrypoint minus0, minus1, minus2, minus7, minus32
external minus0   {primBitMinus   0} :: Bit 0   -> Bit 0   -> Bit 0
external minus1   {primBitMinus   1} :: Bit 1   -> Bit 1   -> Bit 1
external minus2   {primBitMinus   2} :: Bit 2   -> Bit 2   -> Bit 2
external minus7   {primBitMinus   7} :: Bit 7   -> Bit 7   -> Bit 7
external minus32  {primBitMinus  32} :: Bit 32  -> Bit 32  -> Bit 32

entrypoint times0, times1, times2, times7, times32
external times0   {primBitTimes   0} :: Bit 0   -> Bit 0   -> Bit 0
external times1   {primBitTimes   1} :: Bit 1   -> Bit 1   -> Bit 1
external times2   {primBitTimes   2} :: Bit 2   -> Bit 2   -> Bit 2
external times7   {primBitTimes   7} :: Bit 7   -> Bit 7   -> Bit 7
external times32  {primBitTimes  32} :: Bit 32  -> Bit 32  -> Bit 32

-----------------------
.lc: primBitArith-neg-32   ./milc -pcosoboro -m --32

entrypoint neg48, neg64, neg72, neg497, neg999
external neg48  {primBitNegate  48} :: Bit 48  -> Bit 48
external neg64  {primBitNegate  64} :: Bit 64  -> Bit 64
external neg72  {primBitNegate  72} :: Bit 72  -> Bit 72
external neg497 {primBitNegate 497} :: Bit 497 -> Bit 497
external neg999 {primBitNegate 999} :: Bit 999 -> Bit 999

entrypoint plus48, plus64, plus72, plus497, plus999
external plus48  {primBitPlus  48} :: Bit 48  -> Bit 48  -> Bit 48
external plus64  {primBitPlus  64} :: Bit 64  -> Bit 64  -> Bit 64
external plus72  {primBitPlus  72} :: Bit 72  -> Bit 72  -> Bit 72
external plus497 {primBitPlus 497} :: Bit 497 -> Bit 497 -> Bit 497
external plus999 {primBitPlus 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint minus48, minus64, minus72, minus497, minus999
external minus48  {primBitMinus  48} :: Bit 48  -> Bit 48  -> Bit 48
external minus64  {primBitMinus  64} :: Bit 64  -> Bit 64  -> Bit 64
external minus72  {primBitMinus  72} :: Bit 72  -> Bit 72  -> Bit 72
external minus497 {primBitMinus 497} :: Bit 497 -> Bit 497 -> Bit 497
external minus999 {primBitMinus 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint times48, times64, times72, times497, times999
external times48  {primBitTimes  48} :: Bit 48  -> Bit 48  -> Bit 48
external times64  {primBitTimes  64} :: Bit 64  -> Bit 64  -> Bit 64
external times72  {primBitTimes  72} :: Bit 72  -> Bit 72  -> Bit 72
external times497 {primBitTimes 497} :: Bit 497 -> Bit 497 -> Bit 497
external times999 {primBitTimes 999} :: Bit 999 -> Bit 999 -> Bit 999

-----------------------
.lc: primBitArith-pos-64   ./milc -pcosoboro -m --64

entrypoint neg0, neg1, neg2, neg7, neg32, neg48, neg64
external neg0   {primBitNegate   0} :: Bit 0   -> Bit 0
external neg1   {primBitNegate   1} :: Bit 1   -> Bit 1
external neg2   {primBitNegate   2} :: Bit 2   -> Bit 2
external neg7   {primBitNegate   7} :: Bit 7   -> Bit 7
external neg32  {primBitNegate  32} :: Bit 32  -> Bit 32
external neg48  {primBitNegate  48} :: Bit 48  -> Bit 48
external neg64  {primBitNegate  64} :: Bit 64  -> Bit 64

entrypoint plus0, plus1, plus2, plus7, plus32, plus48, plus64
external plus0   {primBitPlus   0} :: Bit 0   -> Bit 0   -> Bit 0
external plus1   {primBitPlus   1} :: Bit 1   -> Bit 1   -> Bit 1
external plus2   {primBitPlus   2} :: Bit 2   -> Bit 2   -> Bit 2
external plus7   {primBitPlus   7} :: Bit 7   -> Bit 7   -> Bit 7
external plus32  {primBitPlus  32} :: Bit 32  -> Bit 32  -> Bit 32
external plus48  {primBitPlus  48} :: Bit 48  -> Bit 48  -> Bit 48
external plus64  {primBitPlus  64} :: Bit 64  -> Bit 64  -> Bit 64

entrypoint minus0, minus1, minus2, minus7, minus32, minus48, minus64
external minus0   {primBitMinus   0} :: Bit 0   -> Bit 0   -> Bit 0
external minus1   {primBitMinus   1} :: Bit 1   -> Bit 1   -> Bit 1
external minus2   {primBitMinus   2} :: Bit 2   -> Bit 2   -> Bit 2
external minus7   {primBitMinus   7} :: Bit 7   -> Bit 7   -> Bit 7
external minus32  {primBitMinus  32} :: Bit 32  -> Bit 32  -> Bit 32
external minus48  {primBitMinus  48} :: Bit 48  -> Bit 48  -> Bit 48
external minus64  {primBitMinus  64} :: Bit 64  -> Bit 64  -> Bit 64

entrypoint times0, times1, times2, times7, times32, times48, times64
external times0   {primBitTimes   0} :: Bit 0   -> Bit 0   -> Bit 0
external times1   {primBitTimes   1} :: Bit 1   -> Bit 1   -> Bit 1
external times2   {primBitTimes   2} :: Bit 2   -> Bit 2   -> Bit 2
external times7   {primBitTimes   7} :: Bit 7   -> Bit 7   -> Bit 7
external times32  {primBitTimes  32} :: Bit 32  -> Bit 32  -> Bit 32
external times48  {primBitTimes  48} :: Bit 48  -> Bit 48  -> Bit 48
external times64  {primBitTimes  64} :: Bit 64  -> Bit 64  -> Bit 64

-----------------------
.lc: primBitArith-neg-64   ./milc -pcosoboro -m --64

entrypoint neg72, neg497, neg999
external neg72  {primBitNegate  72} :: Bit 72  -> Bit 72
external neg497 {primBitNegate 497} :: Bit 497 -> Bit 497
external neg999 {primBitNegate 999} :: Bit 999 -> Bit 999

entrypoint plus72, plus497, plus999
external plus72  {primBitPlus  72} :: Bit 72  -> Bit 72  -> Bit 72
external plus497 {primBitPlus 497} :: Bit 497 -> Bit 497 -> Bit 497
external plus999 {primBitPlus 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint minus72, minus497, minus999
external minus72  {primBitMinus  72} :: Bit 72  -> Bit 72  -> Bit 72
external minus497 {primBitMinus 497} :: Bit 497 -> Bit 497 -> Bit 497
external minus999 {primBitMinus 999} :: Bit 999 -> Bit 999 -> Bit 999

entrypoint times72, times497, times999
external times72  {primBitTimes  72} :: Bit 72  -> Bit 72  -> Bit 72
external times497 {primBitTimes 497} :: Bit 497 -> Bit 497 -> Bit 497
external times999 {primBitTimes 999} :: Bit 999 -> Bit 999 -> Bit 999

-----------------------
.lc: primBitCompare-pos-32    ./milc -pcosoboro -m --32

entrypoint eq0, eq1, eq2, eq15, eq31, eq32, eq33, eq48, eq64, eq72, eq98 
external eq0  {primBitEq 0}  :: Bit 0  -> Bit 0  -> Flag
external eq1  {primBitEq 1}  :: Bit 1  -> Bit 1  -> Flag
external eq2  {primBitEq 2}  :: Bit 2  -> Bit 2  -> Flag
external eq15 {primBitEq 15} :: Bit 15 -> Bit 15 -> Flag
external eq31 {primBitEq 31} :: Bit 31 -> Bit 31 -> Flag
external eq32 {primBitEq 32} :: Bit 32 -> Bit 32 -> Flag
external eq33 {primBitEq 33} :: Bit 33 -> Bit 33 -> Flag
external eq48 {primBitEq 48} :: Bit 48 -> Bit 48 -> Flag
external eq64 {primBitEq 64} :: Bit 64 -> Bit 64 -> Flag
external eq72 {primBitEq 72} :: Bit 72 -> Bit 72 -> Flag
external eq98 {primBitEq 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint ne0, ne1, ne2, ne15, ne31, ne32, ne33, ne48, ne64, ne72, ne98 
external ne0  {primBitNe 0}  :: Bit 0  -> Bit 0  -> Flag
external ne1  {primBitNe 1}  :: Bit 1  -> Bit 1  -> Flag
external ne2  {primBitNe 2}  :: Bit 2  -> Bit 2  -> Flag
external ne15 {primBitNe 15} :: Bit 15 -> Bit 15 -> Flag
external ne31 {primBitNe 31} :: Bit 31 -> Bit 31 -> Flag
external ne32 {primBitNe 32} :: Bit 32 -> Bit 32 -> Flag
external ne33 {primBitNe 33} :: Bit 33 -> Bit 33 -> Flag
external ne48 {primBitNe 48} :: Bit 48 -> Bit 48 -> Flag
external ne64 {primBitNe 64} :: Bit 64 -> Bit 64 -> Flag
external ne72 {primBitNe 72} :: Bit 72 -> Bit 72 -> Flag
external ne98 {primBitNe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint gt0, gt1, gt2, gt15, gt31, gt32, gt33, gt48, gt64, gt72, gt98 
external gt0  {primBitGt 0}  :: Bit 0  -> Bit 0  -> Flag
external gt1  {primBitGt 1}  :: Bit 1  -> Bit 1  -> Flag
external gt2  {primBitGt 2}  :: Bit 2  -> Bit 2  -> Flag
external gt15 {primBitGt 15} :: Bit 15 -> Bit 15 -> Flag
external gt31 {primBitGt 31} :: Bit 31 -> Bit 31 -> Flag
external gt32 {primBitGt 32} :: Bit 32 -> Bit 32 -> Flag
external gt33 {primBitGt 33} :: Bit 33 -> Bit 33 -> Flag
external gt48 {primBitGt 48} :: Bit 48 -> Bit 48 -> Flag
external gt64 {primBitGt 64} :: Bit 64 -> Bit 64 -> Flag
external gt72 {primBitGt 72} :: Bit 72 -> Bit 72 -> Flag
external gt98 {primBitGt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint ge0, ge1, ge2, ge15, ge31, ge32, ge33, ge48, ge64, ge72, ge98 
external ge0  {primBitGe 0}  :: Bit 0  -> Bit 0  -> Flag
external ge1  {primBitGe 1}  :: Bit 1  -> Bit 1  -> Flag
external ge2  {primBitGe 2}  :: Bit 2  -> Bit 2  -> Flag
external ge15 {primBitGe 15} :: Bit 15 -> Bit 15 -> Flag
external ge31 {primBitGe 31} :: Bit 31 -> Bit 31 -> Flag
external ge32 {primBitGe 32} :: Bit 32 -> Bit 32 -> Flag
external ge33 {primBitGe 33} :: Bit 33 -> Bit 33 -> Flag
external ge48 {primBitGe 48} :: Bit 48 -> Bit 48 -> Flag
external ge64 {primBitGe 64} :: Bit 64 -> Bit 64 -> Flag
external ge72 {primBitGe 72} :: Bit 72 -> Bit 72 -> Flag
external ge98 {primBitGe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint lt0, lt1, lt2, lt15, lt31, lt32, lt33, lt48, lt64, lt72, lt98 
external lt0  {primBitLt 0}  :: Bit 0  -> Bit 0  -> Flag
external lt1  {primBitLt 1}  :: Bit 1  -> Bit 1  -> Flag
external lt2  {primBitLt 2}  :: Bit 2  -> Bit 2  -> Flag
external lt15 {primBitLt 15} :: Bit 15 -> Bit 15 -> Flag
external lt31 {primBitLt 31} :: Bit 31 -> Bit 31 -> Flag
external lt32 {primBitLt 32} :: Bit 32 -> Bit 32 -> Flag
external lt33 {primBitLt 33} :: Bit 33 -> Bit 33 -> Flag
external lt48 {primBitLt 48} :: Bit 48 -> Bit 48 -> Flag
external lt64 {primBitLt 64} :: Bit 64 -> Bit 64 -> Flag
external lt72 {primBitLt 72} :: Bit 72 -> Bit 72 -> Flag
external lt98 {primBitLt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint le0, le1, le2, le15, le31, le32, le33, le48, le64, le72, le98 
external le0  {primBitLe 0}  :: Bit 0  -> Bit 0  -> Flag
external le1  {primBitLe 1}  :: Bit 1  -> Bit 1  -> Flag
external le2  {primBitLe 2}  :: Bit 2  -> Bit 2  -> Flag
external le15 {primBitLe 15} :: Bit 15 -> Bit 15 -> Flag
external le31 {primBitLe 31} :: Bit 31 -> Bit 31 -> Flag
external le32 {primBitLe 32} :: Bit 32 -> Bit 32 -> Flag
external le33 {primBitLe 33} :: Bit 33 -> Bit 33 -> Flag
external le48 {primBitLe 48} :: Bit 48 -> Bit 48 -> Flag
external le64 {primBitLe 64} :: Bit 64 -> Bit 64 -> Flag
external le72 {primBitLe 72} :: Bit 72 -> Bit 72 -> Flag
external le98 {primBitLe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint sgt0, sgt1, sgt2, sgt15, sgt31, sgt32
external sgt0  {primBitSGt 0}  :: Bit 0  -> Bit 0  -> Flag
external sgt1  {primBitSGt 1}  :: Bit 1  -> Bit 1  -> Flag
external sgt2  {primBitSGt 2}  :: Bit 2  -> Bit 2  -> Flag
external sgt15 {primBitSGt 15} :: Bit 15 -> Bit 15 -> Flag
external sgt31 {primBitSGt 31} :: Bit 31 -> Bit 31 -> Flag
external sgt32 {primBitSGt 32} :: Bit 32 -> Bit 32 -> Flag

entrypoint sge0, sge1, sge2, sge15, sge31, sge32
external sge0  {primBitSGe 0}  :: Bit 0  -> Bit 0  -> Flag
external sge1  {primBitSGe 1}  :: Bit 1  -> Bit 1  -> Flag
external sge2  {primBitSGe 2}  :: Bit 2  -> Bit 2  -> Flag
external sge15 {primBitSGe 15} :: Bit 15 -> Bit 15 -> Flag
external sge31 {primBitSGe 31} :: Bit 31 -> Bit 31 -> Flag
external sge32 {primBitSGe 32} :: Bit 32 -> Bit 32 -> Flag

entrypoint slt0, slt1, slt2, slt15, slt31, slt32
external slt0  {primBitSLt 0}  :: Bit 0  -> Bit 0  -> Flag
external slt1  {primBitSLt 1}  :: Bit 1  -> Bit 1  -> Flag
external slt2  {primBitSLt 2}  :: Bit 2  -> Bit 2  -> Flag
external slt15 {primBitSLt 15} :: Bit 15 -> Bit 15 -> Flag
external slt31 {primBitSLt 31} :: Bit 31 -> Bit 31 -> Flag
external slt32 {primBitSLt 32} :: Bit 32 -> Bit 32 -> Flag

entrypoint sle0, sle1, sle2, sle15, sle31, sle32
external sle0  {primBitSLe 0}  :: Bit 0  -> Bit 0  -> Flag
external sle1  {primBitSLe 1}  :: Bit 1  -> Bit 1  -> Flag
external sle2  {primBitSLe 2}  :: Bit 2  -> Bit 2  -> Flag
external sle15 {primBitSLe 15} :: Bit 15 -> Bit 15 -> Flag
external sle31 {primBitSLe 31} :: Bit 31 -> Bit 31 -> Flag
external sle32 {primBitSLe 32} :: Bit 32 -> Bit 32 -> Flag

-----------------------
.lc: primBitCompare-pos-64    ./milc -pcosoboro -m --64

entrypoint eq32, eq48, eq64, eq98 
external eq32 {primBitEq 32} :: Bit 32 -> Bit 32 -> Flag
external eq48 {primBitEq 48} :: Bit 48 -> Bit 48 -> Flag
external eq64 {primBitEq 64} :: Bit 64 -> Bit 64 -> Flag
external eq98 {primBitEq 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint ne32, ne48, ne64, ne98 
external ne32 {primBitNe 32} :: Bit 32 -> Bit 32 -> Flag
external ne48 {primBitNe 48} :: Bit 48 -> Bit 48 -> Flag
external ne64 {primBitNe 64} :: Bit 64 -> Bit 64 -> Flag
external ne98 {primBitNe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint gt32, gt48, gt64, gt98 
external gt32 {primBitGt 32} :: Bit 32 -> Bit 32 -> Flag
external gt48 {primBitGt 48} :: Bit 48 -> Bit 48 -> Flag
external gt64 {primBitGt 64} :: Bit 64 -> Bit 64 -> Flag
external gt98 {primBitGt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint ge32, ge48, ge64, ge98 
external ge32 {primBitGe 32} :: Bit 32 -> Bit 32 -> Flag
external ge48 {primBitGe 48} :: Bit 48 -> Bit 48 -> Flag
external ge64 {primBitGe 64} :: Bit 64 -> Bit 64 -> Flag
external ge98 {primBitGe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint lt32, lt48, lt64, lt98 
external lt32 {primBitLt 32} :: Bit 32 -> Bit 32 -> Flag
external lt48 {primBitLt 48} :: Bit 48 -> Bit 48 -> Flag
external lt64 {primBitLt 64} :: Bit 64 -> Bit 64 -> Flag
external lt98 {primBitLt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint le32, le48, le64, le98 
external le32 {primBitLe 32} :: Bit 32 -> Bit 32 -> Flag
external le48 {primBitLe 48} :: Bit 48 -> Bit 48 -> Flag
external le64 {primBitLe 64} :: Bit 64 -> Bit 64 -> Flag
external le98 {primBitLe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint sgt0, sgt1, sgt2, sgt15, sgt31, sgt32, sgt33, sgt48, sgt64
external sgt0  {primBitSGt 0}  :: Bit 0  -> Bit 0  -> Flag
external sgt1  {primBitSGt 1}  :: Bit 1  -> Bit 1  -> Flag
external sgt2  {primBitSGt 2}  :: Bit 2  -> Bit 2  -> Flag
external sgt15 {primBitSGt 15} :: Bit 15 -> Bit 15 -> Flag
external sgt31 {primBitSGt 31} :: Bit 31 -> Bit 31 -> Flag
external sgt32 {primBitSGt 32} :: Bit 32 -> Bit 32 -> Flag
external sgt33 {primBitSGt 33} :: Bit 33 -> Bit 33 -> Flag
external sgt48 {primBitSGt 48} :: Bit 48 -> Bit 48 -> Flag
external sgt64 {primBitSGt 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint sge0, sge1, sge2, sge15, sge31, sge32, sge33, sge48, sge64
external sge0  {primBitSGe 0}  :: Bit 0  -> Bit 0  -> Flag
external sge1  {primBitSGe 1}  :: Bit 1  -> Bit 1  -> Flag
external sge2  {primBitSGe 2}  :: Bit 2  -> Bit 2  -> Flag
external sge15 {primBitSGe 15} :: Bit 15 -> Bit 15 -> Flag
external sge31 {primBitSGe 31} :: Bit 31 -> Bit 31 -> Flag
external sge32 {primBitSGe 32} :: Bit 32 -> Bit 32 -> Flag
external sge33 {primBitSGe 33} :: Bit 33 -> Bit 33 -> Flag
external sge48 {primBitSGe 48} :: Bit 48 -> Bit 48 -> Flag
external sge64 {primBitSGe 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint slt0, slt1, slt2, slt15, slt31, slt32, slt33, slt48, slt64
external slt0  {primBitSLt 0}  :: Bit 0  -> Bit 0  -> Flag
external slt1  {primBitSLt 1}  :: Bit 1  -> Bit 1  -> Flag
external slt2  {primBitSLt 2}  :: Bit 2  -> Bit 2  -> Flag
external slt15 {primBitSLt 15} :: Bit 15 -> Bit 15 -> Flag
external slt31 {primBitSLt 31} :: Bit 31 -> Bit 31 -> Flag
external slt32 {primBitSLt 32} :: Bit 32 -> Bit 32 -> Flag
external slt33 {primBitSLt 33} :: Bit 33 -> Bit 33 -> Flag
external slt48 {primBitSLt 48} :: Bit 48 -> Bit 48 -> Flag
external slt64 {primBitSLt 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint sle0, sle1, sle2, sle15, sle31, sle32, sle33, sle48, sle64
external sle0  {primBitSLe 0}  :: Bit 0  -> Bit 0  -> Flag
external sle1  {primBitSLe 1}  :: Bit 1  -> Bit 1  -> Flag
external sle2  {primBitSLe 2}  :: Bit 2  -> Bit 2  -> Flag
external sle15 {primBitSLe 15} :: Bit 15 -> Bit 15 -> Flag
external sle31 {primBitSLe 31} :: Bit 31 -> Bit 31 -> Flag
external sle32 {primBitSLe 32} :: Bit 32 -> Bit 32 -> Flag
external sle33 {primBitSLe 33} :: Bit 33 -> Bit 33 -> Flag
external sle48 {primBitSLe 48} :: Bit 48 -> Bit 48 -> Flag
external sle64 {primBitSLe 64} :: Bit 64 -> Bit 64 -> Flag

-----------------------
.lc: primBitCompare-neg-32    ./milc -pcosoboro -m --32

entrypoint e, f
external e {primBitLt Word} :: Bit 31   -> Bit 31   -> Flag  -- not a number
external f {primBitLe}      :: Bit 32   -> Bit 32   -> Flag  -- missing param

-----------------------
.lc: primBitCompare-neg-32a    ./milc -pcosoboro -m --32

entrypoint a, b, c, d
external a {primBitEq 1000} :: Bit 1000 -> Bit 1000 -> Flag  -- large width values
external b {primBitNe 1G}   :: Bit 1G   -> Bit 1G   -> Flag
external c {primBitGt 2K}   :: Bit 2K   -> Bit 2K   -> Flag
external d {primBitGe 1001} :: Bit 1001 -> Bit 1001 -> Flag

entrypoint sgt33, sgt48, sgt64
external sgt33 {primBitSGt 33} :: Bit 33 -> Bit 33 -> Flag
external sgt48 {primBitSGt 48} :: Bit 48 -> Bit 48 -> Flag
external sgt64 {primBitSGt 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint sge33, sge48, sge64
external sge33 {primBitSGe 33} :: Bit 33 -> Bit 33 -> Flag
external sge48 {primBitSGe 48} :: Bit 48 -> Bit 48 -> Flag
external sge64 {primBitSGe 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint slt33, slt48, slt64
external slt33 {primBitSLt 33} :: Bit 33 -> Bit 33 -> Flag
external slt48 {primBitSLt 48} :: Bit 48 -> Bit 48 -> Flag
external slt64 {primBitSLt 64} :: Bit 64 -> Bit 64 -> Flag

entrypoint sle33, sle48, sle64
external sle33 {primBitSLe 33} :: Bit 33 -> Bit 33 -> Flag
external sle48 {primBitSLe 48} :: Bit 48 -> Bit 48 -> Flag
external sle64 {primBitSLe 64} :: Bit 64 -> Bit 64 -> Flag

-----------------------
.lc: primBitCompare-neg-64    ./milc -pcosoboro -m --64

entrypoint sgt72, sgt98
external sgt72 {primBitSGt 72} :: Bit 72 -> Bit 72 -> Flag
external sgt98 {primBitSGt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint sge72, sge98
external sge72 {primBitSGe 72} :: Bit 72 -> Bit 72 -> Flag
external sge98 {primBitSGe 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint slt72, slt98
external slt72 {primBitSLt 72} :: Bit 72 -> Bit 72 -> Flag
external slt98 {primBitSLt 98} :: Bit 98 -> Bit 98 -> Flag

entrypoint sle72, sle98
external sle72 {primBitSLe 72} :: Bit 72 -> Bit 72 -> Flag
external sle98 {primBitSLe 98} :: Bit 98 -> Bit 98 -> Flag

-----------------------
.lc: primBitManip-pos-32    ./milc -pcosoboro -m --32

entrypoint bitBit1,  bitBit2,  bitBit12
entrypoint bitBit48, bitBit64, bitBit128
external bitBit1      {primBitBit 1}       :: Ix 1  -> Bit 1
external bitBit2      {primBitBit 2}       :: Ix 2  -> Bit 2
external bitBit12     {primBitBit 12}      :: Ix 12 -> Bit 12
external bitBit48     {primBitBit 48}      :: Ix 48 -> Bit 48
external bitBit64     {primBitBit 64}      :: Ix 64 -> Bit 64
external bitBit128    {primBitBit 128 }    :: Ix 128 -> Bit 128

entrypoint bitSetBit1,  bitSetBit2, bitSetBit12
entrypoint bitSetBit48, bitSetBit64, bitSetBit128
external bitSetBit1   {primBitSetBit 1}    :: Bit 1   -> Ix 1   -> Bit 1
external bitSetBit2   {primBitSetBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitSetBit12  {primBitSetBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitSetBit48  {primBitSetBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitSetBit64  {primBitSetBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitSetBit128 {primBitSetBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitClearBit1,  bitClearBit2, bitClearBit12
entrypoint bitClearBit48, bitClearBit64, bitClearBit128
external bitClearBit1   {primBitClearBit 1}    :: Bit 1   -> Ix 1   -> Bit 1
external bitClearBit2   {primBitClearBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitClearBit12  {primBitClearBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitClearBit48  {primBitClearBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitClearBit64  {primBitClearBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitClearBit128 {primBitClearBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitFlipBit1,  bitFlipBit2, bitFlipBit12
entrypoint bitFlipBit48, bitFlipBit64, bitFlipBit128
external bitFlipBit1   {primBitFlipBit 1}    :: Bit 1   -> Ix 1   -> Bit 1
external bitFlipBit2   {primBitFlipBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitFlipBit12  {primBitFlipBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitFlipBit48  {primBitFlipBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitFlipBit64  {primBitFlipBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitFlipBit128 {primBitFlipBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitTestBit1,  bitTestBit2, bitTestBit12
entrypoint bitTestBit48, bitTestBit64, bitTestBit128
external bitTestBit1   {primBitTestBit 1}    :: Bit 1   -> Ix 1   -> Flag
external bitTestBit2   {primBitTestBit 2}    :: Bit 2   -> Ix 2   -> Flag
external bitTestBit12  {primBitTestBit 12}   :: Bit 12  -> Ix 12  -> Flag
external bitTestBit48  {primBitTestBit 48}   :: Bit 48  -> Ix 48  -> Flag
external bitTestBit64  {primBitTestBit 64}   :: Bit 64  -> Ix 64  -> Flag
external bitTestBit128 {primBitTestBit 128}  :: Bit 128 -> Ix 128 -> Flag

entrypoint bitBitSize1, bitBitSize2, bitBitSize12
entrypoint bitBitSize48, bitBitSize64, bitBitSize128
external bitBitSize1   {primBitBitSize 1}    :: Bit 1   -> Ix 1
external bitBitSize2   {primBitBitSize 2}    :: Bit 2   -> Ix 2
external bitBitSize12  {primBitBitSize 12}   :: Bit 12  -> Ix 12
external bitBitSize48  {primBitBitSize 48}   :: Bit 48  -> Ix 48
external bitBitSize64  {primBitBitSize 64}   :: Bit 64  -> Ix 64
external bitBitSize128 {primBitBitSize 128}  :: Bit 128 -> Ix 128

-----------------------
.lc: primBitManip-pos-64    ./milc -pcosoboro -m --64

entrypoint bitBit1, bitBit2, bitBit12
entrypoint bitBit48, bitBit64, bitBit128
external bitBit1      {primBitBit 1}       :: Ix 1  -> Bit 1
external bitBit2      {primBitBit 2}       :: Ix 2  -> Bit 2
external bitBit12     {primBitBit 12}      :: Ix 12 -> Bit 12
external bitBit48     {primBitBit 48}      :: Ix 48 -> Bit 48
external bitBit64     {primBitBit 64}      :: Ix 64 -> Bit 64
external bitBit128    {primBitBit 128 }    :: Ix 128 -> Bit 128

entrypoint bitSetBit1, bitSetBit2, bitSetBit12
entrypoint bitSetBit48, bitSetBit64, bitSetBit128
external bitSetBit1   {primBitSetBit 1}    :: Bit 1 -> Ix 1  -> Bit 1
external bitSetBit2   {primBitSetBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitSetBit12  {primBitSetBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitSetBit48  {primBitSetBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitSetBit64  {primBitSetBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitSetBit128 {primBitSetBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitClearBit1, bitClearBit2, bitClearBit12
entrypoint bitClearBit48, bitClearBit64, bitClearBit128
external bitClearBit1   {primBitClearBit 1}  :: Bit 1 -> Ix 1  -> Bit 1
external bitClearBit2   {primBitClearBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitClearBit12  {primBitClearBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitClearBit48  {primBitClearBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitClearBit64  {primBitClearBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitClearBit128 {primBitClearBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitFlipBit1, bitFlipBit2, bitFlipBit12
entrypoint bitFlipBit48, bitFlipBit64, bitFlipBit128
external bitFlipBit1   {primBitFlipBit 1}   :: Bit 1 -> Ix 1  -> Bit 1
external bitFlipBit2   {primBitFlipBit 2}    :: Bit 2   -> Ix 2   -> Bit 2
external bitFlipBit12  {primBitFlipBit 12}   :: Bit 12  -> Ix 12  -> Bit 12
external bitFlipBit48  {primBitFlipBit 48}   :: Bit 48  -> Ix 48  -> Bit 48
external bitFlipBit64  {primBitFlipBit 64}   :: Bit 64  -> Ix 64  -> Bit 64 
external bitFlipBit128 {primBitFlipBit 128}  :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitTestBit1, bitTestBit2, bitTestBit12
entrypoint bitTestBit48, bitTestBit64, bitTestBit128
external bitTestBit1   {primBitTestBit 1}   :: Bit 1 -> Ix 1  -> Flag
external bitTestBit2   {primBitTestBit 2}    :: Bit 2   -> Ix 2   -> Flag
external bitTestBit12  {primBitTestBit 12}   :: Bit 12  -> Ix 12  -> Flag
external bitTestBit48  {primBitTestBit 48}   :: Bit 48  -> Ix 48  -> Flag
external bitTestBit64  {primBitTestBit 64}   :: Bit 64  -> Ix 64  -> Flag
external bitTestBit128 {primBitTestBit 128}  :: Bit 128 -> Ix 128 -> Flag

entrypoint bitBitSize1, bitBitSize2, bitBitSize12
entrypoint bitBitSize48, bitBitSize64, bitBitSize128
external bitBitSize1   {primBitBitSize 1}    :: Bit 1   -> Ix 1
external bitBitSize2   {primBitBitSize 2}    :: Bit 2   -> Ix 2
external bitBitSize12  {primBitBitSize 12}   :: Bit 12  -> Ix 12
external bitBitSize48  {primBitBitSize 48}   :: Bit 48  -> Ix 48
external bitBitSize64  {primBitBitSize 64}   :: Bit 64  -> Ix 64
external bitBitSize128 {primBitBitSize 128}  :: Bit 128 -> Ix 128

-----------------------
.lc: primBitManip-neg-32    ./milc -pcosoboro -m --32

entrypoint bitBit0, bitSetBit0, bitClearBit0, bitFlipBit0, bitTestBit0, bitBitSize0
external bitBit0       {primBitBit 0}       :: Ix 0  -> Bit 0
external bitSetBit0    {primBitSetBit 0}    :: Bit 0 -> Ix 0  -> Bit 0
external bitClearBit0  {primBitClearBit 0}  :: Bit 0 -> Ix 0  -> Bit 0
external bitFlipBit0   {primBitFlipBit 0}   :: Bit 0 -> Ix 0  -> Bit 0
external bitTestBit0   {primBitTestBit 0}   :: Bit 0 -> Ix 0  -> Flag
external bitBitSize0   {primBitBitSize 0}   :: Bit 0 -> Ix 0

entrypoint bitBit1K, bitSetBit1K, bitClearBit1K, bitFlipBit1K, bitTestBit1K, bitBitSize1K
external bitBit1K       {primBitBit 1K}       :: Ix 1K  -> Bit 1K
external bitSetBit1K    {primBitSetBit 1K}    :: Bit 1K -> Ix 1K  -> Bit 1K
external bitClearBit1K  {primBitClearBit 1K}  :: Bit 1K -> Ix 1K  -> Bit 1K
external bitFlipBit1K   {primBitFlipBit 1K}   :: Bit 1K -> Ix 1K  -> Bit 1K
external bitTestBit1K   {primBitTestBit 1K}   :: Bit 1K -> Ix 1K  -> Flag
external bitBitSize1K   {primBitBitSize 1K}   :: Bit 1K -> Ix 1K

-----------------------
.lc: primBitShift-pos-32    ./milc -pcosoboro -m --32

-- It would be useful to add executable tests for all of these ...

entrypoint bitShiftL1, bitShiftL2, bitShiftL3, bitShiftL12, bitShiftL32, bitShiftL38
entrypoint bitShiftL64, bitShiftL98, bitShiftL128
external bitShiftL1   {primBitShiftL 1}   :: Bit 1   -> Ix 1   -> Bit 1
external bitShiftL2   {primBitShiftL 2}   :: Bit 2   -> Ix 2   -> Bit 2
external bitShiftL3   {primBitShiftL 3}   :: Bit 3   -> Ix 3   -> Bit 3
external bitShiftL12  {primBitShiftL 12}  :: Bit 12  -> Ix 12  -> Bit 12
external bitShiftL32  {primBitShiftL 32}  :: Bit 32  -> Ix 32  -> Bit 32
external bitShiftL38  {primBitShiftL 38}  :: Bit 38  -> Ix 38  -> Bit 38
external bitShiftL64  {primBitShiftL 64}  :: Bit 64  -> Ix 64  -> Bit 64
external bitShiftL98  {primBitShiftL 98}  :: Bit 98  -> Ix 98  -> Bit 98
external bitShiftL128 {primBitShiftL 128} :: Bit 128 -> Ix 128 -> Bit 128

entrypoint bitShiftRu1, bitShiftRu2, bitShiftRu3, bitShiftRu12, bitShiftRu32, bitShiftRu38
entrypoint bitShiftRu64, bitShiftRu98, bitShiftRu128
external bitShiftRu1   {primBitShiftRu 1}   :: Bit 1   -> Ix 1   -> Bit 1
external bitShiftRu2   {primBitShiftRu 2}   :: Bit 2   -> Ix 2   -> Bit 2
external bitShiftRu3   {primBitShiftRu 3}   :: Bit 3   -> Ix 3   -> Bit 3
external bitShiftRu12  {primBitShiftRu 12}  :: Bit 12  -> Ix 12  -> Bit 12
external bitShiftRu32  {primBitShiftRu 32}  :: Bit 32  -> Ix 32  -> Bit 32
external bitShiftRu38  {primBitShiftRu 38}  :: Bit 38  -> Ix 38  -> Bit 38
external bitShiftRu64  {primBitShiftRu 64}  :: Bit 64  -> Ix 64  -> Bit 64
external bitShiftRu98  {primBitShiftRu 98}  :: Bit 98  -> Ix 98  -> Bit 98
external bitShiftRu128 {primBitShiftRu 128} :: Bit 128 -> Ix 128 -> Bit 128

-----------------------
.lc: primBitShift-neg-32    ./milc -pcosoboro -m --32

entrypoint bitShiftL0, bitShiftL1K, bitShiftL2K
external bitShiftL0   {primBitShiftL 0}   :: Bit 0   -> Ix 0   -> Bit 0
external bitShiftL1K  {primBitShiftL 1K}  :: Bit 1K  -> Ix 1K  -> Bit 1K
external bitShiftL2K  {primBitShiftL 2K}  :: Bit 2K  -> Ix 2K  -> Bit 2K

entrypoint bitShiftRu0, bitShiftRu1K, bitShiftRu2K
external bitShiftRu0  {primBitShiftRu 0}  :: Bit 0   -> Ix 0   -> Bit 0
external bitShiftRu1K {primBitShiftRu 1K} :: Bit 1K  -> Ix 1K  -> Bit 1K
external bitShiftRu2K {primBitShiftRu 2K} :: Bit 2K  -> Ix 2K  -> Bit 2K

-----------------------
.lc: primNZBitFromLiteral-pos-32  ./milc -pcosoboro -m --32

entrypoint nz1_2, nz1_12, nz12_12, nz24_12, nz1K_12
external nz1_2   {primNZBitFromLiteral  1  2} :: ProxyNat  1 -> NZBit  2
external nz1_12  {primNZBitFromLiteral  1 12} :: ProxyNat  1 -> NZBit 12
external nz12_12 {primNZBitFromLiteral 12 12} :: ProxyNat 12 -> NZBit 12
external nz24_12 {primNZBitFromLiteral 24 12} :: ProxyNat 24 -> NZBit 12
external nz1K_12 {primNZBitFromLiteral 1K 12} :: ProxyNat 1K -> NZBit 12

entrypoint nz7_3, nz16_5, nz17_5
external nz7_3   {primNZBitFromLiteral  7  3} :: ProxyNat  7 -> NZBit 3
external nz16_5  {primNZBitFromLiteral 16  5} :: ProxyNat 16 -> NZBit 5
external nz17_5  {primNZBitFromLiteral 17  5} :: ProxyNat 17 -> NZBit 5

-----------------------
.lc: primNZBitFromLiteral-pos-64  ./milc -pcosoboro -m --64

entrypoint nz1_2, nz1_12, nz12_12, nz24_12, nz1K_12
external nz1_2   {primNZBitFromLiteral  1  2} :: ProxyNat  1 -> NZBit  2
external nz1_12  {primNZBitFromLiteral  1 12} :: ProxyNat  1 -> NZBit 12
external nz12_12 {primNZBitFromLiteral 12 12} :: ProxyNat 12 -> NZBit 12
external nz24_12 {primNZBitFromLiteral 24 12} :: ProxyNat 24 -> NZBit 12
external nz1K_12 {primNZBitFromLiteral 1K 12} :: ProxyNat 1K -> NZBit 12

entrypoint nz7_3, nz16_5, nz17_5
external nz7_3   {primNZBitFromLiteral  7  3} :: ProxyNat  7 -> NZBit 3
external nz16_5  {primNZBitFromLiteral 16  5} :: ProxyNat 16 -> NZBit 5
external nz17_5  {primNZBitFromLiteral 17  5} :: ProxyNat 17 -> NZBit 5

entrypoint nz1_33, nz1_48, nz1_64
external nz1_33 {primNZBitFromLiteral     1 33} :: ProxyNat 1 -> NZBit 33
external nz1_48 {primNZBitFromLiteral     1 48} :: ProxyNat 1 -> NZBit 48
external nz1_64 {primNZBitFromLiteral     1 64} :: ProxyNat 1 -> NZBit 64

-----------------------
.lc: primNZBitFromLiteral-neg-32  ./milc -pcosoboro -m --32

entrypoint nzW_2
external nzW_2  {primNZBitFromLiteral  Word  2} :: ProxyNat 0  -> NZBit 2

-----------------------
.lc: primNZBitFromLiteral-neg-32a  ./milc -pcosoboro -m --32

entrypoint nz0_0, nz0_1, nz0_2, nz0_4, nz1_2K
external nz0_0  {primNZBitFromLiteral     0  0} :: ProxyNat  0 -> NZBit 0
external nz0_1  {primNZBitFromLiteral     0  1} :: ProxyNat  0 -> NZBit 1
external nz0_2  {primNZBitFromLiteral     0  2} :: ProxyNat  0 -> NZBit 2
external nz0_4  {primNZBitFromLiteral     0  4} :: ProxyNat  0 -> NZBit 4
external nz1_2K {primNZBitFromLiteral     1 2K} :: ProxyNat  1 -> NZBit 2K

entrypoint nz7_2, nz17_3, nz16_4, nz17_4
external nz7_2  {primNZBitFromLiteral     7  2} :: ProxyNat  7 -> NZBit 2
external nz17_3 {primNZBitFromLiteral    17  3} :: ProxyNat 17 -> NZBit 3
external nz16_4 {primNZBitFromLiteral    16  4} :: ProxyNat 16 -> NZBit 4
external nz17_4 {primNZBitFromLiteral    17  4} :: ProxyNat 17 -> NZBit 4

entrypoint nz1_33, nz1_48, nz1_64, nz1_96
external nz1_33 {primNZBitFromLiteral     1 33} :: ProxyNat 1 -> NZBit 33
external nz1_48 {primNZBitFromLiteral     1 48} :: ProxyNat 1 -> NZBit 48
external nz1_64 {primNZBitFromLiteral     1 64} :: ProxyNat 1 -> NZBit 64
external nz1_96 {primNZBitFromLiteral     1 96} :: ProxyNat 1 -> NZBit 96

-----------------------
.lc: primNZBitFromLiteral-neg-64  ./milc -pcosoboro -m --64

entrypoint nzW_2
external nzW_2  {primNZBitFromLiteral  Word  2} :: ProxyNat 1 -> NZBit 2

-----------------------
.lc: primNZBitFromLiteral-neg-64a  ./milc -pcosoboro -m --64

entrypoint nz0_0, nz0_1, nz0_2, nz0_4, nz1_2K
external nz0_0  {primNZBitFromLiteral     0  0} :: ProxyNat 0 -> NZBit 0
external nz0_1  {primNZBitFromLiteral     0  1} :: ProxyNat 0 -> NZBit 1
external nz0_2  {primNZBitFromLiteral     0  2} :: ProxyNat 0 -> NZBit 2
external nz0_4  {primNZBitFromLiteral     0  4} :: ProxyNat 0 -> NZBit 4
external nz1_2K {primNZBitFromLiteral     1 2K} :: ProxyNat 1 -> NZBit 2K

entrypoint nz7_2, nz17_3, nz16_4, nz17_4
external nz7_2  {primNZBitFromLiteral     7  2} :: ProxyNat 7 -> NZBit 2
external nz17_3 {primNZBitFromLiteral    17  3} :: ProxyNat 17 -> NZBit 3
external nz16_4 {primNZBitFromLiteral    16  4} :: ProxyNat 16 -> NZBit 4
external nz17_4 {primNZBitFromLiteral    17  4} :: ProxyNat 17 -> NZBit 4

entrypoint nz1_96
external nz1_96 {primNZBitFromLiteral     1 96} :: ProxyNat 1 -> NZBit 96

-----------------------
.lc: primNZBitNonZero-pos-32   ./milc -pcosoboro -m --32
data Maybe a = Nothing | Just a
entrypoint nonZero2, nonZero4, nonZero15, nonZero32
external nonZero2  {primNZBitNonZero  2} :: Bit  2 -> Maybe (NZBit  2)
external nonZero4  {primNZBitNonZero  4} :: Bit  4 -> Maybe (NZBit  4)
external nonZero15 {primNZBitNonZero 15} :: Bit 15 -> Maybe (NZBit 15)
external nonZero32 {primNZBitNonZero 32} :: Bit 32 -> Maybe (NZBit 32)

entrypoint nothing4 :: Maybe (NZBit 4)
nothing4             = Nothing

entrypoint just12   :: NZBit 12 -> Maybe (NZBit 12)
just12               = Just

entrypoint forget2, forget4, forget15, forget32
external forget2  {primNZBitForget  2} :: NZBit  2 -> Bit  2
external forget4  {primNZBitForget  4} :: NZBit  4 -> Bit  4
external forget15 {primNZBitForget 15} :: NZBit 15 -> Bit 15
external forget32 {primNZBitForget 32} :: NZBit 32 -> Bit 32

-----------------------
.lc: primNZBitNonZero-neg-nobitrep   ./milc -pcosoro -m --32
data Maybe a = Nothing | Just a
entrypoint nonZero2, nonZero4, nonZero15, nonZero32
external nonZero2  {primNZBitNonZero  2} :: Bit  2 -> Maybe (NZBit  2)
external nonZero4  {primNZBitNonZero  4} :: Bit  4 -> Maybe (NZBit  4)
external nonZero15 {primNZBitNonZero 15} :: Bit 15 -> Maybe (NZBit 15)
external nonZero32 {primNZBitNonZero 32} :: Bit 32 -> Maybe (NZBit 32)

entrypoint nothing4 :: Maybe (NZBit 4)
nothing4             = Nothing

------------
.lc: primNZBitNonZero-neg-32   ./milc -pcosoboro -m --32
data Maybe a = Nothing | Just a
entrypoint nonZero0, nonZero1, nonZero33, nonZero48, nonZero65, nonZero1K
external nonZero0  {primNZBitNonZero  0} :: Bit  0 -> Maybe (NZBit  0)
external nonZero1  {primNZBitNonZero  1} :: Bit  1 -> Maybe (NZBit  1)
external nonZero33 {primNZBitNonZero 33} :: Bit 33 -> Maybe (NZBit 33)
external nonZero48 {primNZBitNonZero 48} :: Bit 48 -> Maybe (NZBit 48)
external nonZero65 {primNZBitNonZero 65} :: Bit 65 -> Maybe (NZBit 65)
external nonZero1K {primNZBitNonZero 1K} :: Bit 1K -> Maybe (NZBit 1K)

entrypoint forget33, forget48, forget64, forget96
external forget33 {primNZBitForget 33} :: NZBit 33 -> Bit 33
external forget48 {primNZBitForget 48} :: NZBit 48 -> Bit 48
external forget64 {primNZBitForget 64} :: NZBit 64 -> Bit 64
external forget96 {primNZBitForget 96} :: NZBit 96 -> Bit 96

------------
.lc: primNZBitNonZero-pos-64   ./milc -pcosoboro -m --64
data Maybe a = Nothing | Just a
entrypoint nonZero2, nonZero4, nonZero15, nonZero32, nonZero33, nonZero48
external nonZero2  {primNZBitNonZero  2} :: Bit  2 -> Maybe (NZBit  2)
external nonZero4  {primNZBitNonZero  4} :: Bit  4 -> Maybe (NZBit  4)
external nonZero15 {primNZBitNonZero 15} :: Bit 15 -> Maybe (NZBit 15)
external nonZero32 {primNZBitNonZero 32} :: Bit 32 -> Maybe (NZBit 32)
external nonZero33 {primNZBitNonZero 33} :: Bit 33 -> Maybe (NZBit 33)
external nonZero48 {primNZBitNonZero 48} :: Bit 48 -> Maybe (NZBit 48)

entrypoint nothing4 :: Maybe (NZBit 4)
nothing4             = Nothing

entrypoint just12   :: NZBit 12 -> Maybe (NZBit 12)
just12               = Just

entrypoint forget2, forget4, forget15, forget32
external forget2  {primNZBitForget  2} :: NZBit  2 -> Bit  2
external forget4  {primNZBitForget  4} :: NZBit  4 -> Bit  4
external forget15 {primNZBitForget 15} :: NZBit 15 -> Bit 15
external forget32 {primNZBitForget 32} :: NZBit 32 -> Bit 32

entrypoint forget33, forget48, forget64
external forget33 {primNZBitForget 33} :: NZBit 33 -> Bit 33
external forget48 {primNZBitForget 48} :: NZBit 48 -> Bit 48
external forget64 {primNZBitForget 64} :: NZBit 64 -> Bit 64

------------
.lc: primNZBitNonZero-neg-64   ./milc -pcosoboro -m --64
data Maybe a = Nothing | Just a
entrypoint nonZero0, nonZero1, nonZero65, nonZero1K
external nonZero0  {primNZBitNonZero  0} :: Bit  0 -> Maybe (NZBit  0)
external nonZero1  {primNZBitNonZero  1} :: Bit  1 -> Maybe (NZBit  1)
external nonZero65 {primNZBitNonZero 65} :: Bit 65 -> Maybe (NZBit 65)
external nonZero1K {primNZBitNonZero 1K} :: Bit 1K -> Maybe (NZBit 1K)

entrypoint forget96
external forget96 {primNZBitForget 96} :: NZBit 96 -> Bit 96

------------
.lc: primNZBitDiv-pos-32     ./milc -pcosoboro -m --32

entrypoint div2, div12, div32
external div2  {primNZBitDiv  2} :: Bit  2 -> NZBit  2 -> Bit  2
external div12 {primNZBitDiv 12} :: Bit 12 -> NZBit 12 -> Bit 12
external div32 {primNZBitDiv 32} :: Bit 32 -> NZBit 32 -> Bit 32

entrypoint bit59, nz3
external bit59 {primBitFromLiteral  59 12} :: ProxyNat 59 -> Bit 12
external nz3   {primNZBitFromLiteral 3 12} :: ProxyNat 3 -> NZBit 12

entrypoint val
val = div12 (bit59 !59) (nz3 !3)

------------
.lc: primNZBitDiv-neg-32     ./milc -pcosoboro -m --32

entrypoint div0, div1, div33, div48, div65, div1K
external div0  {primNZBitDiv  0} :: Bit  0 -> NZBit  0 -> Bit  0
external div1  {primNZBitDiv  1} :: Bit  1 -> NZBit  1 -> Bit  1
external div33 {primNZBitDiv 33} :: Bit 33 -> NZBit 33 -> Bit 33
external div48 {primNZBitDiv 48} :: Bit 48 -> NZBit 48 -> Bit 48
external div65 {primNZBitDiv 65} :: Bit 65 -> NZBit 65 -> Bit 65
external div1K {primNZBitDiv 1K} :: Bit 1K -> NZBit 1K -> Bit 1K

------------
.lc: primNZBitDiv-pos-64     ./milc -pcosoboro -m --64

entrypoint div2, div12, div32, div33, div48
external div2  {primNZBitDiv  2} :: Bit  2 -> NZBit  2 -> Bit  2
external div12 {primNZBitDiv 12} :: Bit 12 -> NZBit 12 -> Bit 12
external div32 {primNZBitDiv 32} :: Bit 32 -> NZBit 32 -> Bit 32
external div33 {primNZBitDiv 33} :: Bit 33 -> NZBit 33 -> Bit 33
external div48 {primNZBitDiv 48} :: Bit 48 -> NZBit 48 -> Bit 48

entrypoint bit59, nz3
external bit59 {primBitFromLiteral  59 12} :: ProxyNat 59 -> Bit 12
external nz3   {primNZBitFromLiteral 3 12} :: ProxyNat 3 -> NZBit 12

entrypoint val
val = div12 (bit59 !59) (nz3 !3)

------------
.lc: primNZBitDiv-neg-64     ./milc -pcosoboro -m --64

entrypoint div0, div1, div65, div1K
external div0  {primNZBitDiv  0} :: Bit  0 -> NZBit  0 -> Bit  0
external div1  {primNZBitDiv  1} :: Bit  1 -> NZBit  1 -> Bit  1
external div65 {primNZBitDiv 65} :: Bit 65 -> NZBit 65 -> Bit 65
external div1K {primNZBitDiv 1K} :: Bit 1K -> NZBit 1K -> Bit 1K

------------
.lc: primNZBitRem-pos-32     ./milc -pcosoboro -m --32

entrypoint rem2, rem12, rem32
external rem2  {primNZBitRem  2} :: Bit  2 -> NZBit  2 -> Bit  2
external rem12 {primNZBitRem 12} :: Bit 12 -> NZBit 12 -> Bit 12
external rem32 {primNZBitRem 32} :: Bit 32 -> NZBit 32 -> Bit 32

entrypoint bit59, nz3
external bit59 {primBitFromLiteral   59 12} :: ProxyNat 59 -> Bit 12
external nz3   {primNZBitFromLiteral  3 12} :: ProxyNat  3 -> NZBit 12
external nz16  {primNZBitFromLiteral 16 12} :: ProxyNat 16 -> NZBit 12

entrypoint val
val = rem12 (bit59 !59) (nz3 !3)

entrypoint mod
mod x = x `rem12` nz16 !16

------------
.lc: primNZBitRem-neg-32     ./milc -pcosoboro -m --32

entrypoint rem0, rem1, rem33, rem48, rem65, rem1K
external rem0  {primNZBitRem  0} :: Bit  0 -> NZBit  0 -> Bit  0
external rem1  {primNZBitRem  1} :: Bit  1 -> NZBit  1 -> Bit  1
external rem33 {primNZBitRem 33} :: Bit 33 -> NZBit 33 -> Bit 33
external rem48 {primNZBitRem 48} :: Bit 48 -> NZBit 48 -> Bit 48
external rem65 {primNZBitRem 65} :: Bit 65 -> NZBit 65 -> Bit 65
external rem1K {primNZBitRem 1K} :: Bit 1K -> NZBit 1K -> Bit 1K

------------
.lc: primNZBitRem-pos-64     ./milc -pcosoboro -m --64

entrypoint rem2, rem12, rem32, rem33, rem48
external rem2  {primNZBitRem  2} :: Bit  2 -> NZBit  2 -> Bit  2
external rem12 {primNZBitRem 12} :: Bit 12 -> NZBit 12 -> Bit 12
external rem32 {primNZBitRem 32} :: Bit 32 -> NZBit 32 -> Bit 32
external rem33 {primNZBitRem 33} :: Bit 33 -> NZBit 33 -> Bit 33
external rem48 {primNZBitRem 48} :: Bit 48 -> NZBit 48 -> Bit 48

entrypoint bit59, nz3
external bit59 {primBitFromLiteral  59 12} :: ProxyNat 59 -> Bit 12
external nz3   {primNZBitFromLiteral 3 12} :: ProxyNat 3 -> NZBit 12
external nz16  {primNZBitFromLiteral 16 12} :: ProxyNat 16 -> NZBit 12

entrypoint val
val = rem12 (bit59!59) (nz3!3)

entrypoint mod
mod x = x `rem12` nz16!16

------------
.lc: primNZBitRem-neg-64     ./milc -pcosoboro -m --64

entrypoint rem0, rem1, rem65, rem1K
external rem0  {primNZBitRem  0} :: Bit  0 -> NZBit  0 -> Bit  0
external rem1  {primNZBitRem  1} :: Bit  1 -> NZBit  1 -> Bit  1
external rem65 {primNZBitRem 65} :: Bit 65 -> NZBit 65 -> Bit 65
external rem1K {primNZBitRem 1K} :: Bit 1K -> NZBit 1K -> Bit 1K

------------
exec: primReadRefStored-pos-32  ./milc -pcosoboro -m --32 readRef-pos.lc
exec: primReadRefStored-pos-64  ./milc -pcosoboro -m --64 readRef-pos.lc

------------
exec: primReadRefStored-neg-32  ./milc -pcosoboro -m --32 readRef-neg.lc
exec: primReadRefStored-neg-64  ./milc -pcosoboro -m --64 readRef-neg.lc

------------
exec: primWriteRefStored-pos-32 ./milc -pcosoboro -m --32 writeRef-pos.lc
exec: primWriteRefStored-pos-64 ./milc -pcosoboro -m --64 writeRef-pos.lc

------------
exec: primWriteRefStored-neg-32 ./milc -pcosoboro -m --32 writeRef-neg.lc
exec: primWriteRefStored-neg-64 ./milc -pcosoboro -m --64 writeRef-neg.lc

------------
exec: primInitStored-pos-32     ./milc -pcosoboro -m --32 initStored-pos.lc
exec: primInitStored-pos-64     ./milc -pcosoboro -m --64 initStored-pos.lc

------------
exec: primInitStored-neg-32     ./milc -pcosoboro -m --32 initStored-neg.lc
exec: primInitStored-neg-64     ./milc -pcosoboro -m --64 initStored-neg.lc

------------
.lc: primAt-pos-32  ./milc -pcosoboro -m --32

type SW = Stored Word

entrypoint at1SW, at2SW, at10SW, at160SW, at256SW, at1KSW, at4KSW
external at1SW   {primAt   1 SW} :: Ref (Array   1 SW) -> Ix   1 -> Ref SW
external at2SW   {primAt   2 SW} :: Ref (Array   2 SW) -> Ix   2 -> Ref SW
external at10SW  {primAt  10 SW} :: Ref (Array  10 SW) -> Ix  10 -> Ref SW
external at160SW {primAt 160 SW} :: Ref (Array 160 SW) -> Ix 160 -> Ref SW
external at256SW {primAt 256 SW} :: Ref (Array 256 SW) -> Ix 256 -> Ref SW
external at1KSW  {primAt  1K SW} :: Ref (Array  1K SW) -> Ix  1K -> Ref SW
external at4KSW  {primAt  4K SW} :: Ref (Array  4K SW) -> Ix  4K -> Ref SW

type SI = Stored (Ix 256)

entrypoint at1SI, at2SI, at10SI, at160SI, at256SI, at1KSI, at4KSI
external at1SI   {primAt   1 SI} :: Ref (Array   1 SI) -> Ix   1 -> Ref SI
external at2SI   {primAt   2 SI} :: Ref (Array   2 SI) -> Ix   2 -> Ref SI
external at10SI  {primAt  10 SI} :: Ref (Array  10 SI) -> Ix  10 -> Ref SI
external at160SI {primAt 160 SI} :: Ref (Array 160 SI) -> Ix 160 -> Ref SI
external at256SI {primAt 256 SI} :: Ref (Array 256 SI) -> Ix 256 -> Ref SI
external at1KSI  {primAt  1K SI} :: Ref (Array  1K SI) -> Ix  1K -> Ref SI
external at4KSI  {primAt  4K SI} :: Ref (Array  4K SI) -> Ix  4K -> Ref SI

type SS = Stored (Bit 16)

entrypoint at1SS, at2SS, at10SS, at160SS, at256SS, at1KSS, at4KSS
external at1SS   {primAt   1 SS} :: Ref (Array   1 SS) -> Ix   1 -> Ref SS
external at2SS   {primAt   2 SS} :: Ref (Array   2 SS) -> Ix   2 -> Ref SS
external at10SS  {primAt  10 SS} :: Ref (Array  10 SS) -> Ix  10 -> Ref SS
external at160SS {primAt 160 SS} :: Ref (Array 160 SS) -> Ix 160 -> Ref SS
external at256SS {primAt 256 SS} :: Ref (Array 256 SS) -> Ix 256 -> Ref SS
external at1KSS  {primAt  1K SS} :: Ref (Array  1K SS) -> Ix  1K -> Ref SS
external at4KSS  {primAt  4K SS} :: Ref (Array  4K SS) -> Ix  4K -> Ref SS

type SA = Array 23 (Stored (Bit 16))

entrypoint at1SA, at2SA, at10SA, at160SA, at256SA, at1KSA, at4KSA
external at1SA   {primAt   1 SA} :: Ref (Array   1 SA) -> Ix   1 -> Ref SA
external at2SA   {primAt   2 SA} :: Ref (Array   2 SA) -> Ix   2 -> Ref SA
external at10SA  {primAt  10 SA} :: Ref (Array  10 SA) -> Ix  10 -> Ref SA
external at160SA {primAt 160 SA} :: Ref (Array 160 SA) -> Ix 160 -> Ref SA
external at256SA {primAt 256 SA} :: Ref (Array 256 SA) -> Ix 256 -> Ref SA
external at1KSA  {primAt  1K SA} :: Ref (Array  1K SA) -> Ix  1K -> Ref SA
external at4KSA  {primAt  4K SA} :: Ref (Array  4K SA) -> Ix  4K -> Ref SA

------------
.lc: primAt-neg-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB ]

entrypoint bad0, bad1, bad2, bad3, bad4, bad5
external bad0 {primAt 0}       :: Ref (Array 8 SW) -> Ix 8 -> Ref SW
external bad1 {primAt Word}    :: Ref (Array 8 SW) -> Ix 8 -> Ref SW
external bad2 {primAt 8 SW}    :: Ref (Array 5 SW) -> Ix 8 -> Ref SW -- won't catch :-(
external bad3 {primAt 4 S}     :: Ref (Array 4  S) -> Ix 4 -> Ref S
external bad4 {primAt 4 Word}  :: Ref (Array 4 SW) -> Ix 4 -> Ref SW
external bad5 {primAt 4G Word} :: Ref (Array 4G SW) -> Ix 4G -> Ref SW

------------
.lc: primAt-neg-32a  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB ]

type SI = Stored (Ix 256)
type SS = Stored (Bit 16)
type SA = Array 23 (Stored (Bit 16))

entrypoint at0SW
external at0SW   {primAt   0 SW} :: Ref (Array   0 SW) -> Ix   0 -> Ref SW
entrypoint at0SI
external at0SI   {primAt   0 SI} :: Ref (Array   0 SI) -> Ix   0 -> Ref SI
entrypoint at0SS
external at0SS   {primAt   0 SS} :: Ref (Array   0 SS) -> Ix   0 -> Ref SS
entrypoint at0SA
external at0SA   {primAt   0 SA} :: Ref (Array   0 SA) -> Ix   0 -> Ref SA

------------
.lc: primStructSelect-pos-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectX, selectY, selectZ, selectU, selectV, selectW, selectA, selectB
external selectX {primStructSelect S "x" SW} :: Ref S -> ProxyLab "x" -> Ref SW
external selectY {primStructSelect S "y" SB} :: Ref S -> ProxyLab "y" -> Ref SB
external selectZ {primStructSelect S "z" SB} :: Ref S -> ProxyLab "z" -> Ref SB
external selectU {primStructSelect T "u" SW} :: Ref T -> ProxyLab "u" -> Ref SW
external selectV {primStructSelect T "v" SW} :: Ref T -> ProxyLab "v" -> Ref SW
external selectW {primStructSelect T "w" SW} :: Ref T -> ProxyLab "w" -> Ref SW
external selectA {primStructSelect U "a" T}  :: Ref U -> ProxyLab "a" -> Ref T
external selectB {primStructSelect U "b" S}  :: Ref U -> ProxyLab "b" -> Ref S

------------
.lc: primStructSelect-pos-64  ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectX, selectY, selectZ, selectU, selectV, selectW, selectA, selectB
external selectX {primStructSelect S "x" SW} :: Ref S -> ProxyLab "x" -> Ref SW
external selectY {primStructSelect S "y" SB} :: Ref S -> ProxyLab "y" -> Ref SB
external selectZ {primStructSelect S "z" SB} :: Ref S -> ProxyLab "z" -> Ref SB
external selectU {primStructSelect T "u" SW} :: Ref T -> ProxyLab "u" -> Ref SW
external selectV {primStructSelect T "v" SW} :: Ref T -> ProxyLab "v" -> Ref SW
external selectW {primStructSelect T "w" SW} :: Ref T -> ProxyLab "w" -> Ref SW
external selectA {primStructSelect U "a" T}  :: Ref U -> ProxyLab "a" -> Ref T
external selectB {primStructSelect U "b" S}  :: Ref U -> ProxyLab "b" -> Ref S

------------
.lc: primStructSelect-neg-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP1
external selectP1 {primStructSelect S    "p" SW} :: Ref S -> ProxyLab "p" -> Ref SW

------------
.lc: primStructSelectA-neg-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP2
external selectP2 {primStructSelect Word "p" SW} :: Ref S -> ProxyLab "p" -> Ref SW

------------
.lc: primStructSelectB-neg-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP3
external selectP3 {primStructSelect S      4 SW} :: Ref S -> ProxyLab "4" -> Ref SW

------------
.lc: primStructSelectC-neg-32  ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP3
external selectP3 {primStructSelect S      4 SW} :: Ref S -> ProxyLab   4 -> Ref SW

------------
.lc: primStructSelect-neg-64  ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP1
external selectP1 {primStructSelect S    "p" SW} :: Ref S -> ProxyLab "p" -> Ref SW

------------
.lc: primStructSelectA-neg-64  ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP2
external selectP2 {primStructSelect Word "p" SW} :: Ref S -> ProxyLab "p" -> Ref SW

------------
.lc: primStructSelectB-neg-64  ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP3
external selectP3 {primStructSelect S      4 SW} :: Ref S -> ProxyLab "4" -> Ref SW

------------
.lc: primStructSelectC-neg-64  ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint selectP3
external selectP3 {primStructSelect S      4 SW} :: Ref S -> ProxyLab   4 -> Ref SW

------------
.lc: primInitArray-pos-32 ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

-- examples with abstract (closure) initializer
entrypoint ia1SW, ia2SW, ia4SW, ia6SW, ia16SW
external ia1SW  {primInitArray  1  SW} :: (Ix  1 -> Init SW) -> Init (Array  1 SW)
external ia2SW  {primInitArray  2  SW} :: (Ix  2 -> Init SW) -> Init (Array  2 SW)
external ia4SW  {primInitArray  4  SW} :: (Ix  4 -> Init SW) -> Init (Array  4 SW)
external ia6SW  {primInitArray  6  SW} :: (Ix  6 -> Init SW) -> Init (Array  6 SW)
external ia16SW {primInitArray 16  SW} :: (Ix 16 -> Init SW) -> Init (Array 16 SW)

-- examples with concrete (known) initializer
external initSW {primInitStored Word} :: Word -> Init (Stored Word)

entrypoint cia1SW, cia2SW, cia4SW, cia6SW, cia16SW
cia1SW  = ia1SW  (\i -> initSW 101)
cia2SW  = ia2SW  (\i -> initSW 102)
cia4SW  = ia4SW  (\i -> initSW 104)
cia6SW  = ia6SW  (\i -> initSW 106)
cia16SW = ia16SW (\i -> initSW 116)

-- Variety ...
entrypoint ia3T, ia7T
external ia3T {primInitArray  3 T} :: (Ix 3 -> Init T) -> Init (Array 3 T)
external ia7T {primInitArray  7 T} :: (Ix 7 -> Init T) -> Init (Array 7 T)

------------
.lc: primInitArray-pos-64 ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

-- examples with abstract (closure) initializer
entrypoint ia1SW, ia2SW, ia4SW, ia6SW, ia16SW
external ia1SW  {primInitArray  1  SW} :: (Ix  1 -> Init SW) -> Init (Array  1 SW)
external ia2SW  {primInitArray  2  SW} :: (Ix  2 -> Init SW) -> Init (Array  2 SW)
external ia4SW  {primInitArray  4  SW} :: (Ix  4 -> Init SW) -> Init (Array  4 SW)
external ia6SW  {primInitArray  6  SW} :: (Ix  6 -> Init SW) -> Init (Array  6 SW)
external ia16SW {primInitArray 16  SW} :: (Ix 16 -> Init SW) -> Init (Array 16 SW)

-- examples with concrete (known) initializer
external initSW {primInitStored Word} :: Word -> Init (Stored Word)

entrypoint cia1SW, cia2SW, cia4SW, cia6SW, cia16SW
cia1SW  = ia1SW  (\i -> initSW 101)
cia2SW  = ia2SW  (\i -> initSW 102)
cia4SW  = ia4SW  (\i -> initSW 104)
cia6SW  = ia6SW  (\i -> initSW 106)
cia16SW = ia16SW (\i -> initSW 116)

-- Variety ...
entrypoint ia3T, ia7T
external ia3T {primInitArray  3 T} :: (Ix 3 -> Init T) -> Init (Array 3 T)
external ia7T {primInitArray  7 T} :: (Ix 7 -> Init T) -> Init (Array 7 T)

------------
.lc: primInitArray-neg-32 ./milc -pcosoboro -m --32

type W  = Word
type SW = Stored Word

entrypoint ia3, ia3W, iaWW
external ia3  {primInitArray 3}   :: (Ix 3 -> Init SW) -> Init (Array 3 SW)
external ia3W {primInitArray 3 W} :: (Ix 3 -> Init SW) -> Init (Array 3 SW)
external iaWW {primInitArray W W} :: (Ix 3 -> Init SW) -> Init (Array 3 SW)

------------
.lc: primInitArray-neg-32a ./milc -pcosoboro -m --32

type W  = Word
type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint ia0SW
external ia0SW  {primInitArray  0  SW} :: (Ix  0 -> Init SW) -> Init (Array  0 SW)

entrypoint ia3S, ia7S, ia3U, ia7U
external ia3S {primInitArray 3 S} :: (Ix 3 -> Init S) -> Init (Array 3 S)
external ia7S {primInitArray 7 S} :: (Ix 7 -> Init S) -> Init (Array 7 S)
external ia3U {primInitArray 3 U} :: (Ix 3 -> Init U) -> Init (Array 3 U)
external ia7U {primInitArray 7 U} :: (Ix 7 -> Init U) -> Init (Array 7 U)

------------
.lc: primInitPad-pos-32 ./milc -pcosoboro -m --32

type SW = Stored Word
struct T [ u, v, w :: SW ]

-- examples with abstract (closure) initializer
entrypoint ip1SW, ip2SW, ip4SW, ip6SW, ip16SW
external ip1SW  {primInitPad  1  SW} :: Init (Pad  1 SW)
external ip2SW  {primInitPad  2  SW} :: Init (Pad  2 SW)
external ip4SW  {primInitPad  4  SW} :: Init (Pad  4 SW)
external ip6SW  {primInitPad  6  SW} :: Init (Pad  6 SW)
external ip16SW {primInitPad 16  SW} :: Init (Pad 16 SW)

-- Variety ...
entrypoint ip3T, ip7T
external ip3T {primInitPad  3 T} :: Init (Pad 3 T)
external ip7T {primInitPad  7 T} :: Init (Pad 7 T)

------------
.lc: primInitPad-neg-32 ./milc -pcosoboro -m --32

type SW = Stored Word

entrypoint ip3, ip3W, ipWW
external ip3  {primInitPad 3}   :: Init (Pad 3 SW)
external ip3W {primInitPad 3 W} :: Init (Pad 3 SW)
external ipWW {primInitPad W W} :: Init (Pad 3 SW)

------------
.lc: primInitPad-neg-32a ./milc -pcosoboro -m --32

type W  = Word
type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: T | b :: S ]

entrypoint ip0SW
external ip0SW  {primInitPad  0  SW} :: Init (Pad  0 SW)

entrypoint ip3S, ip7S, ip3U, ip7U
external ip3S {primInitPad 3 S} :: Init (Pad 3 S)
external ip7S {primInitPad 7 S} :: Init (Pad 7 S)
external ip3U {primInitPad 3 U} :: Init (Pad 3 U)
external ip7U {primInitPad 7 U} :: Init (Pad 7 U)

-----------------------
.lc: primInitSelf   ./milc -m -pcsosrsos
external initSelf {primInitSelf a} :: (Ref a -> Init a) -> Init a
external reInit   {primReInit a}   :: Ref a -> Init a -> Proc Unit

type SW = Stored Word
entrypoint reInitSW   :: Ref SW -> Init SW -> Proc Unit
reInitSW = reInit

entrypoint initSelfSW :: (Ref SW -> Init SW) -> Init SW
initSelfSW = initSelf

-----------------------
.lc: external-imp-by-atom   ./milc -pcosoro -m --32
entrypoint vram
external vram = 0xb8000 :: Ref (Stored Word)

-----------------------
.lc: external-imp-by-prim   ./milc -pcosoro -m --32
require "prelude.lc"
external eqRef = eq :: Ref a -> Ref a -> Bool

entrypoint er8  :: Ref (Stored (Bit 8))  -> Ref (Stored (Bit 8))  -> Bool
er8 = eqRef

entrypoint er16 :: Ref (Stored (Bit 16)) -> Ref (Stored (Bit 16)) -> Bool
er16 = eqRef

-----------------------
.lc: external-imp-by-top   ./milc -pcosoro -m --32
require "prelude.lc"

struct  CTE /16 [ a :: Stored (Bit 64) | b :: Stored (Bit 64) ] aligned 16
bitdata CP/32

-- Style 1: manupulation of raw Word values:
entrypoint lookupCP
external lookupCP = imp_lookupCP :: CP -> Word -> Ref CTE

export imp_lookupCP  :: Word -> Word -> Word
imp_lookupCP cp index = let radix  = cp     `and`  31
                            offset = (index `lshr` (32 `sub` radix)) `mul` 16
                        in (cp `and` not 31) `add` offset

-- Style 2: implementation using a shadow type that has the same final representation
entrypoint radixCP
external radixCP  = imp_radixCP  :: CP -> Ix 32
bitdata ImpCP /32 = ImpCP [ ptr :: Bit 27 | radix :: Ix 32 ]

export imp_radixCP :: ImpCP -> Ix 32
imp_radixCP x       = x.radix

-----------------------
exec: stringcursor-lc-mil            ./milc -m -pcosoro --32 string1.lc string-unannotated.lc
-----------------------
exec: stringcursor-mil-only          ./milc -m -pcosoro --32 string2.mil string-unannotated.lc
-----------------------
exec: stringcursor-lc-mil-noinline   ./milc -m -pcosoro --32 string1.lc string-noinline.lc
-----------------------
exec: stringcursor-mil-only-noinline ./milc -m -pcosoro --32 string2.mil string-noinline.lc
-----------------------
exec: bitdataops-pos1       ./milc btops.lc -m -pcso   --32

-----------------------
exec: bitdataops-pos2       ./milc btops.lc -m -pcsoro --32

-----------------------
exec: bitdataops-pos3       ./milc btops.lc -m -pcsoro --64

-----------------------
.lc: bitdataops-neg1        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ x :: Ix 7 ]          -- type has junk

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq1        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ x :: Ix 7 ]          -- type has junk

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
.lc: bitdataops-neg2        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ x :: Bit 7 | B0 ]    -- type has junk

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq2        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ x :: Bit 7 | B0 ]    -- type has junk

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
.lc: bitdataops-neg3        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ addr :: Ref (Stored Word) ]  -- type has references

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq3        ./milc -m -pcsoro
require "core.llc"

bitdata U = U [ addr :: Ref (Stored Word) ]  -- type has references

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
.lc: bitdataops-neg4        ./milc -m -pcsoro
require "core.llc"

bitdata U /32                        -- type is abstract

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq4        ./milc -m -pcsoro
require "core.llc"

bitdata U /32                        -- type is abstract

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
.lc: bitdataops-neg5        ./milc -m -pcsoro --32
require "core.llc"

bitdata U /64                        -- type is abstract

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq5        ./milc -m -pcsoro --32
require "core.llc"

bitdata U /64                        -- type is abstract

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
.lc: bitdataops-neg6        ./milc -m -pcsoro --64
require "core.llc"

bitdata U /64                        -- type is abstract

external uNot {primBitdataNot U} :: U -> U
external uAnd {primBitdataAnd U} :: U -> U -> U
external uOr  {primBitdataOr  U} :: U -> U -> U
external uXor {primBitdataXor U} :: U -> U -> U
entrypoint uNot, uAnd, uOr, uXor

-----------------------
.lc: bitdataops-eq6        ./milc -m -pcsoro --64
require "core.llc"

bitdata U /64                        -- type is abstract

external uEq  {primBitdataEq  U} :: U -> U -> Bool
external uNeq {primBitdataNe  U} :: U -> U -> Bool
entrypoint uEq, uNeq

-----------------------
