--------------
.lc: pointers-bitsize-32   ./milc -m -pco --32
-- Do we compute the correct BitSize for pointers?
bitdata ExW/32 = ExW [ val :: Ptr (Stored Word) | 0 ]

entrypoint idexW :: ExW -> Ptr (Stored Word)
idexW e = e.val

bitdata ExB/32 = ExB [ val :: Ptr (Stored (Bit 8)) | 0 ]

entrypoint idexB :: ExB -> Ptr (Stored (Bit 8))
idexB e = e.val

bitdata ExL/32 = ExL [ val :: Ptr (Stored (Bit 64)) | 0 ]

entrypoint idexL :: ExL -> Ptr (Stored (Bit 64))
idexL e = e.val

--------------
.lc: pointers-bitsize-64   ./milc -m -pco --64
-- Do we compute the correct BitSize for pointers?
bitdata ExW/64 = ExW [ val :: Ptr (Stored Word) | 0 ]

entrypoint idexW :: ExW -> Ptr (Stored Word)
idexW e = e.val

bitdata ExB/64 = ExB [ val :: Ptr (Stored (Bit 8)) | 0 ]

entrypoint idexB :: ExB -> Ptr (Stored (Bit 8))
idexB e = e.val

bitdata ExL/64 = ExL [ val :: Ptr (Stored (Bit 64)) | 0 ]

entrypoint idexL :: ExL -> Ptr (Stored (Bit 64))
idexL e = e.val

--------------
exec: pointers-deref-co         ./milc -m -pco       --32 deref.lc
exec: pointers-deref-coso       ./milc -m -pcoso     --32 deref.lc
exec: pointers-deref-cosobo     ./milc -m -pcosobo   --32 deref.lc
exec: pointers-deref-cosoro     ./milc -m -pcosoro   --32 deref.lc
exec: pointers-deref-cosoboro   ./milc -m -pcosoboro --32 deref.lc
exec: pointers-deref-l          ./milc -l -pcosboros --32 deref.lc
--------------
exec: pointers-findnull-co       ./milc -m -pco       --32  findnull.lc
exec: pointers-findnull-coso     ./milc -m -pcoso     --32  findnull.lc
exec: pointers-findnull-cosobo   ./milc -m -pcosobo   --32  findnull.lc
exec: pointers-findnull-cosoro   ./milc -m -pcosoro   --32  findnull.lc
exec: pointers-findnull-cosoboro ./milc -m -pcosoboro --32  findnull.lc
exec: pointers-findnull-l        ./milc -l -pcosboros --32  findnull.lc
--------------
.lc: merge1   ./milc -m -pcosoro
require "prelude.lc"
data Dup a      = Dup a a
entrypoint swap7 :: Dup (Bit 7) -> Dup (Bit 7)
entrypoint swap8 :: Dup (Bit 8) -> Dup (Bit 8)
swap7 = swap
swap8 = swap

swap d = case d of Dup x y -> Dup y x

entrypoint d1
d1 = Dup B001 B110

entrypoint f1, f2, f3
f1 = Dup d1 d1
f2 = Dup f1 f1
f3 = Dup f2 f2

entrypoint q
q = Quad 1 2 3 4
data Quad a b c d = Quad a b c d

entrypoint p
p = Pair 1 2

--------------
.lc: merge1-bo   ./milc -m -pcosoboro
require "prelude.lc"
data Dup a      = Dup a a
entrypoint swap7 :: Dup (Bit 7) -> Dup (Bit 7)
entrypoint swap8 :: Dup (Bit 8) -> Dup (Bit 8)
swap7 = swap
swap8 = swap

swap d = case d of Dup x y -> Dup y x

entrypoint d1
d1 = Dup B001 B110

entrypoint f1, f2, f3
f1 = Dup d1 d1
f2 = Dup f1 f1
f3 = Dup f2 f2

entrypoint q
q = Quad 1 2 3 4
data Quad a b c d = Quad a b c d

entrypoint p
p = Pair 1 2

--------------
.lc: merge2   ./milc -m -pcosoro
require "prelude.lc"
entrypoint j1, j2, j3, j4
j1 = Just 1
j2 = Just j1
j3 = Just j2
j4 = Just B001

entrypoint l
l = Cons 1 (Cons 2 (Cons 3 Nil))

entrypoint en, ee
en = N
data T = Oy | He | N | Ha | Ar | Je | Ne | Oh | My

ee = E
data V = A | E | I | O | U

data YN = Yes | No
data Sel = Selected | NotSelected
data UP = Up | Down
data TF = TT | FF

entrypoint yx, sx, ux, tx
yx = Yes
sx = Selected
ux = Up
tx = TT

--------------
.lc: merge2-bo   ./milc -m -pcosoboro
require "prelude.lc"
entrypoint j1, j2, j3, j4
j1 = Just 1
j2 = Just j1
j3 = Just j2
j4 = Just B001

entrypoint l
l = Cons 1 (Cons 2 (Cons 3 Nil))

entrypoint en, ee
en = N
data T = Oy | He | N | Ha | Ar | Je | Ne | Oh | My

ee = E
data V = A | E | I | O | U

data YN = Yes | No
data Sel = Selected | NotSelected
data UP = Up | Down
data TF = TT | FF

entrypoint yx, sx, ux, tx
yx = Yes
sx = Selected
ux = Up
tx = TT

--------------
.lc: merge3-32   ./milc -m -pcosoro --32
require "prelude.lc"

struct CTE /16 [ a :: Stored (Bit 64) | b :: Stored (Bit 64) ] aligned 16
bitdata Cursor /64

entrypoint n1 :: Maybe (Pair (Ref CTE) Cursor)
entrypoint n2 :: Maybe (Pair Word (Bit 64))
n1 = Nothing
n2 = Nothing

--------------
.lc: merge3-64   ./milc -m -pcosoro --64
require "prelude.lc"

struct CTE /16 [ a :: Stored (Bit 64) | b :: Stored (Bit 64) ] aligned 16
bitdata Cursor /64

entrypoint n1 :: Maybe (Pair (Ref CTE) Cursor)
entrypoint n2 :: Maybe (Pair Word (Bit 64))
n1 = Nothing
n2 = Nothing

--------------
.lc: merge4-cursor   ./milc -m -pcosoro --32
require "prelude.lc"

struct  CTE /16 [ a :: Stored (Bit 64) | b :: Stored (Bit 64) ] aligned 16
bitdata Cursor /64

export next
external next = nextImp :: Cursor -> Maybe (Pair (Ref CTE) Cursor)

bitdata CursorImp = CursorImp [ ptr :: Word | count :: Word ]

export nextImp :: CursorImp -> Maybe (Pair Word CursorImp)
nextImp c = if neq c.count 0 then Just (Pair c.ptr CursorImp[ ptr=add c.ptr 16 | count = sub c.count 1 ]) else Nothing

entrypoint count
count :: Cursor -> Word
count  = loop 0
  where loop n c = case next c of
                    Just p  -> case p of Pair s c1 -> loop (add n 1) c1
                    Nothing -> n

--------------
.lc: wordBits-external-32   ./milc -m -pcso --32
entrypoint wordOr
external wordOr {primBitOr WordBits} :: Bit WordBits -> Bit WordBits -> Bit WordBits

--------------
.lc: wordBits-external-64   ./milc -m -pcso --64
entrypoint wordOr
external wordOr {primBitOr WordBits} :: Bit WordBits -> Bit WordBits -> Bit WordBits

--------------
.lc: wordBits-32          ./milc -m -pcso --32
require "bit.llc"
entrypoint val :: Bit WordBits
val= bit0

--------------
.lc: wordBits-64          ./milc -m -pcso --64
require "bit.llc"
entrypoint val :: Bit WordBits
val= bit0

--------------
.mil: nzbit-32            ./milc -m -pco --32
entrypoint nzdiv
nzdiv <- {x,y} nzdiv((x,y))

--------------
