-------------
.lc: structs1   ./milc -pcoso -t --32

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]
entrypoint idS :: Ref S -> Ref S; idS r = r

-------------
.lc: structs1a   ./milc -pcoso -t --64

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]
entrypoint idS :: Ref S -> Ref S; idS r = r

-------------
.lc: structs2   ./milc -pcoso -t --32

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]
entrypoint idS1 :: Ref S1 -> Ref S1; idS1 r = r

-------------
.lc: structs2a   ./milc -pcoso -t --64

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]
entrypoint idS1 :: Ref S1 -> Ref S1; idS1 r = r

-------------
.lc: structs3   ./milc -pcoso -t --32

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T [ s :: S | s1 :: S1 ]
entrypoint idT :: Ref T -> Ref T; idT r = r

-------------
.lc: structs3a   ./milc -pcoso -t --64

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T [ s :: S | s1 :: S1 ]
entrypoint idT :: Ref T -> Ref T; idT r = r

-------------
.lc: structs4   ./milc -pcoso -t --32

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

type Size = 32
struct T1/Size [ s :: S | s1 :: S1 ]    -- symbolic size
entrypoint idT1 :: Ref T1 -> Ref T1; idT1 r = r

-------------
.lc: structs4a   ./milc -pcoso -t --64

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

type Size = 32
struct T1/Size [ s :: S | s1 :: S1 ]    -- symbolic size
entrypoint idT1 :: Ref T1 -> Ref T1; idT1 r = r

-------------
.lc: structs5   ./milc -pcoso -t --32

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T2 [ s :: S | s1 :: S1 ]
          aligned 4
entrypoint idT2 :: Ref T2 -> Ref T2; idT2 r = r

-------------
.lc: structs5a   ./milc -pcoso -t --64

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T2 [ s :: S | s1 :: S1 ]
          aligned 4
entrypoint idT2 :: Ref T2 -> Ref T2; idT2 r = r

-------------
.lc: structs6   ./milc -pcoso -t --32

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T3 [ s :: S | s1 :: S1 ]
          aligned 12
entrypoint idT3 :: Ref T3 -> Ref T3; idT3 r = r

-------------
.lc: structs6a   ./milc -pcoso -t --64

struct S [ x, y :: Stored Word
         |         Stored Word     -- unlabelled field
         | z    :: Stored Word ]

struct S1/16
         [ x, y :: Stored Word
         |         Stored Word
         | z    :: Stored Word ]

struct T3 [ s :: S | s1 :: S1 ]
          aligned 12
entrypoint idT3 :: Ref T3 -> Ref T3; idT3 r = r

-------------
.lc: structs7   ./milc -pcoso -t --32

type SByte = Stored Byte
type Byte  = Bit 8

struct U  [ q :: Stored (Bit 64) | d :: Stored (Bit 32) | s :: Stored (Bit 16) | b :: Stored (Bit 8) ]
entrypoint idU :: Ref U -> Ref U; idU r = r

struct U1 [ b :: SByte | Pad 1 SByte | s :: Stored (Bit 16) | d :: Stored (Bit 32) | q :: Stored (Bit 64) ]
entrypoint idU1 :: Ref U1 -> Ref U1; idU1 r = r

struct U2 [ Pad 1 SByte | b :: SByte | s :: Stored (Bit 16) | d :: Stored (Bit 32) | q :: Stored (Bit 64) ]
entrypoint idU2 :: Ref U2 -> Ref U2; idU2 r = r

struct U3 [ q :: Stored (Bit 64) | d :: Stored (Bit 32) | s :: Stored (Bit 16) | b :: Stored (Bit 8) | Pad 1 SByte ]
entrypoint idU3 :: Ref U3 -> Ref U3; idU3 r = r

-------------
.lc: structs7a   ./milc -pcoso -t --64

type SByte = Stored Byte
type Byte  = Bit 8

struct U  [ q :: Stored (Bit 64) | d :: Stored (Bit 32) | s :: Stored (Bit 16) | b :: Stored (Bit 8) ]
entrypoint idU :: Ref U -> Ref U; idU r = r

struct U1 [ b :: SByte | Pad 1 SByte | s :: Stored (Bit 16) | d :: Stored (Bit 32) | q :: Stored (Bit 64) ]
entrypoint idU1 :: Ref U1 -> Ref U1; idU1 r = r

struct U2 [ Pad 1 SByte | b :: SByte | s :: Stored (Bit 16) | d :: Stored (Bit 32) | q :: Stored (Bit 64) ]
entrypoint idU2 :: Ref U2 -> Ref U2; idU2 r = r

struct U3 [ q :: Stored (Bit 64) | d :: Stored (Bit 32) | s :: Stored (Bit 16) | b :: Stored (Bit 8) | Pad 1 SByte ]
entrypoint idU3 :: Ref U3 -> Ref U3; idU3 r = r

-------------
.lc: structs8   ./milc -pcoso -t --32

type SByte = Stored Byte
type Byte  = Bit 8
type SWord = Stored Word
struct V [ b :: SByte | Pad 3 SByte | w :: SWord ]
entrypoint idV :: Ref V -> Ref V; idV r = r

-------------
.lc: structs8a   ./milc -pcoso -t --64

type SByte = Stored Byte
type Byte  = Bit 8
type SWord = Stored Word
struct V [ b :: SByte | Pad 3 SByte | w :: SWord ]
entrypoint idV :: Ref V -> Ref V; idV r = r

-------------
.lc: structs9   ./milc -pcoso -t --32

struct Okay [ x :: Stored (Ref Okay) ]
entrypoint idOkay :: Ref Okay -> Ref Okay; idOkay r = r

-------------
.lc: structs9a   ./milc -pcoso -t --64

struct Okay [ x :: Stored (Ref Okay) ]
entrypoint idOkay :: Ref Okay -> Ref Okay; idOkay r = r

-------------
.lc: structs10   ./milc -pcoso -t --32

struct PageTable/4K [ ptes :: Array 1K (Stored PTE) ]
type PTE = Word
entrypoint idPageTable :: Ref PageTable -> Ref PageTable; idPageTable r = r

struct PageTable12/4K [ ptes :: Array 1K (Stored PTE) ] aligned 12
entrypoint idPageTable12 :: Ref PageTable12 -> Ref PageTable12; idPageTable12 r = r

struct PageTable1K/4K [ ptes :: Array 1K (Stored PTE) ] aligned 1K
entrypoint idPageTable1K :: Ref PageTable1K -> Ref PageTable1K; idPageTable1K r = r

struct PageTable4K/4K [ ptes :: Array 1K (Stored PTE) ] aligned 4K
entrypoint idPageTable4K :: Ref PageTable4K -> Ref PageTable4K; idPageTable4K r = r

-------------
.lc: structs10a   ./milc -pcoso -t --64

struct PageTable/4K [ ptes :: Array 1K (Stored PTE) ]
type PTE = Word
entrypoint idPageTable :: Ref PageTable -> Ref PageTable; idPageTable r = r

struct PageTable12/4K [ ptes :: Array 1K (Stored PTE) ] aligned 12
entrypoint idPageTable12 :: Ref PageTable12 -> Ref PageTable12; idPageTable12 r = r

struct PageTable1K/4K [ ptes :: Array 1K (Stored PTE) ] aligned 1K
entrypoint idPageTable1K :: Ref PageTable1K -> Ref PageTable1K; idPageTable1K r = r

struct PageTable4K/4K [ ptes :: Array 1K (Stored PTE) ] aligned 4K
entrypoint idPageTable4K :: Ref PageTable4K -> Ref PageTable4K; idPageTable4K r = r

-------------
.lc: structs11   ./milc -pcoso -t --32

struct PrioSet [ arr1, arr2 :: Array 256 (Stored (Ix 256))
               | size       :: Stored (Ix 257) ]
entrypoint idPrioSet :: Ref PrioSet -> Ref PrioSet; idPrioSet r = r

-------------
.lc: structs11a   ./milc -pcoso -t --64

struct PrioSet [ arr1, arr2 :: Array 256 (Stored (Ix 256))
               | size       :: Stored (Ix 257) ]
entrypoint idPrioSet :: Ref PrioSet -> Ref PrioSet; idPrioSet r = r

-------------
.lc: structs12   ./milc -pcoso -t --32

struct Six [ w :: Stored (Bit 32) | s :: Stored (Bit 16) ]
entrypoint idSix :: Ref Six -> Ref Six; idSix r = r

struct ASix [ sixes :: Array 12 Six ]
entrypoint idASix :: Ref ASix -> Ref ASix; idASix r = r

-------------
.lc: structs12a   ./milc -pcoso -t --64

struct Six [ w :: Stored (Bit 32) | s :: Stored (Bit 16) ]
entrypoint idSix :: Ref Six -> Ref Six; idSix r = r

struct ASix [ sixes :: Array 12 Six ]
entrypoint idASix :: Ref ASix -> Ref ASix; idASix r = r

-------------
.lc: structs13   ./milc -pcoso -t --32

type SByte = Stored Byte
type Byte  = Bit 8

struct Eight [ w :: Stored (Bit 32) | s :: Stored (Bit 16) | Pad 2 SByte ]
entrypoint idEight :: Ref Eight -> Ref Eight; idEight r = r

struct AEight [ eights :: Array 12 Eight ]
entrypoint idAEight :: Ref AEight -> Ref AEight; idAEight r = r

-------------
.lc: structs13a   ./milc -pcoso -t --64

type SByte = Stored Byte
type Byte  = Bit 8

struct Eight [ w :: Stored (Bit 32) | s :: Stored (Bit 16) | Pad 2 SByte ]
entrypoint idEight :: Ref Eight -> Ref Eight; idEight r = r

struct AEight [ eights :: Array 12 Eight ]
entrypoint idAEight :: Ref AEight -> Ref AEight; idAEight r = r

-------------
.lc: structs14   ./milc -pcoso -t --32

struct Bad1 [ x :: Bad1 ]    -- invalid: direct recursion

-------------
.lc: structs15   ./milc -pcoso -t --32

struct Bad2 [ x :: Bad3 ]    -- invalid: mutual recursion
struct Bad3 [ x :: Bad2 ]

-------------
.lc: structs16   ./milc -pcoso -t --32

struct Bad4 [ x :: Bad4 | y :: Stored Word ]

-------------
.lc: structs17   ./milc -pcoso -t --32

struct Bad5 [ x :: Word ] -- invalid: not an area

-------------
.lc: structs18   ./milc -pcoso -t --32

struct Bad6/12 [ x :: Stored Word ] -- invalid: size is incorrect

-------------
.lc: structs19   ./milc -pcoso -t --32

struct Bad7/Word [ x :: Stored Word ] -- invalid: kind size is not nat

-------------
.lc: structs20   ./milc -pcoso -t --32

struct Bad8/s [ x :: Stored Word ]    -- invalid: size type variable not in scope

-------------
.lc: nested-struct-align-32 ./milc -pcosoboro -m --32

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: S | b :: T ]
struct V1 [ p :: Array 12 S ]
struct V2 [ r :: Array 12 U ]

------------
.lc: nested-struct-align-64 ./milc -pcosoboro -m --64

type SW = Stored Word
type SB = Stored (Bit 8)
struct S [ x :: SW | y :: SB | z :: SB ]
struct T [ u, v, w :: SW ]
struct U [ a :: S | b :: T ]
struct V1 [ p :: Array 12 S ]
struct V2 [ r :: Array 12 U ]

------------
.lc: struct-select-in-lc   ./milc -pcosoro -m
require "prelude.lc"
  
struct S [x, y, z :: Stored Word]

external readWord  {primReadRefStored  Word} :: Ref (Stored Word) -> Proc Word
external writeWord {primWriteRefStored Word} :: Ref (Stored Word) -> Word -> Proc Unit

entrypoint f :: Ref S -> Proc Word
f r = do u <- readWord r.x
         v <- readWord r.y
         writeWord r.z (mul u v)
         return (add u v)

------------
.lc: structs-cannot-determine-ref-size   ./milc -m
-- Recursion between S and Status makes it hard to determine
-- the alignment of S, and hence the bitsize of Ref S in order
-- to validate the definition of Status ...

struct  S [ status :: Stored Status | badge :: Stored Word ]
  
bitdata Status/32 = Absent [0] | Present [ link :: Ref S | 1 ]

entrypoint absent
absent = Absent

------------
.lc: structs-cannot-determine-ref-size-add-aligned   ./milc -m
-- ... the solution (for now) is to require an explicit alignment
-- declaration on the structure definition:
struct  S [ status :: Stored Status | badge :: Stored Word ] aligned 4

bitdata Status/32 = Absent [0] | Present [ link :: Ref S | 1 ]

entrypoint absent
absent = Absent

------------
