tests: misc
-------
.lc: no-entrypoint     ./milc -m
-- This program should give an error because there
-- are no defined entrypoints:
v = 42

-------
.lc: fortytwo          ./milc -m
entrypoint v
v = 42

.llc: empty-literate    ./milc 
This is a literate script file without any literate lines

.llc: invalid-literate  ./milc
Program lines should not appear next to a comment
> data T = X | Y

.llc: illegal-data-lhs1 ./milc
### Illegal datatype left hand side syntax, 1

> data a     = A | B
> data a b   = A | B

.llc: illegal-data-lhs2 ./milc
### Illegal datatype left hand side syntax, 2

> data T X   = A | B

.llc: illegal-data-lhs3 ./milc
### Illegal datatype left hand side syntax, 3

> data T a a = A | B

.llc: illegal-data-rhs ./milc
### Illegal datatype right hand side

> data T = a -> b

.llc: missing-data-rhs ./milc
### Missing datatype right hand side

> data U

.llc: unbound-data-type-var ./milc
### Unbound type variable in constructor

> data T = Just a | Nothing

.llc: unbound-type-constructor ./milc
### Unbound type constructor in type

> data T   = Pair X X
> data S a = A | B | C (S A)

.llc: multiple-tycon-defns  ./milc
### Multiple definitions for a single type constructor name

> data T = A | B
> data T = C | D

.llc: valid-data-defns    ./milc
### Valid type definitions:

> data Bool       = False | True
> data Maybe a    = Nothing | Just a
> data List a     = Nil | Cons a (List a)
> data Tree a     = Leaf | Node (Tree a) a (Tree a)
> data Plex a     = Val a | Plex (Plex (List a))
> data Pair a b   = Pair a b
> data Sum f g a  = InL (f a) | InR (g a)
> data Prod f g a = Prod (f a) (g a)
> data Comp f g a = Comp (f (g a))
> data Const a b  = Const a
> data Id a       = Id a
> data Scott      = Scott (Scott -> Scott)
> data Fix f      = In (f (Fix f))
> data Ap a b     = Apply (b a)
> data S x        = Void
> data R f        = Make (Ap f S)
> data Twice x f  = Twice (Comp f f x)
> data QP a       = Done | QP (QP (Pair a a))

.llc: data-with-kind-annotations  ./milc
### Type definitions with kind annotations:

> data T (a:: *) (b:: * -> *) = Apply (b a)

> data Fix1 (f :: * -> *) = In1 (f (Fix1 f :: *))

> data Comp (f :: nat -> *) (g :: area -> nat) (x :: area)
>                  = Comp (f (g x))

> data Comp0 f g x = Comp0 (f (g x))
> data Comp1 f g x = Comp1 (f (g x :: *))
> data Comp3 f g x = Comp3 (f (g x :: type)) -- alternative to Comp1
> data Comp2 f g x = Comp2 (f (g x :: nat))

> data V f a = C ((f :: nat -> *) a)

> data X ((a :: *) :: *)    = P (X ((a :: *) :: type)) | Q
> data Y ((b :: *) :: type) = U (Y ((b :: *) :: *))    | V
> data Z (a::nat) (b::type) = W (Z (a::nat) (b::type)) | F

.llc: data-not-well-kinded   ./milc
### Type definitions that are not well-kinded:

> data R   = MkR (R R)
> data S a = B (a a)
> data T (a :: * -> *) = A a
> data U f x = U (f x) (x f)
> data V f a = V ((f :: nat -> *) (a :: *))
> data W a   = One W

.llc: data-illegal-kind-annotations1  ./milc
### Type definitions with illegal kind annotations, 1:

> data T (a :: foo) = X | Y | Z
> data U ((a :: *) :: nat) = Nonsense

.llc: data-illegal-kind-annotations2  ./milc
### Type definitions with illegal kind annotations, 2:

> data V f a = C ((f :: boo -> *) a) | D (V f a) a | E ((a :: *) :: nat)

.llc: data-illegal-kind-annotations3  ./milc
### Type definitions with illegal kind annotations, 3:

> data W (a::nat)   = R (W (a::type))
> data Z (a::nat) (b::type) = W (Z (a::nat) (b::nat)) | F

.llc: rec-type-defns   ./milc
### Recursive type definitions:

> data T = A | B
> data ListT = Nil | Cons T ListT

> data Forest = Done | For Tree Forest
> data Tree   = Node T Forest

.llc: rec-type-defns2   ./milc
### Recursive type definitions, in reverse order:

> data Tree   = Node T Forest
> data Forest = Done | For Tree Forest

> data ListT = Nil | Cons T ListT
> data T = A | B

.llc: legal-type-annotations  ./milc
### Testing legal type annotations:

> n  :: a -> a
> n x = n x

> p  :: a -> b -> c
> p x = p x

> q  :: f a -> f a
> q x = q x

> r  :: f (g a) -> f (h b)
> r x = r x

> s  :: f a -> f (b :: * -> *)
> s x = s x

> t  :: f a -> Fix f
> t x = t x

> data Fix f = In (f (Fix f))

.llc: illegal-type-annotations   ./milc
### Testing illegal type annotations

> q  :: f a -> f      -- multiple kinds for f
> q x = q x

> r  :: f a -> a f    -- ill-kinded
> r x = r x

> s, s :: a -> a     -- multiple defns for same var
> s x   = s x

> t    :: a -> a     -- multiple distinct defns for same var
> t x   = t x
> u x   = u x
> t    :: b -> b

.llc: let-exprs   ./milc
### Examples using let expressions and qualifiers

> f1 g x = let y = g x in y
> f2 g x = let
>           y = g x
>          in
>           y
> f3 g x = let y = g x
>          in y
> f4 g x = let {
>  y = g x
>  } in y

> g1 f x = let y = f x; z = f y in z
> g2 f x = let
>            y = f x
>            z = f y
>          in
>           z
> g3 f x = let y = f x
>              z = f y
>          in z
> g4 f x = let {
>  y = f x ;
>  z = f y }
>   in z
> g5 f x = let { y = f x
>              ; z = f y
>              } in z

.llc: if-exprs   ./milc
### Examples using if then else expressions:

> require "prelude.lc"

> cond0 x y = if x then 1 else 2
> cond1 x y = if x then if y then 1 else 2 else 3
> cond2 x y = if x then 1 else if y then 2 else 3
> cond3 x y = if x then
>               if y then 1 else 2
>             else
>               if y then 3 else 4

.llc: if-exprs-illegal0   ./milc
### Examples involving misformed conditionals, 0:

> require "prelude.lc"
> cand0 x y = if x then 1

.llc: if-exprs-illegal1   ./milc
### Examples involving misformed conditionals, 1:

> require "prelude.lc"
> cand1 x y = if x then if y then 1 else 2

.llc: if-exprs-illegal2   ./milc
### Examples involving misformed conditionals, 2:

> require "prelude.lc"
> cand2 x y = if x else if y else 3

.llc: if-exprs-illegal3   ./milc
### Examples involving misformed conditionals, 3:

> require "prelude.lc"
> cand3 x y = if x then
>             else
>               if y then 3 else 4

.llc: if-exprs-illegal4   ./milc
### Examples involving misformed conditionals, 4:

> require "prelude.lc"
> cand4 x y = if x else 2

.llc: if-exprs-illegal5   ./milc
### Examples involving misformed conditionals, 5:

> require "prelude.lc"
> cand5 x y = if x

.llc: if-exprs-illegal6   ./milc
### Examples involving misformed conditionals, 6:

> require "prelude.lc"
> cand6 x y = if then else

.llc: do-notation   ./milc
### Some examples using do notation:

> require "prelude.lc"

> test x = test x   -- Dummy test

> proc0, proc1, proc2, proc2a, proc2b, proc3, proc4 :: Proc Word

> proc0 = do proc1
>            proc2
>            proc3

> proc1 = do x <- proc2
>            y <- proc3
>            z <- proc2
>            return z

> proc2 = if<- test 1 then
>           proc3
>           proc3
>          else
>           proc3
>           proc3

Variations on indentation; shouldn't be relevant here anyway because we're
not inside an if:

> proc2a = if<- test 2 then
>            proc3
>            proc3
>          else
>            proc3
>            proc3

> proc2b = if<- test 3
>          then
>            proc3
>            proc3
>          else
>            proc3
>            proc3

> proc3 = do x <- test 4  -- don't expect this to terminate! :-)
>            if x then
>              proc3
>              proc3
>             else
>              proc3
>              proc3

Indentation variations:

> proc3a = do x <- test 5   -- don't expect this to terminate! :-)
>             if x then
>               proc3
>               proc3
>             else
>               proc3
>               proc3

> proc3b = do x <- test 6  -- don't expect this to terminate! :-)
>             if x
>             then
>               proc3
>               proc3
>             else
>               proc3
>               proc3

> kleisli f g x = do y <- f x; g y    -- single line

> proc4 = do do proc3
>               proc3
>            proc2
>            do proc3
>               proc3
>               proc4

.llc: literals  ./milc
### Examples using numeric literals

> const1   = 0    :: Word
> const128 = 128  :: Word
> const4K  = 4K   :: Word
> const4M  = 4M   :: Word
> const16M = 16M  :: Word

> f x y = y
> decimal = f 0
>           (f 1
>           (f 10
>           (f 11
>           (f 123
>           (f 1304505
>           (f 100_000
>           (f 100_000_
>           (f 00
>           (f 01
>           (f 012
>           (f 0123
>              01304505)))))))))))

> octal  = f 0o0
>          (f 0o1
>          (f 0o12
>          (f 0o123
>          (f 0o1304505
>          (f 0O0
>          (f 0O1
>          (f 0O12
>          (f 0O123
>             0O1304505))))))))

> hex    = f 0x0
>          (f 0x1
>          (f 0x12
>          (f 0x123
>          (f 0x1304505
>          (f 0xa
>          (f 0xA
>          (f 0xbac
>          (f 0xCafe_Babe
>          (f 0x_a
>          (f 0xA_
>          (f 0x1_2
>          (f 0X0
>          (f 0X1
>          (f 0X12
>          (f 0X123
>          (f 0X1304505
>          (f 0Xa
>          (f 0XA
>             0Xbac))))))))))))))))))

> bin     = f 0b0
>           (f 0b1
>           (f 0b11
>           (f 0b111
>           (f 0b1110101
>           (f 0b11
>           (f 0b000
>           (f 0b0101010101010101
>           (f 0B0
>           (f 0B1
>           (f 0B11
>           (f 0B111
>           (f 0B1110101
>           (f 0B11
>           (f 0B000
>           (f 0B0101010101010101
>           (f 0b1_1_1_1
>           (f 0b11_00
>           (f 0b___1
>           (f 0b1___
>           (f 0b_0_
>              0))))))))))))))))))))

.llc: bad-literals ./milc
> bad    = f 0o8
>          (f 0o10009
>          (f 0O100080
>          (f 0xg
>          (f 0Xg

>          (f 0b32
>          (f 0b45
>          (f 0b00000100002
>          (f 0b_
>          (f 0x

>          (f 0X
>          (f 0b
>          (f 0B
>          (f 0o
>             0O)))))))))))))

.llc: longest-lexeme-literals1 ./milc
> notso = 0xfffz   -- lexer sees "0xfff z"

.llc: longest-lexeme-literals2 ./milc
> very  = 12345f   -- lexer sees "12345 f"

.llc: longest-lexeme-literals3 ./milc
> much  = a67b43   -- lexer sees single identifier

.llc: large-literals64  ./milc --64
### Examples involving large literals (beyond 32 bits)

> const16G = 16G  :: Word   
> const16T = 16T  :: Word      -- that's a very big bit string :-)

.llc: large-literals64a  ./milc --64
> f x y = y

> bigs = f 0Xcafebabe9
>        (f 0xcafebabe9
>        (f 0xAaBbCcDdEeFf00
>           0XAaBbCcDdEeFf00))

.llc: large-literals32  ./milc --32
### Examples involving large literals (beyond 32 bits)

> const16G = 16G  :: Word   
> const16T = 16T  :: Word      -- that's a very big bit string :-)

.llc: large-literals32a  ./milc --32
> f x y = y

> bigs = f 0Xcafebabe9
>        (f 0xcafebabe9
>        (f 0xAaBbCcDdEeFf00
>           0XAaBbCcDdEeFf00))

.llc: more-literals  ./milc
### More literal tests:

Miscellaneous bit vector literals:

> a0 :: Bit 2
> a0  = B00

> a1 :: Bit 3
> a1  = B_101

> a2 :: Bit 5
> a2  = B10101

> a3 :: Bit 9
> a3  = O377

> a4 :: Bit 8
> a4  = Xff

> a5 :: Bit 4
> a5  = B0101

> a6 :: Bit 8
> a6  = B_1111_0000

> a7 :: Bit 32
> a7  = X_FfFf_0000

Miscellaneous int literals:

> b0 :: Bit 0b1101
> b0  = B1_0000_1111_0000

> b1 :: Bit 0x3
> b1  = B101

> b2 :: Bit 0o10
> b2  = B1000_0010

> b3 :: Bit 0x9
> b3  = O377

> b4 :: Bit 0b_1_000
> b4  = Xff

> b5 :: Bit 3
> b5  = B101

> b6 :: Word
> b6  = 0b_1111_0000

> b7 :: Word
> b7  = 0X_FfFf_0000

-------
.lc: bitsub32   ./milc --32 -m -pcosoro
external minus { primBitMinus 32 } :: Bit 32 -> Bit 32 -> Bit 32
entrypoint sub
sub = minus

-------
.lc: bitsub64   ./milc --64 -m -pcosoro
external minus { primBitMinus 32 } :: Bit 32 -> Bit 32 -> Bit 32
entrypoint sub
sub = minus

-------
exec: punning1  ./milc --32 -m -pcosoro punning.lc

-------
.lc: letfatbarcase  ./milc -m -pco
require "basic.mil"
  
entrypoint f
f  :: Word -> Word
f x = let c = (case x `lt` x of False -> True) | True
      in (case c of True -> x) | f x

-------
exec: acker   ./milc -m --32 -pcsoro acker.lc

-------
exec: eq      ./milc -m --32 -pcsoro eq.lc

-------
exec: ack     ./milc -m --32 -pco ack.lc

-------
exec: tidemo  ./milc -m --32 -pco tidemo.lc

-------
exec: doll    ./milc -m --32 -pco doll.lc

-------
exec: overlap ./milc -m --32 -pco overlap.lc

-------
exec: contflow   ./milc -m -pcsoro contflow.lc

-------
exec: debug      ./milc -m debug.llc

-------
exec: masktestBug   ./milc -m masktestBug.llc

-------
.lc:  masktestBug2  ./milc -t
bitdata S = X [B01] | Y [B10]
-- We can find a mask test predicate for V here by over approximating (x/=0)
bitdata T = U [B00] | V [s::S]

entrypoint main
main = U

-------
.lc:  masktestBug3  ./milc -t
bitdata S = X [B01] | Y [B10]
-- We cannot find a mask test predicate for V here because there is no space
-- to approximate: (x/=0) would include too much ...
bitdata T = U [B00] | V [s::S] | W [B11]

entrypoint main
main = U

-------
exec: polylift  ./milc polylift.lc -m -pco

-------
exec: albfib    ./milc albfib.lc --standalone -m -l

-------
exec: albstruct ./milc basic.mil struct.lc -m -l --standalone

-------
exec: albgdtac  ./milc basic.mil gdtac.lc -m -l --standalone

-------
exec: albfibsigned ./milc basic.mil fibsigned.lc -m -l --standalone

-------
exec: albishecho   ./milc basic.mil echo.lc -m -pcsoro --standalone

-------
exec: albishecho-g ./milc basic.mil echo.lc -g -pcsoro --standalone

-------
exec: simplifiedecholoop   ./milc loop.lc -m -pcsoro

-------
exec: simplifiedecholoop-g ./milc loop.lc -g -pcsoro

-------
exec: intervals   ./milc -m -pcosoro intervals.lc

-------
.lc: map-inlines     ./milc -m -pcsoro
require "prelude.lc"

map f xs = case xs of
            Nil       -> Nil
            Cons y ys -> Cons (f y) (map f ys)

entrypoint mapsucc, mapdouble
mapsucc     = map (add 1)
mapdouble   = map (mul 2)

entrypoint mapcomp :: (Word -> Word) -> (Word -> Word) -> List Word -> List Word
mapcomp f g = map (comp f g)

comp f g x  = f (g x)

entrypoint maptoodd
maptoodd    = mapcomp (add 1) (mul 2)

-------
tests: identity
tests: datatest
tests: fib
tests: ex
tests: btests

-------
.exec: byteorder32m    ./milc -m -pcosobro --32 byteorder.lc
.exec: byteorder64m    ./milc -m -pcosobro --64 byteorder.lc
.exec: byteorder32l    ./milc -l -pcosobro --32 byteorder.lc
.exec: byteorder64l    ./milc -l -pcosobro --64 byteorder.lc

-------
