type M = Proc



export main

data List_Bool$jfm  = Nil$jdz  | Cons$je0 Bool List_Bool$jfm

data Proxy_Ord48$jfn  = Proxy$je1 

data Proxy_HashDotbits$jfo  = Proxy$je2 

data Proxy_Ord56$jfp  = Proxy$je3 

data Proxy_Ord504$jfq  = Proxy$je4 

data Proxy_Ord49$jfr  = Proxy$je5 

data Proxy_Ord490000000$jfs  = Proxy$je6 

data Proxy_Ord4900$jft  = Proxy$je7 

data Ordering  = LT  | EQ  | GT 

data Proxy_Ord490$jfu  = Proxy$je8 

data Proxy_Ord528$jfv  = Proxy$je9 

data Proxy_Ord535$jfw  = Proxy$jea 

data Proxy_Ord495$jfx  = Proxy$jeb 

data Proxy_Ord52$jfy  = Proxy$jec 

data Proxy_Ord496$jfz  = Proxy$jed 

data List_Bit32$jg0  = Nil$jee  | Cons$jef (Bit 32) List_Bit32$jg0

data List_Unsigned$jg1  = Nil$jeg  | Cons$jeh Unsigned List_Unsigned$jg1

data Proxy_Ord50$jg2  = Proxy$jei 

data Sum_ExprLParenConstColonPlusColonSumRParen$jg3  = Sum$jej Expr_ConstColonPlusColonSum$jg4
    Expr_ConstColonPlusColonSum$jg4

data Expr_ConstColonPlusColonSum$jg4  = In$jek ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6

data Const_ExprLParenConstColonPlusColonSumRParen$jg5  = Const$jel Unsigned

data ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6  = Inl$jem Const_ExprLParenConstColonPlusColonSumRParen$jg5
    | Inr$jen Sum_ExprLParenConstColonPlusColonSumRParen$jg3

data Proxy_Ord51$jg7  = Proxy$jeo 

data ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8  = Inl$jep Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga
    | Inr$jeq Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9

data Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9  = Product$jer Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
    Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb

data Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga  = Sum$jes Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
    Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb

data Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb  = In$jet ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge

data Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc  = Const$jeu Unsigned

data ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd  = Inl$jev Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc
    | Inr$jew Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga

data ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge  = Inl$jex ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd
    | Inr$jey Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9

data ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf  = Inl$jez Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq
    | Inr$jf0 Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo

data ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg  = Inl$jf1 Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt
    | Inr$jf2 ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf

data Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh  = Product$jf3 Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
    Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm

data Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi  = Sum$jf4 Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
    Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm

data ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj  = Inl$jf5 Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi
    | Inr$jf6 Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh

data Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk  = Const$jf7 Unsigned

data ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl  = Inl$jf8 Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk
    | Inr$jf9 ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj

data Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm  = In$jfa ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl

data Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn  = Double$jfb Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs

data Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo  = Product$jfc Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
    Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs

data ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp  = Inl$jfd Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo
    | Inr$jfe Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn

data Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq  = Sum$jff Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
    Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs

data ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr  = Inl$jfg Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq
    | Inr$jfh ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp

data Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs  = In$jfi ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu

bitdata Unsigned/32 = Unsigned [bits :: Bit 32 {- width = 32, offset = 0 -}]

data Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt  = Const$jfj Unsigned

data ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu  = Inl$jfk Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt
    | Inr$jfl ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr

AmpAmp :: Bool -> Bool -> Bool
AmpAmp = \ (x$43 :: Bool) -> \ (x$44 :: Bool) -> ((case x$43 of
                                                     True -> x$44) | (False))
PipePipe :: Bool -> Bool -> Bool
PipePipe = \ (x$45 :: Bool) -> \ (x$46 :: Bool) -> ((case x$45 of
                                                       True -> True) | (x$46))
pmNot :: Bool -> Bool
pmNot = \ (x$47 :: Bool) -> ((case x$47 of
                                False -> True) | (case x$47 of
                                                    True -> False))
and :: List_Bool$jfm -> Bool
and = \ (x$akk :: List_Bool$jfm) -> ((case x$akk of
                                        Nil$jdz -> True) | (case x$akk of
                                                              Cons$je0 x$ahp xs$ahq -> ((case x$ahp of
                                                                                           True -> (and xs$ahq)) | (False))))
or :: List_Bool$jfm -> Bool
or = \ (x$akl :: List_Bool$jfm) -> ((case x$akl of
                                       Nil$jdz -> False) | (case x$akl of
                                                              Cons$je0 x$ahr xs$ahs -> ((case x$ahr of
                                                                                           False -> (or xs$ahs)) | (True))))
primReturnM$iwp :: Unit -> M Unit
primReturnM$iwp = \ (x :: Unit) -> primRet x
external primBitFromLiteral$iwt {primBitFromLiteral 0 32} :: Proxy_Ord48$jfn -> Bit 32
fromLiteral$iwq :: Proxy_Ord48$jfn -> Unsigned
fromLiteral$iwq = \ (x$a4 :: Proxy_Ord48$jfn) -> Unsigned[bits = (primBitFromLiteral$iwt x$a4)]
primReturnM$iwv :: Bool -> M Bool
primReturnM$iwv = \ (x :: Bool) -> primRet x
bitdataSelect$ixb :: Unsigned.Unsigned -> Proxy_HashDotbits$jfo -> Bit 32
bitdataSelect$ixb = \ (Dollarx :: Unsigned.Unsigned) -> \ (Dollary :: Proxy_HashDotbits$jfo) -> Dollarx.bits
select$ix8 :: Unsigned -> Proxy_HashDotbits$jfo -> Bit 32
select$ix8 = \ (Dollarr :: Unsigned) -> \ (Dollarf :: Proxy_HashDotbits$jfo) -> case Dollarr of
                                                                                  Unsigned Dollarv -> ((bitdataSelect$ixb Dollarv) Dollarf)
external primBitEq$ixd {primBitEq 32} :: Bit 32 -> Bit 32 -> Bool
EqEq$ix5 :: Unsigned -> Unsigned -> Bool
EqEq$ix5 = \ (x$a1 :: Unsigned) -> \ (x$a2 :: Unsigned) -> ((primBitEq$ixd (((select$ix8 x$a1) (Proxy$je2)))) (((select$ix8 x$a2) (Proxy$je2))))
external primIxFromLiteral$ixf {primIxFromLiteral 8 32} :: Proxy_Ord56$jfp -> Ix 32
external primIxFromLiteral$ixh {primIxFromLiteral 16 32} :: Proxy_Ord496$jfz -> Ix 32
external primIxFromLiteral$ixj {primIxFromLiteral 24 32} :: Proxy_Ord504$jfq -> Ix 32
external primBitShiftL$ixn {primBitShiftL 32} :: Bit 32 -> Ix 32 -> Bit 32
shiftL$ixm :: Bit 32 -> Ix 32 -> Bit 32
shiftL$ixm = \ (x$82 :: Bit 32) -> \ (x$83 :: Ix 32) -> ((primBitShiftL$ixn x$82) x$83)
shiftL$ixk :: Unsigned -> Ix 32 -> Unsigned
shiftL$ixk = \ (x$89 :: Unsigned) -> \ (x$8a :: Ix 32) -> Unsigned[bits = ((shiftL$ixm (((select$ix8 x$89) (Proxy$je2)))) x$8a)]
external primBitPlus$ixr {primBitPlus 32} :: Bit 32 -> Bit 32 -> Bit 32
Plus$ixo :: Unsigned -> Unsigned -> Unsigned
Plus$ixo = \ (x$5x :: Unsigned) -> \ (x$5y :: Unsigned) -> Unsigned[bits = ((primBitPlus$ixr (((select$ix8 x$5x) (Proxy$je2)))) (((select$ix8 x$5y) (Proxy$je2))))]
external primBitFromLiteral$ixv {primBitFromLiteral 1 32} :: Proxy_Ord49$jfr -> Bit 32
fromLiteral$ixs :: Proxy_Ord49$jfr -> Unsigned
fromLiteral$ixs = \ (x$a4 :: Proxy_Ord49$jfr) -> Unsigned[bits = (primBitFromLiteral$ixv x$a4)]
external primBitNegate$ixz {primBitNegate 32} :: Bit 32 -> Bit 32
negate$ixw :: Unsigned -> Unsigned
negate$ixw = \ (x$63 :: Unsigned) -> Unsigned[bits = (primBitNegate$ixz (((select$ix8 x$63) (Proxy$je2))))]
primReturnM$iy1 :: Unsigned -> M Unsigned
primReturnM$iy1 = \ (x :: Unsigned) -> primRet x
external primBitFromLiteral$iyg {primBitFromLiteral 10000000 32} :: Proxy_Ord490000000$jfs -> Bit 32
fromLiteral$iyd :: Proxy_Ord490000000$jfs -> Unsigned
fromLiteral$iyd = \ (x$a4 :: Proxy_Ord490000000$jfs) -> Unsigned[bits = (primBitFromLiteral$iyg x$a4)]
external primBitFromLiteral$iyk {primBitFromLiteral 100 32} :: Proxy_Ord4900$jft -> Bit 32
fromLiteral$iyh :: Proxy_Ord4900$jft -> Unsigned
fromLiteral$iyh = \ (x$a4 :: Proxy_Ord4900$jft) -> Unsigned[bits = (primBitFromLiteral$iyk x$a4)]
external primBitLe$iyu {primBitLe 32} :: Bit 32 -> Bit 32 -> Bool
compare$def$iyr :: Bit 32 -> Bit 32 -> Ordering
compare$def$iyr = \ (x$4z :: Bit 32) -> \ (x$50 :: Bit 32) -> ((let condition$4k :: Bool
                                                                    condition$4k = ((primBitEq$ixd x$4z) x$50)
                                                                in case condition$4k of
                                                                     True -> EQ) | (((let condition$4l :: Bool
                                                                                          condition$4l = ((primBitLe$iyu x$4z) x$50)
                                                                                      in case condition$4l of
                                                                                           True -> LT) | (case True of
                                                                                                            True -> GT))))
GtEq$def$iyo :: Bit 32 -> Bit 32 -> Bool
GtEq$def$iyo = \ (x$4r :: Bit 32) -> \ (x$4s :: Bit 32) -> let scrutinee$4g :: Ordering
                                                               scrutinee$4g = ((compare$def$iyr x$4r) x$4s)
                                                           in ((case scrutinee$4g of
                                                                  LT -> False) | (True))
GtEq$iyl :: Unsigned -> Unsigned -> Bool
GtEq$iyl = \ (x$ay :: Unsigned) -> \ (x$az :: Unsigned) -> ((GtEq$def$iyo (((select$ix8 x$ay) (Proxy$je2)))) (((select$ix8 x$az) (Proxy$je2))))
external primBitTimes$iyy {primBitTimes 32} :: Bit 32 -> Bit 32 -> Bit 32
Star$iyv :: Unsigned -> Unsigned -> Unsigned
Star$iyv = \ (x$61 :: Unsigned) -> \ (x$62 :: Unsigned) -> Unsigned[bits = ((primBitTimes$iyy (((select$ix8 x$61) (Proxy$je2)))) (((select$ix8 x$62) (Proxy$je2))))]
external primBitMinus$iz2 {primBitMinus 32} :: Bit 32 -> Bit 32 -> Bit 32
Dash$iyz :: Unsigned -> Unsigned -> Unsigned
Dash$iyz = \ (x$5z :: Unsigned) -> \ (x$60 :: Unsigned) -> Unsigned[bits = ((primBitMinus$iz2 (((select$ix8 x$5z) (Proxy$je2)))) (((select$ix8 x$60) (Proxy$je2))))]
external primModIx$iz4 {primModIx 32 10} :: Bit 32 -> Ix 10
modIx$iz3 :: Unsigned -> Ix 10
modIx$iz3 = \ (x$94 :: Unsigned) -> (primModIx$iz4 (((select$ix8 x$94) (Proxy$je2))))
external primIxToBit$iz6 {primIxToBit 10 32} :: Ix 10 -> Bit 32
unsigned$iz5 :: Ix 10 -> Unsigned
unsigned$iz5 = \ (x$ae :: Ix 10) -> Unsigned[bits = (primIxToBit$iz6 x$ae)]
external primBitFromLiteral$iza {primBitFromLiteral 10 32} :: Proxy_Ord490$jfu -> Bit 32
fromLiteral$iz7 :: Proxy_Ord490$jfu -> Unsigned
fromLiteral$iz7 = \ (x$a4 :: Proxy_Ord490$jfu) -> Unsigned[bits = (primBitFromLiteral$iza x$a4)]
external primBitLt$ize {primBitLt 32} :: Bit 32 -> Bit 32 -> Bool
Lt$izb :: Unsigned -> Unsigned -> Bool
Lt$izb = \ (x$as :: Unsigned) -> \ (x$at :: Unsigned) -> ((primBitLt$ize (((select$ix8 x$as) (Proxy$je2)))) (((select$ix8 x$at) (Proxy$je2))))
external primBitFromLiteral$izi {primBitFromLiteral 48 32} :: Proxy_Ord528$jfv -> Bit 32
fromLiteral$izf :: Proxy_Ord528$jfv -> Unsigned
fromLiteral$izf = \ (x$a4 :: Proxy_Ord528$jfv) -> Unsigned[bits = (primBitFromLiteral$izi x$a4)]
external primBitFromLiteral$izn {primBitFromLiteral 55 32} :: Proxy_Ord535$jfw -> Bit 32
fromLiteral$izk :: Proxy_Ord535$jfw -> Unsigned
fromLiteral$izk = \ (x$a4 :: Proxy_Ord535$jfw) -> Unsigned[bits = (primBitFromLiteral$izn x$a4)]
external primBitFromLiteral$izw {primBitFromLiteral 15 32} :: Proxy_Ord495$jfx -> Bit 32
fromLiteral$izt :: Proxy_Ord495$jfx -> Unsigned
fromLiteral$izt = \ (x$a4 :: Proxy_Ord495$jfx) -> Unsigned[bits = (primBitFromLiteral$izw x$a4)]
external primBitAnd$j00 {primBitAnd 32} :: Bit 32 -> Bit 32 -> Bit 32
DotAmpDot$izx :: Unsigned -> Unsigned -> Unsigned
DotAmpDot$izx = \ (x$7m :: Unsigned) -> \ (x$7n :: Unsigned) -> Unsigned[bits = ((primBitAnd$j00 (((select$ix8 x$7m) (Proxy$je2)))) (((select$ix8 x$7n) (Proxy$je2))))]
external primIxFromLiteral$j02 {primIxFromLiteral 4 32} :: Proxy_Ord52$jfy -> Ix 32
external primBitShiftRu$j06 {primBitShiftRu 32} :: Bit 32 -> Ix 32 -> Bit 32
shiftR$j05 :: Bit 32 -> Ix 32 -> Bit 32
shiftR$j05 = \ (x$84 :: Bit 32) -> \ (x$85 :: Ix 32) -> ((primBitShiftRu$j06 x$84) x$85)
shiftR$j03 :: Unsigned -> Ix 32 -> Unsigned
shiftR$j03 = \ (x$8b :: Unsigned) -> \ (x$8c :: Ix 32) -> Unsigned[bits = ((shiftR$j05 (((select$ix8 x$8b) (Proxy$je2)))) x$8c)]
external primBitFromLiteral$j0a {primBitFromLiteral 16 32} :: Proxy_Ord496$jfz -> Bit 32
fromLiteral$j07 :: Proxy_Ord496$jfz -> Unsigned
fromLiteral$j07 = \ (x$a4 :: Proxy_Ord496$jfz) -> Unsigned[bits = (primBitFromLiteral$j0a x$a4)]
primReturnM$j0d :: List_Bit32$jg0 -> M List_Bit32$jg0
primReturnM$j0d = \ (x :: List_Bit32$jg0) -> primRet x
external getchar {getchar} :: M Unsigned
getint :: M Unsigned
getint = do x0$d3n <- getchar;
            let condition$d4m :: Bool
                condition$d4m = ((EqEq$ix5 x0$d3n) ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))
            in ((case condition$d4m of
                   True -> (primReturnM$iy1 ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))) | (do x1$d3o <- getchar;
                                                                                                   let condition$d4l :: Bool
                                                                                                       condition$d4l = ((EqEq$ix5 x1$d3o) ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))
                                                                                                   in ((case condition$d4l of
                                                                                                          True -> (primReturnM$iy1 ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))) | (do x2$d3p <- getchar;
                                                                                                                                                                                          let condition$d4k :: Bool
                                                                                                                                                                                              condition$d4k = ((EqEq$ix5 x2$d3p) ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))
                                                                                                                                                                                          in ((case condition$d4k of
                                                                                                                                                                                                 True -> (primReturnM$iy1 ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))) | (do x3$d3q <- getchar;
                                                                                                                                                                                                                                                                                 let condition$d4j :: Bool
                                                                                                                                                                                                                                                                                     condition$d4j = ((EqEq$ix5 x3$d3q) ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))
                                                                                                                                                                                                                                                                                 in ((case condition$d4j of
                                                                                                                                                                                                                                                                                        True -> (primReturnM$iy1 ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))) | ((primReturnM$iy1 (((Plus$ixo (((shiftL$ixk x3$d3q) ((primIxFromLiteral$ixj (Proxy$je4)))))) (((Plus$ixo (((shiftL$ixk x2$d3p) ((primIxFromLiteral$ixh (Proxy$jed)))))) (((Plus$ixo (((shiftL$ixk x1$d3o) ((primIxFromLiteral$ixf (Proxy$je3)))))) x0$d3n)))))))))))))))
readInts :: M List_Bit32$jg0
readInts = do x$d42 <- getint;
              let condition$d5n :: Bool
                  condition$d5n = ((EqEq$ix5 x$d42) ((negate$ixw ((fromLiteral$ixs (Proxy$je5))))))
              in ((case condition$d5n of
                     True -> (primReturnM$j0d (Nil$jee))) | (do xs$d43 <- readInts;
                                                                (primReturnM$j0d (((Cons$jef (((select$ix8 x$d42) (Proxy$je2)))) xs$d43)))))
external putchar {putchar} :: Unsigned -> M Unsigned
putStr :: List_Unsigned$jg1 -> M Unsigned
putStr = \ (x$d5t :: List_Unsigned$jg1) -> ((case x$d5t of
                                               Nil$jeg -> (primReturnM$iy1 ((fromLiteral$iwq (Proxy$je1))))) | (case x$d5t of
                                                                                                                  Cons$jeh x$d44 xs$d45 -> do x$d5p <- (putchar x$d44);
                                                                                                                                              (putStr xs$d45)))
putLine :: M Unsigned
putLine = do x$d41 <- (primReturnM$iwp (Unit));
             (putchar ((fromLiteral$iz7 (Proxy$je8))))
putHexChar :: Unsigned -> M Unsigned
putHexChar = \ (x$d5r :: Unsigned) -> ((let condition$d5b :: Bool
                                            condition$d5b = ((Lt$izb x$d5r) ((fromLiteral$iz7 (Proxy$je8))))
                                        in case condition$d5b of
                                             True -> (putchar (((Plus$ixo x$d5r) ((fromLiteral$izf (Proxy$je9))))))) | (case True of
                                                                                                                          True -> (putchar (((Plus$ixo x$d5r) ((fromLiteral$izk (Proxy$jea))))))))
putHexInt :: Unsigned -> M Unit
putHexInt = \ (x$d5s :: Unsigned) -> ((let condition$d5i :: Bool
                                           condition$d5i = ((Lt$izb x$d5s) ((fromLiteral$j07 (Proxy$jed))))
                                       in case condition$d5i of
                                            True -> do x$d5e <- (putHexChar x$d5s);
                                                       (primReturnM$iwp (Unit))) | (case True of
                                                                                      True -> do x$d5f <- (putHexInt (((shiftR$j03 x$d5s) ((primIxFromLiteral$j02 (Proxy$jec))))));
                                                                                                 (putHexInt (((DotAmpDot$izx x$d5s) ((fromLiteral$izt (Proxy$jeb))))))))
putint :: Unsigned -> M Unit
putint = \ (x$d5q :: Unsigned) -> let mod10$d3t :: (Unsigned -> Unsigned)
                                      mod10$d3t = \ (x$d50 :: Unsigned) -> (unsigned$iz5 (let x$d4n :: Ix 10
                                                                                              x$d4n = (modIx$iz3 x$d50)
                                                                                          in x$d4n))
                                      div10$d3s :: (Unsigned -> Unsigned)
                                      div10$d3s = \ (x$d51 :: Unsigned) -> let maxK$iya :: Unsigned
                                                                               maxK$iya = (fromLiteral$iyd (Proxy$je6))
                                                                               f$d3w :: (Unsigned -> Unsigned)
                                                                               f$d3w = \ (x$d4u :: Unsigned) -> let condition$d4s :: Bool
                                                                                                                    condition$d4s = let scrutinee$d4o :: Bool
                                                                                                                                        scrutinee$d4o = ((Lt$izb x$d51) (((Star$iyv ((fromLiteral$iyh (Proxy$je7)))) x$d4u)))
                                                                                                                                    in ((case scrutinee$d4o of
                                                                                                                                           False -> ((GtEq$iyl x$d4u) maxK$iya)) | (True))
                                                                                                                in ((case condition$d4s of
                                                                                                                       True -> ((Plus$ixo x$d4u) ((div10$d3s (((Dash$iyz x$d51) (((Star$iyv ((fromLiteral$iz7 (Proxy$je8)))) x$d4u)))))))) | ((f$d3w (((Star$iyv x$d4u) ((fromLiteral$iz7 (Proxy$je8))))))))
                                                                           in ((let condition$d4y :: Bool
                                                                                    condition$d4y = ((Lt$izb x$d51) ((fromLiteral$iz7 (Proxy$je8))))
                                                                                in case condition$d4y of
                                                                                     True -> (fromLiteral$iwq (Proxy$je1))) | (case True of
                                                                                                                                 True -> (f$d3w ((fromLiteral$ixs (Proxy$je5))))))
                                  in ((let condition$d56 :: Bool
                                           condition$d56 = ((Lt$izb x$d5q) ((fromLiteral$iz7 (Proxy$je8))))
                                       in case condition$d56 of
                                            True -> do x$d53 <- (putchar (((Plus$ixo x$d5q) ((fromLiteral$izf (Proxy$je9))))));
                                                       (primReturnM$iwp (Unit))) | (case True of
                                                                                      True -> do x$d55 <- (putint ((div10$d3s x$d5q)));
                                                                                                 (putint ((mod10$d3t x$d5q)))))
external fflush {fflush} :: Unsigned -> M Unsigned
flush :: M Unit
flush = do b$d3m <- (primReturnM$iwv True);
           x$d46 <- (fflush ((fromLiteral$iwq (Proxy$je1))));
           (primReturnM$iwp (Unit))
external primBitFromLiteral$j0m {primBitFromLiteral 2 32} :: Proxy_Ord50$jg2 -> Bit 32
fromLiteral$j0j :: Proxy_Ord50$jg2 -> Unsigned
fromLiteral$j0j = \ (x$a4 :: Proxy_Ord50$jg2) -> Unsigned[bits = (primBitFromLiteral$j0m x$a4)]
id$j0s :: Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> Const_ExprLParenConstColonPlusColonSumRParen$jg5
id$j0s = \ (x$4a :: Const_ExprLParenConstColonPlusColonSumRParen$jg5) -> x$4a
compose$j0p :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6) -> (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> Const_ExprLParenConstColonPlusColonSumRParen$jg5) -> Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6
compose$j0p = \ (x$eqt :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6)) -> \ (x$equ :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> Const_ExprLParenConstColonPlusColonSumRParen$jg5)) -> \ (x$eqv :: Const_ExprLParenConstColonPlusColonSumRParen$jg5) -> (x$eqt ((x$equ x$eqv)))
inj$j0o :: Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6
inj$j0o = \ (eta$x :: Const_ExprLParenConstColonPlusColonSumRParen$jg5) -> (((compose$j0p (Inl$jem)) id$j0s) eta$x)
const_$j0h :: Unsigned -> Expr_ConstColonPlusColonSum$jg4
const_$j0h = \ (x$eqz :: Unsigned) -> (In$jek ((inj$j0o ((Const$jel x$eqz)))))
id$j0y :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> Sum_ExprLParenConstColonPlusColonSumRParen$jg3
id$j0y = \ (x$4a :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3) -> x$4a
compose$j0v :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6) -> (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> Sum_ExprLParenConstColonPlusColonSumRParen$jg3) -> Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6
compose$j0v = \ (x$eqt :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> Sum_ExprLParenConstColonPlusColonSumRParen$jg3)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3) -> (x$eqt ((x$equ x$eqv)))
inj$j0u :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6
inj$j0u = \ (eta$x :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3) -> (((compose$j0v (Inr$jen)) id$j0y) eta$x)
sum_$j0g :: Expr_ConstColonPlusColonSum$jg4 -> Expr_ConstColonPlusColonSum$jg4 -> Expr_ConstColonPlusColonSum$jg4
sum_$j0g = \ (x$er0 :: Expr_ConstColonPlusColonSum$jg4) -> \ (x$er1 :: Expr_ConstColonPlusColonSum$jg4) -> (In$jek ((inj$j0u (((Sum$jej x$er0) x$er1)))))
one$j0f :: Expr_ConstColonPlusColonSum$jg4
one$j0f = ((sum_$j0g ((const_$j0h ((fromLiteral$ixs (Proxy$je5)))))) ((const_$j0h ((fromLiteral$j0j (Proxy$jei))))))
evalConst$j12 :: Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned
evalConst$j12 = \ (x$er4 :: Const_ExprLParenConstColonPlusColonSumRParen$jg5) -> \ (x$er5 :: (Expr_ConstColonPlusColonSum$jg4 -> Unsigned)) -> case x$er4 of
                                                                                                                                                 Const$jel u$eph -> u$eph
evalSum$j11 :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned
evalSum$j11 = \ (x$er6 :: Sum_ExprLParenConstColonPlusColonSumRParen$jg3) -> \ (x$er7 :: (Expr_ConstColonPlusColonSum$jg4 -> Unsigned)) -> case x$er6 of
                                                                                                                                             Sum$jej x$epj y$epk -> ((Plus$ixo ((x$er7 x$epj))) ((x$er7 y$epk)))
LtQuestGt$j14 :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned) -> (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned
LtQuestGt$j14 = \ (x$eqw :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6) -> ((case x$eqy of
                                                                                                                                                                                                                                                                                                                                                                      Inl$jem x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
                                                                                                                                                                                                                                                                                                                                                                                                           Inr$jen x$epa -> (x$eqx x$epa)))
Quest$j13 :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned) -> (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned
Quest$j13 = \ (x$erh :: (Sum_ExprLParenConstColonPlusColonSumRParen$jg3 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned)) -> \ (x$eri :: (Const_ExprLParenConstColonPlusColonSumRParen$jg5 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j14 x$eri) x$erh)
cases$j0z :: (ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned) -> Expr_ConstColonPlusColonSum$jg4 -> Unsigned
cases$j0z = \ (x$era :: (ColonPlusColon_Const_Sum_ExprLParenConstColonPlusColonSumRParen$jg6 -> (Expr_ConstColonPlusColonSum$jg4 -> Unsigned) -> Unsigned)) -> let f$epp :: (Expr_ConstColonPlusColonSum$jg4 -> Unsigned)
                                                                                                                                                                   f$epp = \ (x$eqm :: Expr_ConstColonPlusColonSum$jg4) -> case x$eqm of
                                                                                                                                                                                                                             In$jek e$epq -> ((x$era e$epq) f$epp)
                                                                                                                                                               in f$epp
evalOne$j0e :: Expr_ConstColonPlusColonSum$jg4 -> Unsigned
evalOne$j0e = \ (eta$x :: Expr_ConstColonPlusColonSum$jg4) -> ((cases$j0z (((Quest$j13 evalSum$j11) evalConst$j12))) eta$x)
x :: Unsigned
x = (evalOne$j0e one$j0f)
external primBitFromLiteral$j1e {primBitFromLiteral 3 32} :: Proxy_Ord51$jg7 -> Bit 32
fromLiteral$j1b :: Proxy_Ord51$jg7 -> Unsigned
fromLiteral$j1b = \ (x$a4 :: Proxy_Ord51$jg7) -> Unsigned[bits = (primBitFromLiteral$j1e x$a4)]
id$j1k :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9
id$j1k = \ (x$4a :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> x$4a
compose$j1h :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge) -> (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
compose$j1h = \ (x$eqt :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge)) -> \ (x$equ :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9)) -> \ (x$eqv :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> (x$eqt ((x$equ x$eqv)))
inj$j1g :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
inj$j1g = \ (eta$x :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> (((compose$j1h (Inr$jey)) id$j1k) eta$x)
product_$j19 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
product_$j19 = \ (x$er2 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> \ (x$er3 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> (In$jet ((inj$j1g (((Product$jer x$er2) x$er3)))))
id$j1t :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc
id$j1t = \ (x$4a :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> x$4a
compose$j1q :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd) -> (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd
compose$j1q = \ (x$eqt :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd)) -> \ (x$equ :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc)) -> \ (x$eqv :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> (x$eqt ((x$equ x$eqv)))
inj$j1p :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd
inj$j1p = \ (eta$x :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> (((compose$j1q (Inl$jev)) id$j1t) eta$x)
compose$j1n :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge) -> (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd) -> Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
compose$j1n = \ (x$eqt :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge)) -> \ (x$equ :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd)) -> \ (x$eqv :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> (x$eqt ((x$equ x$eqv)))
inj$j1m :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
inj$j1m = \ (eta$x :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> (((compose$j1n (Inl$jex)) inj$j1p) eta$x)
const_$j18 :: Unsigned -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
const_$j18 = \ (x$eqz :: Unsigned) -> (In$jet ((inj$j1m ((Const$jeu x$eqz)))))
id$j22 :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga
id$j22 = \ (x$4a :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> x$4a
compose$j1z :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd) -> (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd
compose$j1z = \ (x$eqt :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd)) -> \ (x$equ :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga)) -> \ (x$eqv :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> (x$eqt ((x$equ x$eqv)))
inj$j1y :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd
inj$j1y = \ (eta$x :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> (((compose$j1z (Inr$jew)) id$j22) eta$x)
compose$j1w :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge) -> (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd) -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
compose$j1w = \ (x$eqt :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge)) -> \ (x$equ :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd)) -> \ (x$eqv :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> (x$eqt ((x$equ x$eqv)))
inj$j1v :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge
inj$j1v = \ (eta$x :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> (((compose$j1w (Inl$jex)) inj$j1y) eta$x)
sum_$j17 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
sum_$j17 = \ (x$er0 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> \ (x$er1 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> (In$jet ((inj$j1v (((Sum$jes x$er0) x$er1)))))
two$j16 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb
two$j16 = ((sum_$j17 ((const_$j18 ((fromLiteral$ixs (Proxy$je5)))))) (((product_$j19 ((const_$j18 ((fromLiteral$j0j (Proxy$jei)))))) ((const_$j18 ((fromLiteral$j1b (Proxy$jeo))))))))
evalProduct$j28 :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
evalProduct$j28 = \ (x$er8 :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> \ (x$er9 :: (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned)) -> case x$er8 of
                                                                                                                                                                                                                       Product$jer x$epm y$epn -> ((Star$iyv ((x$er9 x$epm))) ((x$er9 y$epn)))
evalSum$j27 :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
evalSum$j27 = \ (x$er6 :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> \ (x$er7 :: (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned)) -> case x$er6 of
                                                                                                                                                                                                               Sum$jes x$epj y$epk -> ((Plus$ixo ((x$er7 x$epj))) ((x$er7 y$epk)))
LtQuestGt$j2a :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
LtQuestGt$j2a = \ (x$eqw :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8) -> ((case x$eqy of
nl$jep x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jeq x$epa -> (x$eqx x$epa)))
Quest$j29 :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
Quest$j29 = \ (x$erf :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$erg :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j2a x$erf) x$erg)
evalConst$j25 :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
evalConst$j25 = \ (x$er4 :: Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc) -> \ (x$er5 :: (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned)) -> case x$er4 of
                                                                                                                                                                                                                   Const$jeu u$eph -> u$eph
compose$j2f :: (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8) -> Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
compose$j2f = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$equ :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8)) -> \ (x$eqv :: Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9) -> (x$eqt ((x$equ x$eqv)))
compose$j2e :: (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8) -> Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
compose$j2e = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$equ :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8)) -> \ (x$eqv :: Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga) -> (x$eqt ((x$equ x$eqv)))
LtQuestGt$j2h :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
LtQuestGt$j2h = \ (x$eqw :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd) -> ((case x$eqy of
nl$jev x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jew x$epa -> (x$eqx x$epa)))
Quest$j2g :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
Quest$j2g = \ (x$erf :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$erg :: (Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jga -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j2h x$erf) x$erg)
LtQuestGt$j2c :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
LtQuestGt$j2c = \ (x$eqw :: (ColonPlusColon_Const_Sum_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgd -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg9 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge) -> ((case x$eqy of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Inl$jex x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jey x$epa -> (x$eqx x$epa)))
Quest$j2b :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned
Quest$j2b = \ (x$erj :: (Const_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jgc -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> \ (x$erk :: (ColonPlusColon_Sum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jg8 -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j2c (((Quest$j2g x$erj) (((compose$j2e x$erk) (Inl$jep)))))) (((compose$j2f x$erk) (Inr$jeq))))
cases$j23 :: (ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned) -> Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned
cases$j23 = \ (x$era :: (ColonPlusColon_ConstColonPlusColonSum_Product_ExprLParenLParenConstColonPlusColonSumRParenColonPlusColonProductRParen$jge -> (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned) -> Unsigned)) -> let f$epp :: (Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned)
                                                                                                                                                                                                                                                          f$epp = \ (x$eqm :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> case x$eqm of
                                                                                                                                                                                                                                                                                                                                                     In$jet e$epq -> ((x$era e$epq) f$epp)
                                                                                                                                                                                                                                                      in f$epp
evalTwo$j15 :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb -> Unsigned
evalTwo$j15 = \ (eta$x :: Expr_LParenConstColonPlusColonSumRParenColonPlusColonProduct$jgb) -> ((cases$j23 (((Quest$j2b evalConst$j25) (((Quest$j29 evalSum$j27) evalProduct$j28))))) eta$x)
y :: Unsigned
y = (evalTwo$j15 two$j16)
id$j2v :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh
id$j2v = \ (x$4a :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> x$4a
compose$j2s :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj
compose$j2s = \ (x$eqt :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj)) -> \ (x$equ :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh)) -> \ (x$eqv :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> (x$eqt ((x$equ x$eqv)))
inj$j2r :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj
inj$j2r = \ (eta$x :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> (((compose$j2s (Inr$jf6)) id$j2v) eta$x)
compose$j2p :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj) -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
compose$j2p = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl)) -> \ (x$equ :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj)) -> \ (x$eqv :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> (x$eqt ((x$equ x$eqv)))
inj$j2o :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
inj$j2o = \ (eta$x :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> (((compose$j2p (Inr$jf9)) inj$j2r) eta$x)
product_$j2m :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
product_$j2m = \ (x$er2 :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> \ (x$er3 :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (In$jfa ((inj$j2o (((Product$jf3 x$er2) x$er3)))))
id$j31 :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk
id$j31 = \ (x$4a :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk) -> x$4a
compose$j2y :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk) -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
compose$j2y = \ (x$eqt :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl)) -> \ (x$equ :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk)) -> \ (x$eqv :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk) -> (x$eqt ((x$equ x$eqv)))
inj$j2x :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
inj$j2x = \ (eta$x :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk) -> (((compose$j2y (Inl$jf8)) id$j31) eta$x)
const_$j2l :: Unsigned -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
const_$j2l = \ (x$eqz :: Unsigned) -> (In$jfa ((inj$j2x ((Const$jf7 x$eqz)))))
id$j3a :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi
id$j3a = \ (x$4a :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> x$4a
compose$j37 :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj) -> (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj
compose$j37 = \ (x$eqt :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> (x$eqt ((x$equ x$eqv)))
inj$j36 :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj
inj$j36 = \ (eta$x :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> (((compose$j37 (Inl$jf5)) id$j3a) eta$x)
compose$j34 :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
compose$j34 = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> (x$eqt ((x$equ x$eqv)))
inj$j33 :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
inj$j33 = \ (eta$x :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> (((compose$j34 (Inr$jf9)) inj$j36) eta$x)
sum_$j2k :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
sum_$j2k = \ (x$er0 :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> \ (x$er1 :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (In$jfa ((inj$j33 (((Sum$jf4 x$er0) x$er1)))))
three$j2j :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
three$j2j = ((sum_$j2k ((const_$j2l ((fromLiteral$ixs (Proxy$je5)))))) (((product_$j2m ((const_$j2l ((fromLiteral$j0j (Proxy$jei)))))) ((const_$j2l ((fromLiteral$j1b (Proxy$jeo))))))))
evalProduct$j3g :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
evalProduct$j3g = \ (x$er8 :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh) -> \ (x$er9 :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned)) -> case x$er8 of
                                                                                                                                                                                               Product$jf3 x$epm y$epn -> ((Star$iyv ((x$er9 x$epm))) ((x$er9 y$epn)))
evalSum$j3f :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
evalSum$j3f = \ (x$er6 :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi) -> \ (x$er7 :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned)) -> case x$er6 of
                                                                                                                                                                                       Sum$jf4 x$epj y$epk -> ((Plus$ixo ((x$er7 x$epj))) ((x$er7 y$epk)))
LtQuestGt$j3i :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
LtQuestGt$j3i = \ (x$eqw :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj) -> ((case x$eqy of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Inl$jf5 x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jf6 x$epa -> (x$eqx x$epa)))
Quest$j3h :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
Quest$j3h = \ (x$erf :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$erg :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j3i x$erf) x$erg)
evalConst$j3d :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
evalConst$j3d = \ (x$er4 :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk) -> \ (x$er5 :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned)) -> case x$er4 of
                                                                                                                                                                                           Const$jf7 u$eph -> u$eph
LtQuestGt$j3k :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
LtQuestGt$j3k = \ (x$eqw :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$eqx :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$eqy :: ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> ((case x$eqy of
nl$jf8 x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Inr$jf9 x$epa -> (x$eqx x$epa)))
Quest$j3j :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned
Quest$j3j = \ (x$erf :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> \ (x$erg :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> ((LtQuestGt$j3k x$erf) x$erg)
cases$j3b :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned
cases$j3b = \ (x$era :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned) -> Unsigned)) -> let f$epp :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned)
                                                                                                                                                                                                                                  f$epp = \ (x$eqm :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> case x$eqm of
                                                                                                                                                                                                                                                                                                                 In$jfa e$epq -> ((x$era e$epq) f$epp)
                                                                                                                                                                                                                              in f$epp
evalTwo$j2i :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> Unsigned
evalTwo$j2i = \ (eta$x :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ((cases$j3b (((Quest$j3j evalConst$j3d) (((Quest$j3h evalSum$j3f) evalProduct$j3g))))) eta$x)
z :: Unsigned
z = (evalTwo$j2i three$j2j)
id$j41 :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn
id$j41 = \ (x$4a :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> x$4a
compose$j3y :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp) -> (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp
compose$j3y = \ (x$eqt :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp)) -> \ (x$equ :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn)) -> \ (x$eqv :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (x$eqt ((x$equ x$eqv)))
inj$j3x :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp
inj$j3x = \ (eta$x :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (((compose$j3y (Inr$jfe)) id$j41) eta$x)
compose$j3v :: (ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr) -> (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp) -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr
compose$j3v = \ (x$eqt :: (ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr)) -> \ (x$equ :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp)) -> \ (x$eqv :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (x$eqt ((x$equ x$eqv)))
inj$j3u :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr
inj$j3u = \ (eta$x :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (((compose$j3v (Inr$jfh)) inj$j3x) eta$x)
compose$j3s :: (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu) -> (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr) -> Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
compose$j3s = \ (x$eqt :: (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu)) -> \ (x$equ :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr)) -> \ (x$eqv :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (x$eqt ((x$equ x$eqv)))
inj$j3r :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
inj$j3r = \ (eta$x :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> (((compose$j3s (Inr$jfl)) inj$j3u) eta$x)
double_$j3p :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
double_$j3p = \ (x$erb :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs) -> (In$jfi ((inj$j3r ((Double$jfb x$erb)))))
id$j47 :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt
id$j47 = \ (x$4a :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> x$4a
compose$j44 :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu) -> (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
compose$j44 = \ (x$eqt :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu)) -> \ (x$equ :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt)) -> \ (x$eqv :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> (x$eqt ((x$equ x$eqv)))
inj$j43 :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
inj$j43 = \ (eta$x :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> (((compose$j44 (Inl$jfk)) id$j47) eta$x)
const_$j3o :: Unsigned -> Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
const_$j3o = \ (x$eqz :: Unsigned) -> (In$jfi ((inj$j43 ((Const$jfj x$eqz)))))
id$j4g :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq
id$j4g = \ (x$4a :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> x$4a
compose$j4d :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr) -> (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr
compose$j4d = \ (x$eqt :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> (x$eqt ((x$equ x$eqv)))
inj$j4c :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr
inj$j4c = \ (eta$x :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> (((compose$j4d (Inl$jfg)) id$j4g) eta$x)
compose$j4a :: (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu) -> (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
compose$j4a = \ (x$eqt :: (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> (x$eqt ((x$equ x$eqv)))
inj$j49 :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu
inj$j49 = \ (eta$x :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> (((compose$j4a (Inr$jfl)) inj$j4c) eta$x)
sum_$j3n :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
sum_$j3n = \ (x$er0 :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs) -> \ (x$er1 :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs) -> (In$jfi ((inj$j49 (((Sum$jff x$er0) x$er1)))))
four$j3m :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs
four$j3m = ((sum_$j3n ((const_$j3o ((fromLiteral$ixs (Proxy$je5)))))) ((double_$j3p ((const_$j3o ((fromLiteral$j0j (Proxy$jei))))))))
fmap$j4t :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgh
fmap$j4t = \ (x$erx :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$ery :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo) -> case x$ery of
                                                                                                                                                                                                                                                                            Product$jfc m$eqc n$eqd -> ((Product$jf3 ((x$erx m$eqc))) ((x$erx n$eqd)))
fmap$j4u :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgi
fmap$j4u = \ (x$eru :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$erv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> case x$erv of
                                                                                                                                                                                                                                                                        Sum$jff m$eq9 n$eqa -> ((Sum$jf4 ((x$eru m$eq9))) ((x$eru n$eqa)))
fmap$j4q :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgj
fmap$j4q = \ (x$ero :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$erp :: ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf) -> ((case x$erp of
                                                                                                                                                                                                                                                                                                 Inl$jez m$eq3 -> (Inl$jf5 (((fmap$j4u x$ero) m$eq3)))) | (case x$erp of
                                                                                                                                                                                                                                                                                                                                                             Inr$jf0 m$eq5 -> (Inr$jf6 (((fmap$j4t x$ero) m$eq5)))))
fmap$j4v :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgk
fmap$j4v = \ (x$err :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$ers :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> case x$ers of
                                                                                                                                                                                                                                                                          Const$jfj x$eq7 -> (Const$jf7 x$eq7)
fmap$j4n :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl
fmap$j4n = \ (x$ero :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$erp :: ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg) -> ((case x$erp of
                                                                                                                                                                                                                                                                                                                    Inl$jf1 m$eq3 -> (Inl$jf8 (((fmap$j4v x$ero) m$eq3)))) | (case x$erp of
                                                                                                                                                                                                                                                                                                                                                                                Inr$jf2 m$eq5 -> (Inr$jf9 (((fmap$j4q x$ero) m$eq5)))))
const$j4l :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
const$j4l = \ (x$48 :: Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> \ (x$49 :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> x$48
compose$j4k :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j4k = \ (x$eqt :: (Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqv :: ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> (x$eqt ((x$equ x$eqv)))
compose$j4j :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl) -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j4j = \ (x$eqt :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductRParen$jgl)) -> \ (x$eqv :: ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg) -> (x$eqt ((x$equ x$eqv)))
compose$j50 :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg) -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j50 = \ (x$eqt :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg)) -> \ (x$eqv :: ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf) -> (x$eqt ((x$equ x$eqv)))
compose$j55 :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf) -> Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j55 = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf)) -> \ (x$eqv :: Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo) -> (x$eqt ((x$equ x$eqv)))
LtQuestGt$j57 :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
LtQuestGt$j57 = \ (x$eqw :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqx :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqy :: ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp) -> ((case x$eqy of
nl$jfd x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jfe x$epa -> (x$eqx x$epa)))
Quest$j56 :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
Quest$j56 = \ (x$erh :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eri :: (Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgo -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> ((LtQuestGt$j57 x$eri) x$erh)
compose$j53 :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf) -> Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j53 = \ (x$eqt :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf)) -> \ (x$eqv :: Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq) -> (x$eqt ((x$equ x$eqv)))
LtQuestGt$j52 :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
LtQuestGt$j52 = \ (x$eqw :: (Sum_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgq -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqx :: (ColonPlusColon_Product_Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgp -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqy :: ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr) -> ((case x$eqy of
nl$jfg x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jfh x$epa -> (x$eqx x$epa)))
Quest$j51 :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
Quest$j51 = \ (x$erl :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$erm :: (ColonPlusColon_Sum_Product_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgf -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> ((LtQuestGt$j52 (((compose$j53 x$erm) (Inl$jez)))) (((Quest$j56 x$erl) (((compose$j55 x$erm) (Inr$jf0))))))
compose$j4y :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg) -> Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
compose$j4y = \ (x$eqt :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$equ :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg)) -> \ (x$eqv :: Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt) -> (x$eqt ((x$equ x$eqv)))
LtQuestGt$j4x :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
LtQuestGt$j4x = \ (x$eqw :: (Const_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgt -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqx :: (ColonPlusColon_Sum_ProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgr -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$eqy :: ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu) -> ((case x$eqy of
nl$jfk x$ep7 -> (x$eqw x$ep7)) | (case x$eqy of
nr$jfl x$epa -> (x$eqx x$epa)))
Quest$j4w :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
Quest$j4w = \ (x$erl :: (Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> \ (x$erm :: (ColonPlusColon_Const_SumColonPlusColonProduct_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgg -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> ((LtQuestGt$j4x (((compose$j4y x$erm) (Inl$jf1)))) (((Quest$j51 x$erl) (((compose$j50 x$erm) (Inr$jf2))))))
cases$j4h :: (ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
cases$j4h = \ (x$era :: (ColonPlusColon_Const_SumColonPlusColonProductColonPlusColonDouble_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgu -> (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm) -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> let f$epp :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)
                                                                                                                                                                                                                                                                                                                                                                                      f$epp = \ (x$eqm :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs) -> case x$eqm of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         In$jfi e$epq -> ((x$era e$epq) f$epp)
                                                                                                                                                                                                                                                                                                                                                                                  in f$epp
desugar$j3l :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm
desugar$j3l = \ (eta$x :: Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs) -> ((cases$j4h (((Quest$j4w (\ (x$eqn :: Double_ExprLParenConstColonPlusColonSumColonPlusColonProductColonPlusColonDoubleRParen$jgn) -> \ (r$ept :: (Expr_ConstColonPlusColonSumColonPlusColonProductColonPlusColonDouble$jgs -> Expr_ConstColonPlusColonSumColonPlusColonProduct$jgm)) -> case x$eqn of
                                                                                                                                                                                                                                                                                                                                                                                                 Double$jfb e$eps -> ((sum_$j2k ((r$ept e$eps))) ((r$ept e$eps))))) (((compose$j4j (((compose$j4k const$j4l) (In$jfa)))) ((fmap$j4n desugar$j3l))))))) eta$x)
w :: Unsigned
w = (evalTwo$j2i ((desugar$j3l four$j3m)))
main :: M Unit
main = do x$eqq <- (putint x);
          x$eqr <- (putint y);
          x$eqs <- (putint z);
          (putint w)