Loading source files ...
Running type checker ...
Using passes "csoros":
Running constructor function rewrite ...
Running type checker ...
Running specializer ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running representation transformation ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running specializer ...
Running type checker ...
*** MIL output file:
data Unit
  = Unit

-----------------------------------------
-- not recursive
xpos :: Bit 32
xpos <- area (Stored (Ix 80)) aligned 1

-----------------------------------------
-- not recursive
ypos :: Bit 32
ypos <- area (Stored (Ix 25)) aligned 1

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b116 :: [] >>= [Unit]
b116[] =
  return Unit

-----------------------------------------
-- recursive
b535 :: [Bit 32, Bit 32] >>= [Unit]
b535[t0, t1] =
  t2 <- mul((t1, 160))
  t3 <- mul((t0, 2))
  t4 <- add((t2, t3))
  t5 <- add((t4, 753664))
  t6 <- add((t1, t0))
  t7 <- shl((t6, 8))
  t8 <- add((t7, 2560))
  t9 <- and((t8, 65280))
  t10 <- or((t9, 32))
  t11 <- store16((t5, t10))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, 79))
  if t13
    then b535[t12, t1]
    else b537[1, t1, 24]
b537 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b537[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t2))
  if t4
    then b358[t3]
    else b116[]
b358 :: [Bit 32] >>= [Unit]
b358[t0] =
  t1 <- mul((t0, 160))
  t2 <- add((t1, 753664))
  t3 <- shl((t0, 8))
  t4 <- add((t3, 2560))
  t5 <- and((t4, 65280))
  t6 <- or((t5, 32))
  t7 <- store16((t2, t6))
  b535[1, t0]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "\nhhhh   hhhh\n"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- " hh    hhh        lll lll\n"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- " hh    hh   eeee  ll  ll   oooo\n"

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- " hhhhhhhh  ee  ee ll  ll  oo  oo\n"

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- " hh    hh eeeeeee ll  ll oo   oo\n"

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- " hh    hh  ee     ll  ll oo  oo\n"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "hhh   hhhh  eeee  ll  ll  oooo\n"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "\n"

-----------------------------------------
-- recursive
b546 :: [Bit 32, Bit 32] >>= [Unit]
b546[t0, t1] =
  t2 <- mul((t1, 160))
  t3 <- mul((t0, 2))
  t4 <- add((t2, t3))
  t5 <- add((t4, 753664))
  t6 <- store16((t5, 2592))
  t7 <- add((t0, 1))
  t8 <- primUle((t7, 79))
  if t8
    then b546[t7, t1]
    else b116[]

-----------------------------------------
-- not recursive
b297 :: [Bit 32] >>= [Unit]
b297[t0] =
  t1 <- mul((t0, 160))
  t2 <- add((t1, 753664))
  t3 <- store16((t2, 2592))
  b546[1, t0]

-----------------------------------------
-- recursive
b560 :: [Bit 32, Bit 32] >>= [Unit]
b560[t0, t1] =
  t2 <- mul((t0, 160))
  t3 <- add((t2, 753664))
  t4 <- mul((t1, 160))
  t5 <- add((t4, 753664))
  t6 <- load16((t3))
  t7 <- store16((t5, t6))
  b553[1, t1, t0]
b553 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b553[t0, t1, t2] =
  t3 <- mul((t2, 160))
  t4 <- mul((t0, 2))
  t5 <- add((t3, t4))
  t6 <- add((t5, 753664))
  t7 <- mul((t1, 160))
  t8 <- add((t7, t4))
  t9 <- add((t8, 753664))
  t10 <- load16((t6))
  t11 <- store16((t9, t10))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, 79))
  if t13
    then b553[t12, t1, t2]
    else b562[1, t2, 24]
b562 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b562[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t2))
  if t4
    then b560[t3, t1]
    else b297[t1]

-----------------------------------------
-- recursive
b490 :: [Bit 32, Bit 32] >>= [Unit]
b490[t0, t1] =
  t2 <- store16((753664, 2592))
  b565[1, t0, t1]
b565 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b565[t0, t1, t2] =
  t3 <- mul((t0, 2))
  t4 <- add((t3, 753664))
  t5 <- store16((t4, 2592))
  t6 <- add((t0, 1))
  t7 <- primUle((t6, 79))
  if t7
    then b565[t6, t1, t2]
    else b481[t2]
b582 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b582[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b584[t5, t4, t3]
    else b490[t4, t3]
b584 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b584[t0, t1, t2] =
  t3 <- mul((t0, 160))
  t4 <- add((t3, 753664))
  t5 <- load16((t4))
  t6 <- store16((753664, t5))
  b572[1, t0, t1, t2]
b572 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b572[t0, t1, t2, t3] =
  t4 <- mul((t1, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- add((t5, 753664))
  t9 <- load16((t7))
  t10 <- store16((t8, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, 79))
  if t12
    then b572[t11, t1, t2, t3]
    else b494[t1, t2, t3]
b494 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b494[t0, t1, t2] =
  t3 <- b562[1, t0, 24]
  b481[t2]
b486 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b486[t0, t1, t2] =
  t3 <- store8((xpos, 0))
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 24))
  if t5
    then b580[t4, t1, t2]
    else b582[1, 0, 24, t2, t1]
b580 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b580[t0, t1, t2] =
  t3 <- store8((ypos, t0))
  b481[t2]
b483 :: [Bit 32, Bit 32] >>= [Unit]
b483[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- load8((ypos))
  t4 <- primEq((t0, 13))
  if t4
    then b486[t3, t0, t2]
    else b498[t3, t0, t2]
b498 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b498[t0, t1, t2] =
  t3 <- primEq((t1, 10))
  if t3
    then b486[t0, t1, t2]
    else b506[t1, t0, t2]
b506 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b506[t0, t1, t2] =
  t3 <- load8((xpos))
  t4 <- mul((t1, 160))
  t5 <- mul((t3, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- and((t0, 255))
  t9 <- or((t8, 2560))
  t10 <- store16((t7, t9))
  t11 <- add((t3, 1))
  t12 <- primUle((t11, 79))
  if t12
    then b576[t11, t0, t2]
    else b486[t1, t0, t2]
b576 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b576[t0, t1, t2] =
  t3 <- store8((xpos, t0))
  b481[t2]
b481 :: [Bit 32] >>= [Unit]
b481[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b116[]
    else b483[t1, t0]

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "    K e r n e l   W o r l d\n"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "\n      from LC and MIL\n"

-----------------------------------------
-- not recursive
b370 :: [] >>= [Unit]
b370[] =
  t0 <- b358[1]
  t1 <- b481[str0]
  t2 <- b481[str1]
  t3 <- b481[str2]
  t4 <- b481[str3]
  t5 <- b481[str4]
  t6 <- b481[str5]
  t7 <- b481[str6]
  t8 <- b481[str7]
  t9 <- b481[str8]
  t10 <- b481[str9]
  t11 <- b481[str0]
  t12 <- b481[str1]
  t13 <- b481[str2]
  t14 <- b481[str3]
  t15 <- b481[str4]
  t16 <- b481[str5]
  t17 <- b481[str6]
  t18 <- b481[str7]
  t19 <- b481[str8]
  t20 <- load8((str9))
  t21 <- primEq((t20, 0))
  if t21
    then b116[]
    else b483[t20, str9]

-----------------------------------------
-- recursive
b595 :: [Bit 32] >>= [Unit]
b595[t0] =
  t1 <- mul((t0, 2))
  t2 <- add((t1, 753664))
  t3 <- shl((t0, 8))
  t4 <- add((t3, 2560))
  t5 <- and((t4, 65280))
  t6 <- or((t5, 32))
  t7 <- store16((t2, t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, 79))
  if t9
    then b595[t8]
    else b370[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store8((xpos, 0))
  t1 <- store8((ypos, 0))
  t2 <- store8((xpos, 0))
  t3 <- store8((ypos, 0))
  t4 <- store16((753664, 2592))
  b595[1]

-----------------------------------------
-- Entrypoints:
Writing MIL code GraphViz output to "actual/lc-baremetal/hello.dot" ...
Success!
