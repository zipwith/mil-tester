struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
s130 :: Unit
s130 <-
  Unit()

-----------------------------------------
-- not recursive
b814 :: [] >>= [Unit]
b814[] =
  return s130

-----------------------------------------
-- recursive
b931 :: [Bit 32, Bit 32] >>= [Unit]
b931[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b930[t4, t3]
b930 :: [Bit 32, Bit 32] >>= [Unit]
b930[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b931[t0, t1]
    else b814[]

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- recursive
b605 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b605[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b605[t11, t1, t2, t3]
    else b814[]

-----------------------------------------
-- recursive
b607 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b607[t0, t1, t2, t3, t4] =
  t5 <- b605[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b607[t6, t1, t2, t3, t4]
    else b814[]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "Trivial kernel has booted!\n"

-----------------------------------------
-- not recursive
b936 :: [Bit 32] >>= [Unit]
b936[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b263 :: [Bit 32] >>= [Unit]
b263[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- primEq((t2, 0))
  if t3
    then b263[t0]
    else b936[t0]

-----------------------------------------
-- recursive
b612 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b612[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b612[t11, t1, t2, t3]
    else b814[]

-----------------------------------------
-- recursive
b615 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b615[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b615[t13, t1, t2, t3]
    else b814[]

-----------------------------------------
-- recursive
b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b692[t0, t1, t2, t3, t4, t5] =
  t6 <- b615[t3, t2, t0, t5]
  b1064[1, t5, t1, t4, t3, t2]
b1064 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1064[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b692[t1, t2, t5, t4, t3, t6]
    else b612[t4, t5, t3, t2]

-----------------------------------------
-- not recursive
b374 :: [Bit 32] >>= [Unit]
b374[t0] =
  t1 <- load8((t0))
  t2 <- add((t0, 1))
  t3 <- load8((t2))
  t4 <- add((t0, 2))
  t5 <- load8((t4))
  t6 <- add((t0, 3))
  t7 <- load8((t6))
  t8 <- add((t0, 6))
  t9 <- load8((t8))
  t10 <- add((t1, 1))
  t11 <- primUle((t10, t5))
  if t11
    then b692[t1, t5, t7, t3, t9, t10]
    else b612[t3, t7, t9, t5]

-----------------------------------------
-- not recursive
b1071 :: [Bit 32, Bit 32] >>= [Unit]
b1071[t0, t1] =
  t2 <- add((t1, 4))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b363 :: [Bit 32, Bit 32] >>= [Unit]
b363[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- add((t1, 5))
  t4 <- load8((t2))
  t5 <- store8((t3, t4))
  t6 <- add((t1, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t7))
  if t9
    then b1071[t8, t1]
    else b374[t1]

-----------------------------------------
-- not recursive
b1075 :: [Bit 32, Bit 32] >>= [Unit]
b1075[t0, t1] =
  t2 <- add((t1, 5))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b351 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b351[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- load8((t3))
  t5 <- add((t1, 6))
  t6 <- load8((t5))
  t7 <- mul((t2, 160))
  t8 <- mul((t4, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- and((t0, 255))
  t12 <- shl((t6, 8))
  t13 <- or((t11, t12))
  t14 <- store16((t10, t13))
  t15 <- add((t1, 3))
  t16 <- load8((t15))
  t17 <- add((t4, 1))
  t18 <- primUle((t17, t16))
  if t18
    then b1075[t17, t1]
    else b363[t2, t1]

-----------------------------------------
-- not recursive
b354 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b354[t0, t1, t2] =
  t3 <- primEq((t2, 10))
  if t3
    then b363[t0, t1]
    else b351[t2, t1, t0]

-----------------------------------------
-- not recursive
b641 :: [Bit 32, Bit 32] >>= [Unit]
b641[t0, t1] =
  t2 <- add((t1, 4))
  t3 <- load8((t2))
  t4 <- primEq((t0, 13))
  if t4
    then b363[t3, t1]
    else b354[t3, t1, t0]

-----------------------------------------
-- recursive
b1093 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1093[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b612[t0, t1, t2, t3]
  b952[t5, t6]
b965 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b965[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- mul((t3, 160))
  t8 <- mul((t0, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- shl((t2, 8))
  t12 <- or((t11, 32))
  t13 <- store16((t10, t12))
  t14 <- add((t0, 1))
  t15 <- primUle((t14, t1))
  if t15
    then b1093[t14, t1, t2, t3, t4, t5, t6]
    else b952[t5, t6]
b963 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b963[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- add((t0, 1))
  t5 <- load8((t4))
  t6 <- add((t0, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 3))
  t9 <- load8((t8))
  t10 <- add((t0, 6))
  t11 <- load8((t10))
  t12 <- add((t3, 1))
  t13 <- primUle((t12, t7))
  if t13
    then b1088[t12, t3, t7, t9, t5, t11, t1, t2, t0]
    else b965[t5, t9, t11, t7, t1, t2, t0]
b1088 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1088[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- b615[t4, t3, t1, t0]
  t10 <- b1064[1, t0, t2, t5, t4, t3]
  b952[t7, t8]
b961 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b961[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  t5 <- add((t1, 5))
  t6 <- load8((t4))
  t7 <- store8((t5, t6))
  t8 <- add((t1, 2))
  t9 <- load8((t8))
  t10 <- add((t0, 1))
  t11 <- primUle((t10, t9))
  if t11
    then b1084[t10, t1, t2, t3]
    else b963[t1, t2, t3]
b1084 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1084[t0, t1, t2, t3] =
  t4 <- add((t1, 4))
  t5 <- store8((t4, t0))
  b952[t3, t1]
b970 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b970[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b961[t4, t1, t0, t2]
    else b992[t4, t1, t0, t2]
b992 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b992[t0, t1, t2, t3] =
  t4 <- primEq((t2, 10))
  if t4
    then b961[t0, t1, t2, t3]
    else b1081[t2, t1, t0, t3]
b1081 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1081[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- load8((t4))
  t6 <- add((t1, 6))
  t7 <- load8((t6))
  t8 <- mul((t2, 160))
  t9 <- mul((t5, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- and((t0, 255))
  t13 <- shl((t7, 8))
  t14 <- or((t12, t13))
  t15 <- store16((t11, t14))
  t16 <- add((t1, 3))
  t17 <- load8((t16))
  t18 <- add((t5, 1))
  t19 <- primUle((t18, t17))
  if t19
    then b1079[t18, t1, t0, t3]
    else b961[t2, t1, t0, t3]
b1079 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1079[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- store8((t4, t0))
  b952[t3, t1]
b954 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b954[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- b263[t0]
  t5 <- primEq((t0, 10))
  if t5
    then b959[t0, t2, t3]
    else b970[t0, t2, t3]
b959 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b959[t0, t1, t2] =
  t3 <- b263[13]
  t4 <- b641[t0, t1]
  b952[t2, t1]
b952 :: [Bit 32, Bit 32] >>= [Unit]
b952[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b814[]
    else b954[t2, t0, t1]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "Headers:\n"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- " "

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "["

-----------------------------------------
-- not recursive
b661 :: [Bit 32, Bit 32] >>= [Unit]
b661[t0, t1] =
  t2 <- b263[13]
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b363[t4, t1]
    else b354[t4, t1, t0]

-----------------------------------------
-- not recursive
b663 :: [Bit 32, Bit 32] >>= [Unit]
b663[t0, t1] =
  t2 <- b263[t0]
  t3 <- primEq((t0, 10))
  if t3
    then b661[t0, t1]
    else b641[t0, t1]

-----------------------------------------
-- recursive
b1105 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1105[t0, t1, t2] =
  t3 <- b663[t1, t2]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 0))
  if t5
    then b1105[t4, t1, t2]
    else b814[]

-----------------------------------------
-- not recursive
b1103 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1103[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b1105[t5, t4, t3]
    else b814[]

-----------------------------------------
-- recursive
b744 :: [Bit 32, Bit 32] >>= [Unit]
b744[t0, t1] =
  t2 <- add((itoaBuf, t0))
  t3 <- load8((t2))
  t4 <- b663[t3, t1]
  t5 <- add((t0, -1))
  t6 <- primSle((0, t5))
  if t6
    then b744[t5, t1]
    else b814[]

-----------------------------------------
-- not recursive
b749 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b749[t0, t1, t2] =
  t3 <- b1103[1, t2, 0, t1, t0]
  b744[t2, t1]

-----------------------------------------
-- recursive
b893 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b893[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b892[t1, t7, t2, t3, t4, t5]
b891 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b891[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b892[t1, t7, t2, t3, t4, t5]
b892 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b892[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b1128[t7, t2, t3, t4, t5]
    else b749[t5, t4, t3]
b1128 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1128[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b749[t4, t3, t2]
    else b746[t5, t0, t3, t4]
b746 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b746[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b891[t5, t4, t0, t1, t2, t3]
    else b893[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b770 :: [Bit 32] >>= [Unit]
b770[t0] =
  t1 <- load8((itoaBuf))
  t2 <- b663[t1, t0]
  return s130

-----------------------------------------
-- not recursive
b1112 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1112[t0, t1, t2] =
  t3 <- b663[t1, t2]
  t4 <- b1103[1, t0, 0, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b663[t5, t2]
  return s130

-----------------------------------------
-- not recursive
b1110 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1110[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t1))
  if t5
    then b1112[t4, t2, t3]
    else b770[t3]

-----------------------------------------
-- not recursive
b897 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b897[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b1110[1, 0, t4, t3]
    else b746[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b895 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b895[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b1110[1, 0, t4, t3]
    else b746[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b726 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b726[t0, t1, t2] =
  t3 <- nzrem((t2, 10))
  t4 <- primUle((t3, 9))
  if t4
    then b895[t3, itoaBuf, t2, t0, t1]
    else b897[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "]: "

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "[0x"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "-0x"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "], entry 0x"

-----------------------------------------
-- recursive
b901 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b901[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b900[t1, t7, t2, t3, t4, t5]
b899 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b899[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b900[t1, t7, t2, t3, t4, t5]
b900 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b900[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b1116[t7, t2, t3, t4, t5]
    else b749[t5, t4, t3]
b1116 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1116[t0, t1, t2, t3, t4] =
  t5 <- lshr((t1, 4))
  t6 <- primEq((t5, 0))
  if t6
    then b749[t4, t3, t2]
    else b762[t5, t0, t3, t4]
b762 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b762[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- and((t0, 15))
  t6 <- primUle((t5, 9))
  if t6
    then b899[t5, t4, t0, t1, t2, t3]
    else b901[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b905 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b905[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b1110[1, 0, t4, t3]
    else b762[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b903 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b903[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b1110[1, 0, t4, t3]
    else b762[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b709 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b709[t0, t1, t2] =
  t3 <- and((t2, 15))
  t4 <- primUle((t3, 9))
  if t4
    then b903[t3, itoaBuf, t2, t0, t1]
    else b905[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "\n"

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "[0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "-0x"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "]"

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "Strings:\n"

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "cmdline"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- " "

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- "imgline"

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- ": "

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- " ["

-----------------------------------------
-- not recursive
str22 :: Bit 32
str22 <- "]\n"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "Halting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b1033 :: [] >>= [Unit]
b1033[] =
  t0 <- b952[str16, console]
  t1 <- load32((4104))
  t2 <- b952[str19, console]
  t3 <- b952[str17, console]
  t4 <- b952[str20, console]
  t5 <- b952[t1, console]
  t6 <- b952[str21, console]
  t7 <- b709[console, 32, t1]
  t8 <- b952[str22, console]
  t9 <- load32((4108))
  t10 <- b952[str19, console]
  t11 <- b952[str18, console]
  t12 <- b952[str20, console]
  t13 <- b952[t9, console]
  t14 <- b952[str21, console]
  t15 <- b709[console, 32, t9]
  t16 <- b952[str22, console]
  t17 <- load8((str1))
  t18 <- primEq((t17, 0))
  if t18
    then b814[]
    else b954[t17, str1, console]

-----------------------------------------
-- recursive
b1140 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1140[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t2))
  t6 <- add((t0, -1))
  t7 <- b952[str2, console]
  t8 <- b952[t3, console]
  t9 <- b952[str3, console]
  t10 <- b726[console, 32, t4]
  t11 <- b952[str4, console]
  t12 <- b952[str9, console]
  t13 <- load32((t1))
  t14 <- b709[console, 32, t13]
  t15 <- b952[str10, console]
  t16 <- add((t1, 4))
  t17 <- load32((t16))
  t18 <- b709[console, 32, t17]
  t19 <- b952[str11, console]
  t20 <- b952[str5, console]
  t21 <- add((t4, 1))
  t22 <- primEq((t6, 0))
  if t22
    then b1033[]
    else b1140[t6, t5, 8, t3, t21]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "mmap"

-----------------------------------------
-- not recursive
b1037 :: [] >>= [Unit]
b1037[] =
  t0 <- b952[str14, console]
  t1 <- load32((4100))
  t2 <- load32((t1))
  t3 <- add((t1, 4))
  t4 <- primEq((t2, 0))
  if t4
    then b1033[]
    else b1140[t2, t3, 8, str15, 0]

-----------------------------------------
-- recursive
b1143 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1143[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t2))
  t6 <- add((t0, -1))
  t7 <- b952[str2, console]
  t8 <- b952[t3, console]
  t9 <- b952[str3, console]
  t10 <- b726[console, 32, t4]
  t11 <- b952[str4, console]
  t12 <- b952[str6, console]
  t13 <- load32((t1))
  t14 <- b709[console, 32, t13]
  t15 <- b952[str7, console]
  t16 <- add((t1, 4))
  t17 <- load32((t16))
  t18 <- b709[console, 32, t17]
  t19 <- b952[str8, console]
  t20 <- add((t1, 8))
  t21 <- load32((t20))
  t22 <- b709[console, 32, t21]
  t23 <- b952[str5, console]
  t24 <- add((t4, 1))
  t25 <- primEq((t6, 0))
  if t25
    then b1037[]
    else b1143[t6, t5, 12, t3, t24]

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "header"

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- b930[itoaBuf, 0]
  t1 <- store8((console, 0))
  t2 <- add((console, 1))
  t3 <- store8((t2, 0))
  t4 <- add((console, 2))
  t5 <- store8((t4, 24))
  t6 <- add((console, 3))
  t7 <- store8((t6, 79))
  t8 <- add((console, 4))
  t9 <- store8((t8, 0))
  t10 <- add((console, 5))
  t11 <- store8((t10, 0))
  t12 <- add((console, 6))
  t13 <- store8((t12, 10))
  t14 <- load8((console))
  t15 <- load8((t2))
  t16 <- store8((t8, t14))
  t17 <- store8((t10, t15))
  t18 <- load8((t4))
  t19 <- load8((t6))
  t20 <- load8((t12))
  t21 <- b607[t14, t18, t20, t19, t15]
  t22 <- b952[str0, console]
  t23 <- b952[str12, console]
  t24 <- load32((4096))
  t25 <- load32((t24))
  t26 <- add((t24, 4))
  t27 <- primEq((t25, 0))
  if t27
    then b1037[]
    else b1143[t25, t26, 12, str13, 0]

-----------------------------------------
-- Entrypoints:
