struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

bitdata Interval /64
  = Interval [ lo :: Bit 32 | hi :: Bit 32 ]
    -- predInterval(x :: Bit 64) = true

-- bit pattern:
--  ________________________________________________________________

struct IntervalSet / 65
  [ array :: Array 8 (Stored Interval)  {- offset=0 -}
  | last :: Stored Last  {- offset=64 -} ]
  aligned 8

bitdata Last /4
  = Empty [ X1 ]
    -- predEmpty(x :: Bit 4) = x == 0x1
  | Last [ n :: Ix 8 | B0 ]
    -- predLast(x :: Bit 4) = (x & 0x1) == 0x0

-- bit pattern:
--  000_
--  0010
--  01_0
--  1__0

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
s232 :: Unit
s232 <-
  Unit()

-----------------------------------------
-- not recursive
b1987 :: [] >>= [Unit]
b1987[] =
  return s232

-----------------------------------------
-- recursive
b2288 :: [Bit 32, Bit 32] >>= [Unit]
b2288[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b2287[t4, t3]
b2287 :: [Bit 32, Bit 32] >>= [Unit]
b2287[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b2288[t0, t1]
    else b1987[]

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- recursive
b2294 :: [Bit 32, Bit 32] >>= [Unit]
b2294[t0, t1] =
  t2 <- store32((t0, 0))
  t3 <- add((t0, 4))
  t4 <- store32((t3, 0))
  t5 <- add((t1, 1))
  t6 <- add((t0, 8))
  b2293[t6, t5]
b2293 :: [Bit 32, Bit 32] >>= [Unit]
b2293[t0, t1] =
  t2 <- primUlt((t1, 8))
  if t2
    then b2294[t0, t1]
    else b1987[]

-----------------------------------------
-- not recursive
intervals :: Bit 32
intervals <- area IntervalSet aligned 8

-----------------------------------------
-- recursive
b995 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b995[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b995[t11, t1, t2, t3]
    else b1987[]

-----------------------------------------
-- recursive
b997 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b997[t0, t1, t2, t3, t4] =
  t5 <- b995[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b997[t6, t1, t2, t3, t4]
    else b1987[]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "calc-untyped kernel has booted!\n"

-----------------------------------------
-- not recursive
b2300 :: [Bit 32] >>= [Unit]
b2300[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b265 :: [Bit 32] >>= [Unit]
b265[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- primEq((t2, 0))
  if t3
    then b265[t0]
    else b2300[t0]

-----------------------------------------
-- recursive
b1002 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1002[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1002[t11, t1, t2, t3]
    else b1987[]

-----------------------------------------
-- recursive
b1005 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1005[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1005[t13, t1, t2, t3]
    else b1987[]

-----------------------------------------
-- recursive
b1345 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1345[t0, t1, t2, t3, t4, t5] =
  t6 <- b1005[t3, t2, t0, t5]
  b2614[1, t5, t1, t4, t3, t2]
b2614 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2614[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1345[t1, t2, t5, t4, t3, t6]
    else b1002[t4, t5, t3, t2]

-----------------------------------------
-- not recursive
b376 :: [Bit 32] >>= [Unit]
b376[t0] =
  t1 <- load8((t0))
  t2 <- add((t0, 1))
  t3 <- load8((t2))
  t4 <- add((t0, 2))
  t5 <- load8((t4))
  t6 <- add((t0, 3))
  t7 <- load8((t6))
  t8 <- add((t0, 6))
  t9 <- load8((t8))
  t10 <- add((t1, 1))
  t11 <- primUle((t10, t5))
  if t11
    then b1345[t1, t5, t7, t3, t9, t10]
    else b1002[t3, t7, t9, t5]

-----------------------------------------
-- not recursive
b2621 :: [Bit 32, Bit 32] >>= [Unit]
b2621[t0, t1] =
  t2 <- add((t1, 4))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b365 :: [Bit 32, Bit 32] >>= [Unit]
b365[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- add((t1, 5))
  t4 <- load8((t2))
  t5 <- store8((t3, t4))
  t6 <- add((t1, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t7))
  if t9
    then b2621[t8, t1]
    else b376[t1]

-----------------------------------------
-- not recursive
b2625 :: [Bit 32, Bit 32] >>= [Unit]
b2625[t0, t1] =
  t2 <- add((t1, 5))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b353 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b353[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- load8((t3))
  t5 <- add((t1, 6))
  t6 <- load8((t5))
  t7 <- mul((t2, 160))
  t8 <- mul((t4, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- and((t0, 255))
  t12 <- shl((t6, 8))
  t13 <- or((t11, t12))
  t14 <- store16((t10, t13))
  t15 <- add((t1, 3))
  t16 <- load8((t15))
  t17 <- add((t4, 1))
  t18 <- primUle((t17, t16))
  if t18
    then b2625[t17, t1]
    else b365[t2, t1]

-----------------------------------------
-- not recursive
b356 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b356[t0, t1, t2] =
  t3 <- primEq((t2, 10))
  if t3
    then b365[t0, t1]
    else b353[t2, t1, t0]

-----------------------------------------
-- not recursive
b1103 :: [Bit 32, Bit 32] >>= [Unit]
b1103[t0, t1] =
  t2 <- add((t1, 4))
  t3 <- load8((t2))
  t4 <- primEq((t0, 13))
  if t4
    then b365[t3, t1]
    else b356[t3, t1, t0]

-----------------------------------------
-- recursive
b2673 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2673[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1002[t0, t1, t2, t3]
  b2338[t5, t6]
b2351 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2351[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- mul((t3, 160))
  t8 <- mul((t0, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- shl((t2, 8))
  t12 <- or((t11, 32))
  t13 <- store16((t10, t12))
  t14 <- add((t0, 1))
  t15 <- primUle((t14, t1))
  if t15
    then b2673[t14, t1, t2, t3, t4, t5, t6]
    else b2338[t5, t6]
b2349 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2349[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- add((t0, 1))
  t5 <- load8((t4))
  t6 <- add((t0, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 3))
  t9 <- load8((t8))
  t10 <- add((t0, 6))
  t11 <- load8((t10))
  t12 <- add((t3, 1))
  t13 <- primUle((t12, t7))
  if t13
    then b2668[t12, t3, t7, t9, t5, t11, t1, t2, t0]
    else b2351[t5, t9, t11, t7, t1, t2, t0]
b2668 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2668[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- b1005[t4, t3, t1, t0]
  t10 <- b2614[1, t0, t2, t5, t4, t3]
  b2338[t7, t8]
b2347 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2347[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  t5 <- add((t1, 5))
  t6 <- load8((t4))
  t7 <- store8((t5, t6))
  t8 <- add((t1, 2))
  t9 <- load8((t8))
  t10 <- add((t0, 1))
  t11 <- primUle((t10, t9))
  if t11
    then b2664[t10, t1, t2, t3]
    else b2349[t1, t2, t3]
b2664 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2664[t0, t1, t2, t3] =
  t4 <- add((t1, 4))
  t5 <- store8((t4, t0))
  b2338[t3, t1]
b2356 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2356[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b2347[t4, t1, t0, t2]
    else b2476[t4, t1, t0, t2]
b2476 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2476[t0, t1, t2, t3] =
  t4 <- primEq((t2, 10))
  if t4
    then b2347[t0, t1, t2, t3]
    else b2661[t2, t1, t0, t3]
b2661 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2661[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- load8((t4))
  t6 <- add((t1, 6))
  t7 <- load8((t6))
  t8 <- mul((t2, 160))
  t9 <- mul((t5, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- and((t0, 255))
  t13 <- shl((t7, 8))
  t14 <- or((t12, t13))
  t15 <- store16((t11, t14))
  t16 <- add((t1, 3))
  t17 <- load8((t16))
  t18 <- add((t5, 1))
  t19 <- primUle((t18, t17))
  if t19
    then b2659[t18, t1, t0, t3]
    else b2347[t2, t1, t0, t3]
b2659 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2659[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- store8((t4, t0))
  b2338[t3, t1]
b2340 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2340[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- b265[t0]
  t5 <- primEq((t0, 10))
  if t5
    then b2345[t0, t2, t3]
    else b2356[t0, t2, t3]
b2345 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2345[t0, t1, t2] =
  t3 <- b265[13]
  t4 <- b1103[t0, t1]
  b2338[t2, t1]
b2338 :: [Bit 32, Bit 32] >>= [Unit]
b2338[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1987[]
    else b2340[t2, t0, t1]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "Headers:\n"

-----------------------------------------
-- not recursive
str25 :: Bit 32
str25 <- " "

-----------------------------------------
-- not recursive
str26 :: Bit 32
str26 <- "["

-----------------------------------------
-- not recursive
b1144 :: [Bit 32, Bit 32] >>= [Unit]
b1144[t0, t1] =
  t2 <- b265[13]
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b365[t4, t1]
    else b356[t4, t1, t0]

-----------------------------------------
-- not recursive
b1146 :: [Bit 32, Bit 32] >>= [Unit]
b1146[t0, t1] =
  t2 <- b265[t0]
  t3 <- primEq((t0, 10))
  if t3
    then b1144[t0, t1]
    else b1103[t0, t1]

-----------------------------------------
-- recursive
b2636 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2636[t0, t1, t2] =
  t3 <- b1146[t1, t2]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 0))
  if t5
    then b2636[t4, t1, t2]
    else b1987[]

-----------------------------------------
-- not recursive
b2634 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2634[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b2636[t5, t4, t3]
    else b1987[]

-----------------------------------------
-- recursive
b1525 :: [Bit 32, Bit 32] >>= [Unit]
b1525[t0, t1] =
  t2 <- add((itoaBuf, t0))
  t3 <- load8((t2))
  t4 <- b1146[t3, t1]
  t5 <- add((t0, -1))
  t6 <- primSle((0, t5))
  if t6
    then b1525[t5, t1]
    else b1987[]

-----------------------------------------
-- not recursive
b1530 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1530[t0, t1, t2] =
  t3 <- b2634[1, t2, 0, t1, t0]
  b1525[t2, t1]

-----------------------------------------
-- recursive
b2185 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2185[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b2184[t1, t7, t2, t3, t4, t5]
b2183 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2183[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b2184[t1, t7, t2, t3, t4, t5]
b2184 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2184[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b2829[t7, t2, t3, t4, t5]
    else b1530[t5, t4, t3]
b2829 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2829[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b1530[t4, t3, t2]
    else b1527[t5, t0, t3, t4]
b1527 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1527[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b2183[t5, t4, t0, t1, t2, t3]
    else b2185[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1609 :: [Bit 32] >>= [Unit]
b1609[t0] =
  t1 <- load8((itoaBuf))
  t2 <- b1146[t1, t0]
  return s232

-----------------------------------------
-- not recursive
b2643 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2643[t0, t1, t2] =
  t3 <- b1146[t1, t2]
  t4 <- b2634[1, t0, 0, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b1146[t5, t2]
  return s232

-----------------------------------------
-- not recursive
b2641 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2641[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t1))
  if t5
    then b2643[t4, t2, t3]
    else b1609[t3]

-----------------------------------------
-- not recursive
b2189 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2189[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b2641[1, 0, t4, t3]
    else b1527[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b2187 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2187[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b2641[1, 0, t4, t3]
    else b1527[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b1379 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1379[t0, t1, t2] =
  t3 <- nzrem((t2, 10))
  t4 <- primUle((t3, 9))
  if t4
    then b2187[t3, itoaBuf, t2, t0, t1]
    else b2189[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str27 :: Bit 32
str27 <- "]: "

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "[0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "-0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "], entry 0x"

-----------------------------------------
-- recursive
b2193 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2193[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b2192[t1, t7, t2, t3, t4, t5]
b2191 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2191[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b2192[t1, t7, t2, t3, t4, t5]
b2192 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2192[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b2647[t7, t2, t3, t4, t5]
    else b1530[t5, t4, t3]
b2647 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2647[t0, t1, t2, t3, t4] =
  t5 <- lshr((t1, 4))
  t6 <- primEq((t5, 0))
  if t6
    then b1530[t4, t3, t2]
    else b1543[t5, t0, t3, t4]
b1543 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1543[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- and((t0, 15))
  t6 <- primUle((t5, 9))
  if t6
    then b2191[t5, t4, t0, t1, t2, t3]
    else b2193[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b2197 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2197[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b2641[1, 0, t4, t3]
    else b1543[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b2195 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2195[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b2641[1, 0, t4, t3]
    else b1543[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b1362 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1362[t0, t1, t2] =
  t3 <- and((t2, 15))
  t4 <- primUle((t3, 9))
  if t4
    then b2195[t3, itoaBuf, t2, t0, t1]
    else b2197[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str28 :: Bit 32
str28 <- "\n"

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "[0x"

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "-0x"

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "]"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- "Strings:\n"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- "cmdline"

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- " "

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- "imgline"

-----------------------------------------
-- not recursive
str22 :: Bit 32
str22 <- ": "

-----------------------------------------
-- not recursive
str23 :: Bit 32
str23 <- " ["

-----------------------------------------
-- not recursive
str24 :: Bit 32
str24 <- "]\n"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "Adding interval "

-----------------------------------------
-- not recursive
str34 :: Bit 32
str34 <- "[0x"

-----------------------------------------
-- not recursive
str35 :: Bit 32
str35 <- " - 0x"

-----------------------------------------
-- not recursive
str36 :: Bit 32
str36 <- "]"

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "\n"

-----------------------------------------
-- not recursive
b1239 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1239[t0, t1, t2, t3] =
  t4 <- shl((t3, 1))
  t5 <- shl((t3, 3))
  t6 <- add((t2, t5))
  t7 <- store32((t6, t1))
  t8 <- add((t6, 4))
  t9 <- store32((t8, t0))
  t10 <- add((t2, 64))
  t11 <- store8((t10, t4))
  return flag1

-----------------------------------------
-- not recursive
b1200 :: [Bit 32] >>= [Bit 1]
b1200[t0] =
  t1 <- add((t0, 64))
  t2 <- store8((t1, 0))
  return flag0

-----------------------------------------
-- not recursive
b2699 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2699[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1239[t5, t4, t6, t7]
    else b1200[t3]

-----------------------------------------
-- not recursive
b497 :: [Bit 32, Bit 32] >>= [Bit 1]
b497[t0, t1] =
  t2 <- shl((t1, 1))
  t3 <- add((t0, 64))
  t4 <- store8((t3, t2))
  return flag0

-----------------------------------------
-- not recursive
b2680 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2680[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1239[t5, t4, t6, t7]
    else b497[t3, t1]

-----------------------------------------
-- recursive
b1956 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1956[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t2))
  if t7
    then b2685[1, t3, t6, t4, t5, t2, t0]
    else b2685[1, t3, t6, t4, t5, t1, t0]
b1932 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1932[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t3, t0))
  if t8
    then b1955[t1, t2, t3, t4, t5, t6, t7]
    else b1956[t0, t1, t2, t4, t5, t6, t7]
b1955 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1955[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t0, t1))
  if t7
    then b2685[1, t3, t6, t4, t5, t1, t2]
    else b2685[1, t3, t6, t4, t5, t0, t2]
b2685 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2685[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2683[t7, t2, t4, t3, t1, t6, t5]
    else b1239[t6, t5, t4, t2]
b2683 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2683[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t1, 3))
  t8 <- add((t3, t7))
  t9 <- shl((t4, 3))
  t10 <- add((t3, t9))
  t11 <- load32((t8))
  t12 <- add((t8, 4))
  t13 <- load32((t12))
  t14 <- store32((t10, t11))
  t15 <- add((t10, 4))
  t16 <- store32((t15, t13))
  b1421[t5, t6, t0, t2, t3, t4]
b1769 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1769[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t0, t2))
  if t8
    then b2223[t0, t2, t1, t3, t4, t5, t6, t7]
    else b1932[t2, t3, t0, t1, t4, t5, t6, t7]
b2223 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2223[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, 1))
  t9 <- primUlt((t8, t1))
  if t9
    then b2698[1, t4, t7, t3, t1, t5, t6]
    else b1932[t1, t3, t0, t2, t4, t5, t6, t7]
b2224 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2224[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, 1))
  t9 <- primUlt((t8, t1))
  if t9
    then b2698[1, t4, t7, t0, t2, t5, t6]
    else b1769[t3, t1, t2, t0, t4, t5, t6, t7]
b2698 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2698[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1421[t4, t3, t2, t6, t5, t7]
    else b2680[1, t1, 7, t5, t3, t4, t6]
b1421 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1421[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t5, 3))
  t7 <- add((t4, t6))
  t8 <- load32((t7))
  t9 <- add((t7, 4))
  t10 <- load32((t9))
  t11 <- primUlt((t1, t10))
  if t11
    then b2224[t1, t10, t0, t8, t5, t4, t3, t2]
    else b1769[t8, t10, t0, t1, t5, t4, t3, t2]

-----------------------------------------
-- not recursive
b2705 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2705[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1421[t4, t3, t2, t6, t5, t7]
    else b2699[1, 0, 7, t5, t3, t4, t6]

-----------------------------------------
-- recursive
b2230 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2230[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 1))
  t8 <- primUlt((t7, t1))
  if t8
    then b2705[1, 0, t6, t0, t2, t4, t5]
    else b2231[t3, t2, t1, t0, t4, t5, t6]
b1959 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1959[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t2))
  if t6
    then b2710[1, 0, t5, t3, t4, t2, t0]
    else b2710[1, 0, t5, t3, t4, t1, t0]
b2304 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2304[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 1))
  t8 <- primUlt((t7, t1))
  if t8
    then b2705[1, 0, t6, t3, t1, t4, t5]
    else b1936[t1, t3, t0, t2, t4, t5, t6]
b1936 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1936[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t3, t0))
  if t7
    then b1958[t1, t2, t3, t4, t5, t6]
    else b1959[t0, t1, t2, t4, t5, t6]
b1958 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1958[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t0, t1))
  if t6
    then b2710[1, 0, t5, t3, t4, t1, t2]
    else b2710[1, 0, t5, t3, t4, t0, t2]
b2710 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2710[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2708[t7, t2, t4, t3, t6, t5]
    else b1239[t6, t5, t4, t2]
b2708 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2708[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t1, 3))
  t7 <- add((t3, t6))
  t8 <- load32((t7))
  t9 <- add((t7, 4))
  t10 <- load32((t9))
  t11 <- store32((t3, t8))
  t12 <- add((t3, 4))
  t13 <- store32((t12, t10))
  t14 <- load32((t3))
  t15 <- load32((t12))
  t16 <- primUlt((t5, t15))
  if t16
    then b2230[t5, t15, t4, t14, t3, t2, t0]
    else b2231[t14, t4, t15, t5, t3, t2, t0]
b2231 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2231[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t0, t1))
  if t7
    then b2304[t0, t1, t2, t3, t4, t5, t6]
    else b1936[t1, t3, t0, t2, t4, t5, t6]

-----------------------------------------
-- recursive
b2435 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2435[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t3, 1))
  t8 <- shl((t3, 3))
  t9 <- add((t2, t8))
  t10 <- store32((t9, t1))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t0))
  t13 <- add((t2, 64))
  t14 <- store8((t13, t7))
  t15 <- b2338[str3, console]
  b2379[t5, t6, 8]
b2456 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2456[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- b2231[t0, t2, t1, t3, t4, t5, t6]
  t11 <- b2338[str3, console]
  b2379[t8, t9, 8]
b2444 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2444[t0, t1, t2, t3] =
  t4 <- add((t0, 64))
  t5 <- store8((t4, 0))
  t6 <- b2338[str3, console]
  b2379[t2, t3, 8]
b2737 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2737[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2739[t10, t9, t8, t7, t6, t5, t4]
    else b2444[t3, t6, t5, t4]
b2739 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2739[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1239[t2, t3, t1, t0]
  t8 <- b2338[str3, console]
  b2379[t5, t6, 8]
b2458 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2458[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- primUlt((t1, t2))
  if t9
    then b2723[1, 0, t5, t3, t8, t7, t6, t4, t2, t0]
    else b2723[1, 0, t5, t3, t8, t7, t6, t4, t1, t0]
b2447 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2447[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t3, t0))
  if t10
    then b2448[t1, t2, t3, t4, t5, t6, t7, t8, t9]
    else b2458[t0, t1, t2, t4, t5, t6, t7, t8, t9]
b2448 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2448[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- primUlt((t0, t1))
  if t9
    then b2723[1, 0, t5, t3, t8, t7, t6, t4, t1, t2]
    else b2723[1, 0, t5, t3, t8, t7, t6, t4, t0, t2]
b2723 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2723[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2721[t10, t2, t7, t3, t9, t8, t6, t5, t4]
    else b2435[t9, t8, t7, t2, t6, t5, t4]
b2721 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2721[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t1, 3))
  t10 <- add((t3, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- store32((t3, t11))
  t15 <- add((t3, 4))
  t16 <- store32((t15, t13))
  t17 <- load32((t3))
  t18 <- load32((t15))
  t19 <- primUlt((t5, t18))
  if t19
    then b2451[t5, t18, t4, t17, t3, t2, t0, t6, t7, t8]
    else b2456[t17, t18, t4, t5, t3, t2, t0, t6, t7, t8]
b2451 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2451[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2736[1, 0, t6, t9, t8, t7, t0, t2, t4, t5]
    else b2456[t3, t1, t2, t0, t4, t5, t6, t7, t8, t9]
b2736 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2736[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2734[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2737[1, 0, 7, t8, t3, t4, t5, t6, t7, t9]
b2734 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2734[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- b1421[t4, t5, t3, t1, t2, t0]
  t10 <- b2338[str3, console]
  b2379[t7, t8, 8]
b2800 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2800[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2802[t10, t9, t8, t7, t6, t5, t4]
    else b2444[t3, t6, t5, t4]
b2802 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2802[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 1))
  t8 <- shl((t0, 3))
  t9 <- add((t1, t8))
  t10 <- store32((t9, t3))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t2))
  t13 <- add((t1, 64))
  t14 <- store8((t13, t7))
  t15 <- b2338[str3, console]
  b2379[t5, t6, 8]
b2438 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2438[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t1, t2))
  if t10
    then b2745[1, t3, t6, t4, t9, t8, t7, t5, t2, t0]
    else b2745[1, t3, t6, t4, t9, t8, t7, t5, t1, t0]
b2432 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2432[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t3, t0))
  if t11
    then b2433[t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2438[t0, t1, t2, t4, t5, t6, t7, t8, t9, t10]
b2433 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2433[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t0, t1))
  if t10
    then b2745[1, t3, t6, t4, t9, t8, t7, t5, t1, t2]
    else b2745[1, t3, t6, t4, t9, t8, t7, t5, t0, t2]
b2745 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2745[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2743[t10, t2, t7, t3, t1, t9, t8, t6, t5, t4]
    else b2435[t9, t8, t7, t2, t6, t5, t4]
b2743 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2743[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- shl((t1, 3))
  t11 <- add((t3, t10))
  t12 <- shl((t4, 3))
  t13 <- add((t3, t12))
  t14 <- load32((t11))
  t15 <- add((t11, 4))
  t16 <- load32((t15))
  t17 <- store32((t13, t14))
  t18 <- add((t13, 4))
  t19 <- store32((t18, t16))
  t20 <- b1421[t5, t6, t0, t2, t3, t4]
  t21 <- b2338[str3, console]
  b2379[t8, t9, 8]
b2817 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2817[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2802[t10, t9, t8, t7, t6, t5, t4]
    else b2442[t3, t1, t6, t5, t4]
b2442 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2442[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 1))
  t6 <- add((t0, 64))
  t7 <- store8((t6, t5))
  t8 <- b2338[str3, console]
  b2379[t3, t4, 8]
b2423 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2423[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t3, 1))
  t8 <- shl((t3, 3))
  t9 <- add((t2, t8))
  t10 <- store32((t9, t1))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t0))
  t13 <- add((t2, 64))
  t14 <- store8((t13, t7))
  b2424[t4, t5, t6]
b2427 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2427[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t1, t2))
  if t11
    then b2758[1, t4, t7, t5, t10, t9, t8, t6, t2, t0]
    else b2758[1, t4, t7, t5, t10, t9, t8, t6, t1, t0]
b2420 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2420[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t3, t0))
  if t11
    then b2421[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2427[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
b2421 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2421[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t1, t2))
  if t11
    then b2758[1, t4, t7, t5, t10, t9, t8, t6, t2, t3]
    else b2758[1, t4, t7, t5, t10, t9, t8, t6, t1, t3]
b2758 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2758[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2756[t10, t2, t7, t3, t1, t9, t8, t6, t5, t4]
    else b2423[t9, t8, t7, t2, t6, t5, t4]
b2756 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2756[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- shl((t1, 3))
  t11 <- add((t3, t10))
  t12 <- shl((t4, 3))
  t13 <- add((t3, t12))
  t14 <- load32((t11))
  t15 <- add((t11, 4))
  t16 <- load32((t15))
  t17 <- store32((t13, t14))
  t18 <- add((t13, 4))
  t19 <- store32((t18, t16))
  t20 <- b1421[t5, t6, t0, t2, t3, t4]
  b2424[t7, t8, t9]
b2431 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2431[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 1))
  t6 <- add((t0, 64))
  t7 <- store8((t6, t5))
  b2424[t2, t3, t4]
b2417 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2417[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2771[1, t3, t7, t10, t9, t8, t0, t5, t4, t6]
    else b2418[t2, t1, t5, t0, t3, t4, t6, t7, t8, t9, t10]
b2769 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2769[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2417[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2418[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2418 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2418[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2419[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2420[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2413 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2413[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2419[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2432[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2419 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2419[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2771[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2420[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2771 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2771[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2769[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2776[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2395 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2395[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2396[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2420[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2396 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2396[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2794[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2420[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2792 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2792[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2394[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2395[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2409 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2409[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2410[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2432[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2410 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2410[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2813[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2432[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2813 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2813[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2811[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2817[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2811 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2811[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2394[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2413[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2445 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2445[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t0, t2))
  if t10
    then b2446[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9]
    else b2447[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9]
b2446 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2446[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2808[1, 0, t6, t9, t8, t7, t3, t1, t4, t5]
    else b2447[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9]
b2386 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2386[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- lshr((t0, 1))
  t9 <- load32((t2))
  t10 <- add((t2, 4))
  t11 <- load32((t10))
  t12 <- primUlt((t4, t11))
  if t12
    then b2387[t4, t11, t9, t2, t3, t1, t8, t5, t6, t7]
    else b2445[t9, t11, t3, t4, t2, t1, t8, t5, t6, t7]
b2387 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2387[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2808[1, 0, t6, t9, t8, t7, t0, t4, t3, t5]
    else b2445[t2, t1, t4, t0, t3, t5, t6, t7, t8, t9]
b2808 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2808[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2806[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2800[1, 0, 7, t8, t3, t4, t5, t6, t7, t9]
b2806 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2806[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2394[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2409[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2394 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2394[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2794[1, t3, t7, t10, t9, t8, t0, t5, t4, t6]
    else b2395[t2, t1, t5, t0, t3, t4, t6, t7, t8, t9, t10]
b2794 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2794[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2792[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2776[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2776 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2776[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2774[t10, t9, t8, t7, t6, t5, t4]
    else b2431[t3, t1, t6, t5, t4]
b2774 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2774[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 1))
  t8 <- shl((t0, 3))
  t9 <- add((t1, t8))
  t10 <- store32((t9, t3))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t2))
  t13 <- add((t1, 64))
  t14 <- store8((t13, t7))
  b2424[t4, t5, t6]
b2424 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2424[t0, t1, t2] =
  t3 <- b2338[str3, console]
  b2379[t1, t2, 8]
b2381 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2381[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- b2338[str2, console]
  t9 <- b2338[str34, console]
  t10 <- b1362[console, 32, t5]
  t11 <- b2338[str35, console]
  t12 <- b1362[console, 32, t7]
  t13 <- b2338[str36, console]
  t14 <- add((intervals, 64))
  t15 <- load8((t14))
  t16 <- primEq((t15, 1))
  if t16
    then b2384[intervals, t5, t7, t1, t4, t3]
    else b2386[t15, intervals, intervals, t5, t7, t1, t4, t3]
b2384 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2384[t0, t1, t2, t3, t4, t5] =
  t6 <- store32((t0, t2))
  t7 <- add((t0, 4))
  t8 <- store32((t7, t1))
  t9 <- add((t0, 64))
  t10 <- store8((t9, 0))
  t11 <- b2338[str3, console]
  b2379[t4, t5, 8]
b2379 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2379[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b1987[]
    else b2381[t0, t1, t2]

-----------------------------------------
-- not recursive
str30 :: Bit 32
str30 <- "Interval set contains:\n"

-----------------------------------------
-- not recursive
str32 :: Bit 32
str32 <- "  "

-----------------------------------------
-- not recursive
str33 :: Bit 32
str33 <- "\n"

-----------------------------------------
-- recursive
b2820 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2820[t0, t1, t2] =
  t3 <- shl((t0, 3))
  t4 <- add((t1, t3))
  t5 <- load32((t4))
  t6 <- add((t4, 4))
  t7 <- load32((t6))
  t8 <- b2338[str32, console]
  t9 <- b2338[str34, console]
  t10 <- b1362[console, 32, t7]
  t11 <- b2338[str35, console]
  t12 <- b1362[console, 32, t5]
  t13 <- b2338[str36, console]
  t14 <- b2338[str33, console]
  t15 <- add((t0, 1))
  t16 <- primUle((t15, t2))
  if t16
    then b2820[t15, t1, t2]
    else b1987[]

-----------------------------------------
-- not recursive
b1296 :: [Bit 32, Bit 32] >>= [Unit]
b1296[t0, t1] =
  t2 <- load32((t0))
  t3 <- add((t0, 4))
  t4 <- load32((t3))
  t5 <- b2338[str32, console]
  t6 <- b2338[str34, console]
  t7 <- b1362[console, 32, t4]
  t8 <- b2338[str35, console]
  t9 <- b1362[console, 32, t2]
  t10 <- b2338[str36, console]
  t11 <- b2338[str33, console]
  t12 <- primUle((1, t1))
  if t12
    then b2820[1, t0, t1]
    else b1987[]

-----------------------------------------
-- not recursive
str31 :: Bit 32
str31 <- " intervals\n"

-----------------------------------------
-- not recursive
b514 :: [Bit 32] >>= [Unit]
b514[t0] =
  t1 <- add((t0, 64))
  store8((t1, 1))

-----------------------------------------
-- not recursive
b988 :: [Bit 32, Bit 32] >>= [Unit]
b988[t0, t1] =
  t2 <- shl((t1, 1))
  t3 <- add((t0, 64))
  store8((t3, t2))

-----------------------------------------
-- not recursive
b2841 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2841[t0, t1, t2, t3, t4] =
  t5 <- shl((t0, 3))
  t6 <- add((t4, t5))
  t7 <- add((t3, 1))
  t8 <- shl((t0, 1))
  t9 <- store32((t6, t1))
  t10 <- add((t6, 4))
  t11 <- store32((t10, t7))
  t12 <- add((t4, 64))
  store8((t12, t8))

-----------------------------------------
-- not recursive
b1265 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1265[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 3))
  t8 <- add((t6, t7))
  t9 <- add((t4, -1))
  t10 <- store32((t8, t9))
  t11 <- add((t8, 4))
  t12 <- store32((t11, t3))
  t13 <- add((t1, 1))
  t14 <- primUle((t13, 7))
  if t14
    then b2841[t13, t2, t3, t5, t6]
    else b988[t6, t1]

-----------------------------------------
-- recursive
b2848 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2848[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2846[t7, t2, t6, t5, t4, t3]
    else b514[t6]
b2846 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2846[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t1, 3))
  t7 <- add((t2, t6))
  t8 <- shl((t5, 3))
  t9 <- add((t2, t8))
  t10 <- load32((t7))
  t11 <- add((t7, 4))
  t12 <- load32((t11))
  t13 <- store32((t9, t10))
  t14 <- add((t9, 4))
  t15 <- store32((t14, t12))
  t16 <- add((t5, -1))
  t17 <- primSle((0, t16))
  if t17
    then b2851[t16, t2, t3, t4, t0]
    else b988[t2, t0]
b1268 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1268[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t3, t0))
  if t6
    then b1269[t0, t5, t2, t3, t4, t1]
    else b2848[1, 0, t1, t4, t3, t2, t5]
b1269 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1269[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t4, 3))
  t7 <- add((t1, t6))
  t8 <- add((t3, 1))
  t9 <- store32((t7, t0))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t8))
  t12 <- add((t4, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2851[t12, t1, t2, t3, t5]
    else b988[t1, t5]
b1263 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1263[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t3))
  if t7
    then b1264[t0, t1, t6, t3, t4, t5, t2]
    else b1268[t0, t2, t3, t4, t5, t6]
b1264 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1264[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t4, t0))
  if t7
    then b1265[t5, t6, t0, t1, t3, t4, t2]
    else b1267[t1, t2, t3, t4, t5, t6]
b1267 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1267[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t4, 3))
  t7 <- add((t1, t6))
  t8 <- add((t2, -1))
  t9 <- store32((t7, t8))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t0))
  t12 <- add((t4, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2851[t12, t1, t2, t3, t5]
    else b988[t1, t5]
b1261 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1261[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t3))
  if t7
    then b2849[1, 0, t6, t4, t1, t0, t5]
    else b1263[t2, t3, t4, t0, t1, t6, t5]
b2849 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2849[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2851[t7, t6, t5, t4, t3]
    else b988[t6, t3]
b2851 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2851[t0, t1, t2, t3, t4] =
  t5 <- shl((t0, 3))
  t6 <- add((t1, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- primUlt((t7, t2))
  if t10
    then b2849[1, 0, t0, t4, t3, t2, t1]
    else b1261[t2, t3, t7, t9, t4, t1, t0]

-----------------------------------------
-- not recursive
b2855 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2855[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 3))
  t6 <- add((t2, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- store32((t6, t7))
  t11 <- store32((t8, t9))
  t12 <- add((t1, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2851[t12, t2, t3, t4, t0]
    else b988[t2, t0]

-----------------------------------------
-- not recursive
b2857 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2857[t0, t1, t2, t3, t4, t5] =
  t6 <- sub((t2, t0))
  t7 <- primSle((t1, t6))
  if t7
    then b2855[t6, t2, t5, t4, t3]
    else b514[t5]

-----------------------------------------
-- not recursive
b1280 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1280[t0, t1, t2, t3, t4] =
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- add((t3, 1))
  t8 <- store32((t6, t0))
  t9 <- add((t6, 4))
  t10 <- store32((t9, t7))
  t11 <- add((t4, -1))
  t12 <- primSle((0, t11))
  if t12
    then b2851[t11, t1, t2, t3, t4]
    else b988[t1, t4]

-----------------------------------------
-- not recursive
b1279 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1279[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t3, t0))
  if t5
    then b1280[t0, t4, t2, t3, t1]
    else b2857[1, 0, t1, t3, t2, t4]

-----------------------------------------
-- not recursive
b1277 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1277[t0, t1, t2, t3, t4] =
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- add((t2, -1))
  t8 <- store32((t6, t7))
  t9 <- add((t6, 4))
  t10 <- store32((t9, t0))
  t11 <- add((t4, -1))
  t12 <- primSle((0, t11))
  if t12
    then b2851[t11, t1, t2, t3, t4]
    else b988[t1, t4]

-----------------------------------------
-- not recursive
b1276 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1276[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t0, 3))
  t7 <- add((t5, t6))
  t8 <- add((t3, -1))
  t9 <- store32((t7, t8))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t2))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, 7))
  if t13
    then b2841[t12, t1, t2, t4, t5]
    else b988[t5, t0]

-----------------------------------------
-- not recursive
b1275 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1275[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t4, t0))
  if t6
    then b1276[t5, t0, t1, t3, t4, t2]
    else b1277[t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b1274 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1274[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t3))
  if t6
    then b1275[t0, t1, t5, t3, t4, t2]
    else b1279[t0, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b2873 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2873[t0, t1, t2, t3, t4, t5] =
  t6 <- sub((t2, t0))
  t7 <- primSle((t1, t6))
  if t7
    then b2851[t6, t5, t4, t3, t2]
    else b988[t5, t2]

-----------------------------------------
-- not recursive
b1272 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1272[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t3))
  if t6
    then b2873[1, 0, t5, t1, t0, t4]
    else b1274[t2, t3, t5, t0, t1, t4]

-----------------------------------------
-- not recursive
b1472 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1472[t0, t1, t2, t3] =
  t4 <- lshr((t0, 1))
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- primUlt((t7, t2))
  if t10
    then b2873[1, 0, t4, t3, t2, t1]
    else b1272[t2, t3, t7, t9, t1, t4]

-----------------------------------------
-- not recursive
b941 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b941[t0, t1, t2] =
  t3 <- add((t2, 64))
  t4 <- load8((t3))
  t5 <- primEq((t4, 1))
  if t5
    then b1987[]
    else b1472[t4, t2, t0, t1]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "Reserving interval "

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "\n"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "interval  "

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "\n"

-----------------------------------------
-- not recursive
str37 :: Bit 32
str37 <- "  "

-----------------------------------------
-- not recursive
str38 :: Bit 32
str38 <- " "

-----------------------------------------
-- not recursive
str39 :: Bit 32
str39 <- " ("

-----------------------------------------
-- not recursive
str40 :: Bit 32
str40 <- " bits)\n"

-----------------------------------------
-- not recursive
b1596 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1596[t0, t1, t2, t3] =
  t4 <- b1379[t0, t1, t2]
  t5 <- b2338[str39, console]
  t6 <- b1379[console, 32, t3]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1987[]
    else b2340[t7, str40, console]

-----------------------------------------
-- not recursive
b2834 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2834[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b2641[1, 0, t3, t2]
    else b1527[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b2892 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2892[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b2834[t6, t3, t4, t5]
    else b2641[1, 0, t5, t4]

-----------------------------------------
-- not recursive
b1505 :: [Bit 32] >>= [Unit]
b1505[t0] =
  t1 <- b2338[str39, console]
  t2 <- b1379[console, 32, t0]
  t3 <- load8((str40))
  t4 <- primEq((t3, 0))
  if t4
    then b1987[]
    else b2340[t3, str40, console]

-----------------------------------------
-- not recursive
b2876 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2876[t0, t1, t2, t3, t4] =
  t5 <- b1002[t0, t1, t2, t3]
  t6 <- b2338[str39, console]
  t7 <- b1379[console, 32, t4]
  t8 <- load8((str40))
  t9 <- primEq((t8, 0))
  if t9
    then b1987[]
    else b2340[t8, str40, console]

-----------------------------------------
-- not recursive
b1586 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1586[t0, t1, t2, t3, t4] =
  t5 <- mul((t3, 160))
  t6 <- mul((t0, 2))
  t7 <- add((t5, t6))
  t8 <- add((t7, 753664))
  t9 <- shl((t2, 8))
  t10 <- or((t9, 32))
  t11 <- store16((t8, t10))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, t1))
  if t13
    then b2876[t12, t1, t2, t3, t4]
    else b1505[t4]

-----------------------------------------
-- not recursive
b2881 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2881[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1005[t4, t3, t1, t0]
  t8 <- b2614[1, t0, t2, t5, t4, t3]
  t9 <- b2338[str39, console]
  t10 <- b1379[console, 32, t6]
  t11 <- load8((str40))
  t12 <- primEq((t11, 0))
  if t12
    then b1987[]
    else b2340[t11, str40, console]

-----------------------------------------
-- not recursive
b1584 :: [Bit 32, Bit 32] >>= [Unit]
b1584[t0, t1] =
  t2 <- load8((t0))
  t3 <- add((t0, 1))
  t4 <- load8((t3))
  t5 <- add((t0, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 3))
  t8 <- load8((t7))
  t9 <- add((t0, 6))
  t10 <- load8((t9))
  t11 <- add((t2, 1))
  t12 <- primUle((t11, t6))
  if t12
    then b2881[t11, t2, t6, t8, t4, t10, t1]
    else b1586[t4, t8, t10, t6, t1]

-----------------------------------------
-- not recursive
b2886 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2886[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- store8((t3, t0))
  t5 <- b2338[str39, console]
  t6 <- b1379[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1987[]
    else b2340[t7, str40, console]

-----------------------------------------
-- not recursive
b1582 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1582[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- add((t1, 5))
  t5 <- load8((t3))
  t6 <- store8((t4, t5))
  t7 <- add((t1, 2))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t8))
  if t10
    then b2886[t9, t1, t2]
    else b1584[t1, t2]

-----------------------------------------
-- not recursive
b2890 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2890[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- store8((t3, t0))
  t5 <- b2338[str39, console]
  t6 <- b1379[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1987[]
    else b2340[t7, str40, console]

-----------------------------------------
-- not recursive
b1590 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1590[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- load8((t4))
  t6 <- add((t1, 6))
  t7 <- load8((t6))
  t8 <- mul((t2, 160))
  t9 <- mul((t5, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- and((t0, 255))
  t13 <- shl((t7, 8))
  t14 <- or((t12, t13))
  t15 <- store16((t11, t14))
  t16 <- add((t1, 3))
  t17 <- load8((t16))
  t18 <- add((t5, 1))
  t19 <- primUle((t18, t17))
  if t19
    then b2890[t18, t1, t3]
    else b1582[t2, t1, t3]

-----------------------------------------
-- not recursive
b1589 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1589[t0, t1, t2, t3] =
  t4 <- primEq((t2, 10))
  if t4
    then b1582[t0, t1, t3]
    else b1590[t2, t1, t0, t3]

-----------------------------------------
-- not recursive
b1581 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1581[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b1582[t4, t1, t2]
    else b1589[t4, t1, t0, t2]

-----------------------------------------
-- not recursive
b1580 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1580[t0, t1, t2] =
  t3 <- b265[13]
  t4 <- b1103[t0, t1]
  t5 <- b2338[str39, console]
  t6 <- b1379[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1987[]
    else b2340[t7, str40, console]

-----------------------------------------
-- not recursive
b2278 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2278[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b2892[1, 0, 31, t2, t3, t4]
  t11 <- b265[t6]
  t12 <- primEq((t6, 10))
  if t12
    then b1580[t6, t3, t5]
    else b1581[t6, t3, t5]

-----------------------------------------
-- not recursive
b2277 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2277[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b2892[1, 0, 31, t2, t3, t4]
  t11 <- b265[t6]
  t12 <- primEq((t6, 10))
  if t12
    then b1580[t6, t3, t5]
    else b1581[t6, t3, t5]

-----------------------------------------
-- not recursive
b1593 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1593[t0, t1, t2, t3, t4] =
  t5 <- ashr((t0, t1))
  t6 <- nzrem((t5, 10))
  t7 <- primUle((t6, 9))
  if t7
    then b2277[t6, itoaBuf, t5, t2, 32, t4, t3]
    else b2278[t6, itoaBuf, t5, t2, 32, t4, t3]

-----------------------------------------
-- not recursive
b1595 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1595[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- ashr((t5, t0))
  t8 <- shl((t7, t0))
  t9 <- primEq((t8, t5))
  if t9
    then b1593[t5, t0, t1, t2, t6]
    else b1596[t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b1594 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1594[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- ashr((t0, t8))
  t11 <- shl((t10, t8))
  t12 <- primEq((t11, t0))
  if t12
    then b1593[t0, t8, t7, t6, t9]
    else b1595[t5, t4, t3, t1, t2, t0, t9]

-----------------------------------------
-- not recursive
b1592 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1592[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- ashr((t0, t11))
  t14 <- shl((t13, t11))
  t15 <- primEq((t14, t0))
  if t15
    then b1593[t0, t11, t10, t9, t12]
    else b1594[t0, t1, t2, t3, t4, t5, t6, t7, t8, t12]

-----------------------------------------
-- not recursive
b1579 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1579[t0, t1, t2] =
  t3 <- b265[t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1580[t0, t1, t2]
    else b1581[t0, t1, t2]

-----------------------------------------
-- not recursive
b1927 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1927[t0, t1, t2] =
  t3 <- b2338[str37, console]
  t4 <- b2338[str34, console]
  t5 <- b1362[console, 32, t1]
  t6 <- b2338[str35, console]
  t7 <- b1362[console, 32, t2]
  t8 <- b2338[str36, console]
  t9 <- b2338[str38, console]
  t10 <- sub((t2, t1))
  t11 <- add((t10, 1))
  t12 <- primEq((t11, 0))
  if t12
    then b1579[48, console, t0]
    else b1592[t11, console, 32, 75, console, 10, 77, console, 20, 71, console, 30, t0]

-----------------------------------------
-- not recursive
b549 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32] >>= [Unit]
b549[t0, t1, t2] =
  t3 <- t0 @ t1
  t4 <- t3 @ t2
  t4 @ []

-----------------------------------------
-- recursive
b551 :: [Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b551[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t2, t6))
  if t7
    then b549[t1, t5, t4]
    else b548[t4, t3, t2, t1, t0]
b548 :: [Bit 32, Bit 32, Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32] >>= [Unit]
b548[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 1))
  t6 <- primUlt((t5, 32))
  if t6
    then b553[t3, t2, t1, t5, t4]
    else b549[t3, t4, t5]
b553 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b553[t0, t1, t2, t3, t4] =
  t5 <- mul((t4, 2))
  t6 <- add((t5, 1))
  t7 <- and((t2, t6))
  t8 <- primNeq((t7, 0))
  if t8
    then b549[t0, t4, t3]
    else b551[t6, t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b1094 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32] >>= [Unit]
b1094[t0, t1] =
  t2 <- t0 @ t1
  t3 <- t2 @ 12
  t3 @ []

-----------------------------------------
-- not recursive
b1095 :: [Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32] >>= [Unit]
b1095[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t2, t5))
  if t6
    then b1094[t1, t4]
    else b553[t1, t2, t3, 13, t0]

-----------------------------------------
-- not recursive
b1092 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32] >>= [Unit]
b1092[t0, t1, t2, t3] =
  t4 <- mul((t3, 2))
  t5 <- add((t4, 1))
  t6 <- and((t2, t5))
  t7 <- primNeq((t6, 0))
  if t7
    then b1094[t0, t3]
    else b1095[t5, t0, t1, t2, t3]

-----------------------------------------
-- recursive
b1846 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1846[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- b1488[t3, t0, t1]
  t5 <- add((t2, t0))
  t6 <- add((t5, 1))
  t7 <- primUlt((t1, t6))
  if t7
    then b1987[]
    else b1092[t4, t1, t3, t0]
b1488 :: [Bit 32, Bit 32, Bit 32] >>= [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
b1488[t0, t1, t2] =
  k516{t2, t1, t0}
k516 :: {Bit 32, Bit 32, Bit 32} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
k516{t0, t1, t2} t3 = k523{t0, t1, t2, t3}
k523 :: {Bit 32, Bit 32, Bit 32, Bit 32} [Bit 32] ->> [[] ->> [Unit]]
k523{t0, t1, t2, t3} t4 = k530{t0, t1, t4, t2, t3}
k530 :: {Bit 32, Bit 32, Bit 32, Bit 32, Bit 32} [] ->> [Unit]
k530{t0, t1, t2, t3, t4} [] = b1843[t4, t3, t2, t1, t0]
b1843 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1843[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- b1927[t2, t1, t5]
  t7 <- primUlt((t5, t4))
  if t7
    then b1846[t3, t4, t5]
    else b1987[]

-----------------------------------------
-- recursive
b1953 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1953[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b1843[t5, t3, t4, t2, t1]
    else b1965[t4, t3, t1, t2, t0]
b1965 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1965[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 1))
  t6 <- primUlt((t5, 32))
  if t6
    then b1929[t2, t3, t1, t5, t4]
    else b1843[t4, t1, t5, t3, t2]
b1929 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1929[t0, t1, t2, t3, t4] =
  t5 <- mul((t4, 2))
  t6 <- add((t5, 1))
  t7 <- and((t2, t6))
  t8 <- primNeq((t7, 0))
  if t8
    then b1843[t4, t2, t3, t1, t0]
    else b1953[t6, t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b1928 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1928[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- b1927[t2, t1, t4]
  t6 <- primUlt((t4, t3))
  if t6
    then b1846[t0, t3, t4]
    else b1987[]

-----------------------------------------
-- not recursive
b1729 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1729[t0, t1, t2, t3] =
  t4 <- add((t3, t0))
  t5 <- primUlt((t1, t4))
  if t5
    then b1928[t2, t3, 12, t1]
    else b1929[t1, t2, t3, 13, t0]

-----------------------------------------
-- not recursive
b1607 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1607[t0, t1, t2] =
  t3 <- mul((t1, 2))
  t4 <- add((t3, 1))
  t5 <- and((t2, t4))
  t6 <- primNeq((t5, 0))
  if t6
    then b1928[t1, t2, 12, t0]
    else b1729[t4, t0, t1, t2]

-----------------------------------------
-- not recursive
b1487 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1487[t0, t1, t2] =
  t3 <- add((t0, t2))
  t4 <- primUlt((t1, t3))
  if t4
    then b1987[]
    else b1607[t1, t2, t0]

-----------------------------------------
-- not recursive
b1118 :: [Bit 32, Bit 32] >>= [Unit]
b1118[t0, t1] =
  t2 <- add((t0, 4095))
  t3 <- and((t2, -4096))
  t4 <- primUlt((t3, t0))
  if t4
    then b1987[]
    else b1487[t3, t1, 4095]

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "Halting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b1119 :: [] >>= [Unit]
b1119[] =
  t0 <- load8((str1))
  t1 <- primEq((t0, 0))
  if t1
    then b1987[]
    else b2340[t0, str1, console]

-----------------------------------------
-- recursive
b2897 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2897[t0, t1, t2] =
  t3 <- shl((t0, 3))
  t4 <- add((t1, t3))
  t5 <- load32((t4))
  t6 <- add((t4, 4))
  t7 <- load32((t6))
  t8 <- b2338[str6, console]
  t9 <- b2338[str34, console]
  t10 <- b1362[console, 32, t7]
  t11 <- b2338[str35, console]
  t12 <- b1362[console, 32, t5]
  t13 <- b2338[str36, console]
  t14 <- b2338[str7, console]
  t15 <- b1118[t7, t5]
  t16 <- add((t0, 1))
  t17 <- primUle((t16, t2))
  if t17
    then b2897[t16, t1, t2]
    else b1119[]

-----------------------------------------
-- not recursive
b1494 :: [Bit 32, Bit 32] >>= [Unit]
b1494[t0, t1] =
  t2 <- lshr((t0, 1))
  t3 <- load32((t1))
  t4 <- add((t1, 4))
  t5 <- load32((t4))
  t6 <- b2338[str6, console]
  t7 <- b2338[str34, console]
  t8 <- b1362[console, 32, t5]
  t9 <- b2338[str35, console]
  t10 <- b1362[console, 32, t3]
  t11 <- b2338[str36, console]
  t12 <- b2338[str7, console]
  t13 <- b1118[t5, t3]
  t14 <- primUle((1, t2))
  if t14
    then b2897[1, t1, t2]
    else b1119[]

-----------------------------------------
-- not recursive
b1495 :: [Bit 32, Bit 32] >>= [Unit]
b1495[t0, t1] =
  t2 <- b2338[str30, console]
  t3 <- lshr((t0, 1))
  t4 <- b1296[t1, t3]
  t5 <- add((t3, 1))
  t6 <- b1379[console, 32, t5]
  t7 <- b2338[str31, console]
  t8 <- add((intervals, 64))
  t9 <- load8((t8))
  t10 <- primEq((t9, 1))
  if t10
    then b1119[]
    else b1494[t9, intervals]

-----------------------------------------
-- not recursive
str29 :: Bit 32
str29 <- "Interval set is empty\n"

-----------------------------------------
-- not recursive
b1299 :: [] >>= [Unit]
b1299[] =
  t0 <- b2338[str29, console]
  t1 <- add((intervals, 64))
  t2 <- load8((t1))
  t3 <- primEq((t2, 1))
  if t3
    then b1119[]
    else b1494[t2, intervals]

-----------------------------------------
-- not recursive
b2589 :: [] >>= [Unit]
b2589[] =
  t0 <- add((intervals, 64))
  t1 <- load8((t0))
  t2 <- primEq((t1, 1))
  if t2
    then b1299[]
    else b1495[t1, intervals]

-----------------------------------------
-- recursive
b2906 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2906[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- b2338[str4, console]
  t9 <- b2338[str34, console]
  t10 <- b1362[console, 32, t5]
  t11 <- b2338[str35, console]
  t12 <- b1362[console, 32, t7]
  t13 <- b2338[str36, console]
  t14 <- b941[t5, t7, intervals]
  t15 <- b2338[str5, console]
  t16 <- primEq((t4, 0))
  if t16
    then b2589[]
    else b2906[t4, t3, 12]

-----------------------------------------
-- not recursive
b1127 :: [] >>= [Unit]
b1127[] =
  t0 <- b941[0, 1048575, intervals]
  t1 <- b941[-1073741824, -1, intervals]
  t2 <- load32((4096))
  t3 <- load32((t2))
  t4 <- add((t2, 4))
  t5 <- primEq((t3, 0))
  if t5
    then b2589[]
    else b2906[t3, t4, 12]

-----------------------------------------
-- not recursive
b1496 :: [Bit 32, Bit 32] >>= [Unit]
b1496[t0, t1] =
  t2 <- b2338[str30, console]
  t3 <- lshr((t0, 1))
  t4 <- b1296[t1, t3]
  t5 <- add((t3, 1))
  t6 <- b1379[console, 32, t5]
  t7 <- b2338[str31, console]
  b1127[]

-----------------------------------------
-- not recursive
b1302 :: [] >>= [Unit]
b1302[] =
  t0 <- b2338[str29, console]
  b1127[]

-----------------------------------------
-- not recursive
b2593 :: [Bit 32] >>= [Unit]
b2593[t0] =
  t1 <- b2338[str18, console]
  t2 <- load32((4104))
  t3 <- b2338[str21, console]
  t4 <- b2338[str19, console]
  t5 <- b2338[str22, console]
  t6 <- b2338[t2, console]
  t7 <- b2338[str23, console]
  t8 <- b1362[console, 32, t2]
  t9 <- b2338[str24, console]
  t10 <- load32((4108))
  t11 <- b2338[str21, console]
  t12 <- b2338[str20, console]
  t13 <- b2338[str22, console]
  t14 <- b2338[t10, console]
  t15 <- b2338[str23, console]
  t16 <- b1362[console, 32, t10]
  t17 <- b2338[str24, console]
  t18 <- load32((4100))
  t19 <- load32((t18))
  t20 <- add((t18, 4))
  t21 <- b2379[t19, t20, 8]
  t22 <- load8((t0))
  t23 <- primEq((t22, 1))
  if t23
    then b1302[]
    else b1496[t22, intervals]

-----------------------------------------
-- recursive
b2909 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2909[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t2))
  t7 <- add((t0, -1))
  t8 <- b2338[str25, console]
  t9 <- b2338[t3, console]
  t10 <- b2338[str26, console]
  t11 <- b1379[console, 32, t4]
  t12 <- b2338[str27, console]
  t13 <- b2338[str11, console]
  t14 <- load32((t1))
  t15 <- b1362[console, 32, t14]
  t16 <- b2338[str12, console]
  t17 <- add((t1, 4))
  t18 <- load32((t17))
  t19 <- b1362[console, 32, t18]
  t20 <- b2338[str13, console]
  t21 <- b2338[str28, console]
  t22 <- add((t4, 1))
  t23 <- primEq((t7, 0))
  if t23
    then b2593[t5]
    else b2909[t7, t6, 8, t3, t22, t5]

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "mmap"

-----------------------------------------
-- not recursive
b2597 :: [Bit 32] >>= [Unit]
b2597[t0] =
  t1 <- b2338[str16, console]
  t2 <- load32((4100))
  t3 <- load32((t2))
  t4 <- add((t2, 4))
  t5 <- primEq((t3, 0))
  if t5
    then b2593[t0]
    else b2909[t3, t4, 8, str17, 0, t0]

-----------------------------------------
-- recursive
b2922 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2922[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t2))
  t7 <- add((t0, -1))
  t8 <- b2338[str25, console]
  t9 <- b2338[t3, console]
  t10 <- b2338[str26, console]
  t11 <- b1379[console, 32, t4]
  t12 <- b2338[str27, console]
  t13 <- b2338[str8, console]
  t14 <- load32((t1))
  t15 <- b1362[console, 32, t14]
  t16 <- b2338[str9, console]
  t17 <- add((t1, 4))
  t18 <- load32((t17))
  t19 <- b1362[console, 32, t18]
  t20 <- b2338[str10, console]
  t21 <- add((t1, 8))
  t22 <- load32((t21))
  t23 <- b1362[console, 32, t22]
  t24 <- b2338[str28, console]
  t25 <- add((t4, 1))
  t26 <- primEq((t7, 0))
  if t26
    then b2597[t5]
    else b2922[t7, t6, 12, t3, t25, t5]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "header"

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- b2287[itoaBuf, 0]
  t1 <- store8((console, 0))
  t2 <- add((console, 1))
  t3 <- store8((t2, 0))
  t4 <- add((console, 2))
  t5 <- store8((t4, 24))
  t6 <- add((console, 3))
  t7 <- store8((t6, 79))
  t8 <- add((console, 4))
  t9 <- store8((t8, 0))
  t10 <- add((console, 5))
  t11 <- store8((t10, 0))
  t12 <- add((console, 6))
  t13 <- store8((t12, 10))
  t14 <- b2293[intervals, 0]
  t15 <- add((intervals, 64))
  t16 <- store8((t15, 1))
  t17 <- load8((console))
  t18 <- load8((t2))
  t19 <- store8((t8, t17))
  t20 <- store8((t10, t18))
  t21 <- load8((t4))
  t22 <- load8((t6))
  t23 <- load8((t12))
  t24 <- b997[t17, t21, t23, t22, t18]
  t25 <- b2338[str0, console]
  t26 <- b2338[str14, console]
  t27 <- load32((4096))
  t28 <- load32((t27))
  t29 <- add((t27, 4))
  t30 <- primEq((t28, 0))
  if t30
    then b2597[t15]
    else b2922[t28, t29, 12, str15, 0, t15]

-----------------------------------------
-- Entrypoints:
