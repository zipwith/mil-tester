struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

bitdata Interval /64
  = Interval [ lo :: Bit 32 | hi :: Bit 32 ]
    -- predInterval(x :: Bit 64) = true

-- bit pattern:
--  ________________________________________________________________

struct IntervalSet / 65
  [ array :: Array 8 (Stored Interval)  {- offset=0 -}
  | last :: Stored Last  {- offset=64 -} ]
  aligned 8

bitdata Last /4
  = Empty [ X1 ]
    -- predEmpty(x :: Bit 4) = x == 0x1
  | Last [ n :: Ix 8 | B0 ]
    -- predLast(x :: Bit 4) = (x & 0x1) == 0x0

-- bit pattern:
--  000_
--  0010
--  01_0
--  1__0

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
s228 :: Unit
s228 <-
  Unit()

-----------------------------------------
-- not recursive
b1988 :: [] >>= [Unit]
b1988[] =
  return s228

-----------------------------------------
-- recursive
b2286 :: [Bit 32, Bit 32] >>= [Unit]
b2286[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b2285[t4, t3]
b2285 :: [Bit 32, Bit 32] >>= [Unit]
b2285[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b2286[t0, t1]
    else b1988[]

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- recursive
b2332 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2332[t0, t1, t2, t3] =
  t4 <- store32((t2, t1))
  t5 <- add((t2, 4))
  t6 <- store32((t5, t0))
  t7 <- add((t3, 1))
  t8 <- add((t2, 8))
  b2331[t0, t1, t8, t7]
b2331 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2331[t0, t1, t2, t3] =
  t4 <- primUlt((t3, 8))
  if t4
    then b2332[t0, t1, t2, t3]
    else b1988[]

-----------------------------------------
-- not recursive
intervals :: Bit 32
intervals <- area IntervalSet aligned 8

-----------------------------------------
-- recursive
b996 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b996[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b996[t11, t1, t2, t3]
    else b1988[]

-----------------------------------------
-- recursive
b998 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b998[t0, t1, t2, t3, t4] =
  t5 <- b996[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b998[t6, t1, t2, t3, t4]
    else b1988[]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "calc-untyped kernel has booted!\n"

-----------------------------------------
-- not recursive
b2297 :: [Bit 32] >>= [Unit]
b2297[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b264 :: [Bit 32] >>= [Unit]
b264[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- primEq((t2, 0))
  if t3
    then b264[t0]
    else b2297[t0]

-----------------------------------------
-- recursive
b1003 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1003[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1003[t11, t1, t2, t3]
    else b1988[]

-----------------------------------------
-- recursive
b1006 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1006[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1006[t13, t1, t2, t3]
    else b1988[]

-----------------------------------------
-- recursive
b1346 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1346[t0, t1, t2, t3, t4, t5] =
  t6 <- b1006[t3, t2, t0, t5]
  b2613[1, t5, t1, t4, t3, t2]
b2613 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2613[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1346[t1, t2, t5, t4, t3, t6]
    else b1003[t4, t5, t3, t2]

-----------------------------------------
-- not recursive
b375 :: [Bit 32] >>= [Unit]
b375[t0] =
  t1 <- load8((t0))
  t2 <- add((t0, 1))
  t3 <- load8((t2))
  t4 <- add((t0, 2))
  t5 <- load8((t4))
  t6 <- add((t0, 3))
  t7 <- load8((t6))
  t8 <- add((t0, 6))
  t9 <- load8((t8))
  t10 <- add((t1, 1))
  t11 <- primUle((t10, t5))
  if t11
    then b1346[t1, t5, t7, t3, t9, t10]
    else b1003[t3, t7, t9, t5]

-----------------------------------------
-- not recursive
b2620 :: [Bit 32, Bit 32] >>= [Unit]
b2620[t0, t1] =
  t2 <- add((t1, 4))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b364 :: [Bit 32, Bit 32] >>= [Unit]
b364[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- add((t1, 5))
  t4 <- load8((t2))
  t5 <- store8((t3, t4))
  t6 <- add((t1, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t7))
  if t9
    then b2620[t8, t1]
    else b375[t1]

-----------------------------------------
-- not recursive
b2624 :: [Bit 32, Bit 32] >>= [Unit]
b2624[t0, t1] =
  t2 <- add((t1, 5))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b352 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b352[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- load8((t3))
  t5 <- add((t1, 6))
  t6 <- load8((t5))
  t7 <- mul((t2, 160))
  t8 <- mul((t4, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- and((t0, 255))
  t12 <- shl((t6, 8))
  t13 <- or((t11, t12))
  t14 <- store16((t10, t13))
  t15 <- add((t1, 3))
  t16 <- load8((t15))
  t17 <- add((t4, 1))
  t18 <- primUle((t17, t16))
  if t18
    then b2624[t17, t1]
    else b364[t2, t1]

-----------------------------------------
-- not recursive
b355 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b355[t0, t1, t2] =
  t3 <- primEq((t2, 10))
  if t3
    then b364[t0, t1]
    else b352[t2, t1, t0]

-----------------------------------------
-- not recursive
b1104 :: [Bit 32, Bit 32] >>= [Unit]
b1104[t0, t1] =
  t2 <- add((t1, 4))
  t3 <- load8((t2))
  t4 <- primEq((t0, 13))
  if t4
    then b364[t3, t1]
    else b355[t3, t1, t0]

-----------------------------------------
-- recursive
b2672 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2672[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1003[t0, t1, t2, t3]
  b2337[t5, t6]
b2350 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2350[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- mul((t3, 160))
  t8 <- mul((t0, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- shl((t2, 8))
  t12 <- or((t11, 32))
  t13 <- store16((t10, t12))
  t14 <- add((t0, 1))
  t15 <- primUle((t14, t1))
  if t15
    then b2672[t14, t1, t2, t3, t4, t5, t6]
    else b2337[t5, t6]
b2348 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2348[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- add((t0, 1))
  t5 <- load8((t4))
  t6 <- add((t0, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 3))
  t9 <- load8((t8))
  t10 <- add((t0, 6))
  t11 <- load8((t10))
  t12 <- add((t3, 1))
  t13 <- primUle((t12, t7))
  if t13
    then b2667[t12, t3, t7, t9, t5, t11, t1, t2, t0]
    else b2350[t5, t9, t11, t7, t1, t2, t0]
b2667 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2667[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- b1006[t4, t3, t1, t0]
  t10 <- b2613[1, t0, t2, t5, t4, t3]
  b2337[t7, t8]
b2346 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2346[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  t5 <- add((t1, 5))
  t6 <- load8((t4))
  t7 <- store8((t5, t6))
  t8 <- add((t1, 2))
  t9 <- load8((t8))
  t10 <- add((t0, 1))
  t11 <- primUle((t10, t9))
  if t11
    then b2663[t10, t1, t2, t3]
    else b2348[t1, t2, t3]
b2663 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2663[t0, t1, t2, t3] =
  t4 <- add((t1, 4))
  t5 <- store8((t4, t0))
  b2337[t3, t1]
b2355 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2355[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b2346[t4, t1, t0, t2]
    else b2475[t4, t1, t0, t2]
b2475 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2475[t0, t1, t2, t3] =
  t4 <- primEq((t2, 10))
  if t4
    then b2346[t0, t1, t2, t3]
    else b2660[t2, t1, t0, t3]
b2660 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2660[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- load8((t4))
  t6 <- add((t1, 6))
  t7 <- load8((t6))
  t8 <- mul((t2, 160))
  t9 <- mul((t5, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- and((t0, 255))
  t13 <- shl((t7, 8))
  t14 <- or((t12, t13))
  t15 <- store16((t11, t14))
  t16 <- add((t1, 3))
  t17 <- load8((t16))
  t18 <- add((t5, 1))
  t19 <- primUle((t18, t17))
  if t19
    then b2658[t18, t1, t0, t3]
    else b2346[t2, t1, t0, t3]
b2658 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2658[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- store8((t4, t0))
  b2337[t3, t1]
b2339 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2339[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- b264[t0]
  t5 <- primEq((t0, 10))
  if t5
    then b2344[t0, t2, t3]
    else b2355[t0, t2, t3]
b2344 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2344[t0, t1, t2] =
  t3 <- b264[13]
  t4 <- b1104[t0, t1]
  b2337[t2, t1]
b2337 :: [Bit 32, Bit 32] >>= [Unit]
b2337[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1988[]
    else b2339[t2, t0, t1]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "Headers:\n"

-----------------------------------------
-- not recursive
str25 :: Bit 32
str25 <- " "

-----------------------------------------
-- not recursive
str26 :: Bit 32
str26 <- "["

-----------------------------------------
-- not recursive
b1145 :: [Bit 32, Bit 32] >>= [Unit]
b1145[t0, t1] =
  t2 <- b264[13]
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b364[t4, t1]
    else b355[t4, t1, t0]

-----------------------------------------
-- not recursive
b1147 :: [Bit 32, Bit 32] >>= [Unit]
b1147[t0, t1] =
  t2 <- b264[t0]
  t3 <- primEq((t0, 10))
  if t3
    then b1145[t0, t1]
    else b1104[t0, t1]

-----------------------------------------
-- recursive
b2635 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2635[t0, t1, t2] =
  t3 <- b1147[t1, t2]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 0))
  if t5
    then b2635[t4, t1, t2]
    else b1988[]

-----------------------------------------
-- not recursive
b2633 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2633[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b2635[t5, t4, t3]
    else b1988[]

-----------------------------------------
-- recursive
b1526 :: [Bit 32, Bit 32] >>= [Unit]
b1526[t0, t1] =
  t2 <- add((itoaBuf, t0))
  t3 <- load8((t2))
  t4 <- b1147[t3, t1]
  t5 <- add((t0, -1))
  t6 <- primSle((0, t5))
  if t6
    then b1526[t5, t1]
    else b1988[]

-----------------------------------------
-- not recursive
b1531 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1531[t0, t1, t2] =
  t3 <- b2633[1, t2, 0, t1, t0]
  b1526[t2, t1]

-----------------------------------------
-- recursive
b2183 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2183[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b2182[t1, t7, t2, t3, t4, t5]
b2181 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2181[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b2182[t1, t7, t2, t3, t4, t5]
b2182 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2182[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b2828[t7, t2, t3, t4, t5]
    else b1531[t5, t4, t3]
b2828 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2828[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b1531[t4, t3, t2]
    else b1528[t5, t0, t3, t4]
b1528 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1528[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b2181[t5, t4, t0, t1, t2, t3]
    else b2183[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1610 :: [Bit 32] >>= [Unit]
b1610[t0] =
  t1 <- load8((itoaBuf))
  t2 <- b1147[t1, t0]
  return s228

-----------------------------------------
-- not recursive
b2642 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2642[t0, t1, t2] =
  t3 <- b1147[t1, t2]
  t4 <- b2633[1, t0, 0, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b1147[t5, t2]
  return s228

-----------------------------------------
-- not recursive
b2640 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2640[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t1))
  if t5
    then b2642[t4, t2, t3]
    else b1610[t3]

-----------------------------------------
-- not recursive
b2187 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2187[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b2640[1, 0, t4, t3]
    else b1528[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b2185 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2185[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- nzdiv((t2, 10))
  t9 <- primEq((t8, 0))
  if t9
    then b2640[1, 0, t4, t3]
    else b1528[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b1380 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1380[t0, t1, t2] =
  t3 <- nzrem((t2, 10))
  t4 <- primUle((t3, 9))
  if t4
    then b2185[t3, itoaBuf, t2, t0, t1]
    else b2187[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str27 :: Bit 32
str27 <- "]: "

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "[0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "-0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "], entry 0x"

-----------------------------------------
-- recursive
b2191 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2191[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b2190[t1, t7, t2, t3, t4, t5]
b2189 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2189[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b2190[t1, t7, t2, t3, t4, t5]
b2190 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2190[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b2646[t7, t2, t3, t4, t5]
    else b1531[t5, t4, t3]
b2646 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2646[t0, t1, t2, t3, t4] =
  t5 <- lshr((t1, 4))
  t6 <- primEq((t5, 0))
  if t6
    then b1531[t4, t3, t2]
    else b1544[t5, t0, t3, t4]
b1544 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1544[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- and((t0, 15))
  t6 <- primUle((t5, 9))
  if t6
    then b2189[t5, t4, t0, t1, t2, t3]
    else b2191[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b2195 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2195[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 87))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b2640[1, 0, t4, t3]
    else b1544[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b2193 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2193[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 48))
  t6 <- and((t5, 255))
  t7 <- store8((t1, t6))
  t8 <- lshr((t2, 4))
  t9 <- primEq((t8, 0))
  if t9
    then b2640[1, 0, t4, t3]
    else b1544[t8, 1, t3, t4]

-----------------------------------------
-- not recursive
b1363 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1363[t0, t1, t2] =
  t3 <- and((t2, 15))
  t4 <- primUle((t3, 9))
  if t4
    then b2193[t3, itoaBuf, t2, t0, t1]
    else b2195[t3, itoaBuf, t2, t0, t1]

-----------------------------------------
-- not recursive
str28 :: Bit 32
str28 <- "\n"

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "[0x"

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "-0x"

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "]"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- "Strings:\n"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- "cmdline"

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- " "

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- "imgline"

-----------------------------------------
-- not recursive
str22 :: Bit 32
str22 <- ": "

-----------------------------------------
-- not recursive
str23 :: Bit 32
str23 <- " ["

-----------------------------------------
-- not recursive
str24 :: Bit 32
str24 <- "]\n"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "Adding interval "

-----------------------------------------
-- not recursive
str34 :: Bit 32
str34 <- "[0x"

-----------------------------------------
-- not recursive
str35 :: Bit 32
str35 <- " - 0x"

-----------------------------------------
-- not recursive
str36 :: Bit 32
str36 <- "]"

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "\n"

-----------------------------------------
-- not recursive
b1240 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1240[t0, t1, t2, t3] =
  t4 <- shl((t3, 1))
  t5 <- shl((t3, 3))
  t6 <- add((t2, t5))
  t7 <- store32((t6, t1))
  t8 <- add((t6, 4))
  t9 <- store32((t8, t0))
  t10 <- add((t2, 64))
  t11 <- store8((t10, t4))
  return flag1

-----------------------------------------
-- not recursive
b1201 :: [Bit 32] >>= [Bit 1]
b1201[t0] =
  t1 <- add((t0, 64))
  t2 <- store8((t1, 0))
  return flag0

-----------------------------------------
-- not recursive
b2698 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2698[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1240[t5, t4, t6, t7]
    else b1201[t3]

-----------------------------------------
-- not recursive
b496 :: [Bit 32, Bit 32] >>= [Bit 1]
b496[t0, t1] =
  t2 <- shl((t1, 1))
  t3 <- add((t0, 64))
  t4 <- store8((t3, t2))
  return flag0

-----------------------------------------
-- not recursive
b2679 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2679[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1240[t5, t4, t6, t7]
    else b496[t3, t1]

-----------------------------------------
-- recursive
b1957 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1957[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t2))
  if t7
    then b2684[1, t3, t6, t4, t5, t2, t0]
    else b2684[1, t3, t6, t4, t5, t1, t0]
b1933 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1933[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t3, t0))
  if t8
    then b1956[t1, t2, t3, t4, t5, t6, t7]
    else b1957[t0, t1, t2, t4, t5, t6, t7]
b1956 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1956[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t0, t1))
  if t7
    then b2684[1, t3, t6, t4, t5, t1, t2]
    else b2684[1, t3, t6, t4, t5, t0, t2]
b2684 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2684[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2682[t7, t2, t4, t3, t1, t6, t5]
    else b1240[t6, t5, t4, t2]
b2682 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2682[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t1, 3))
  t8 <- add((t3, t7))
  t9 <- shl((t4, 3))
  t10 <- add((t3, t9))
  t11 <- load32((t8))
  t12 <- add((t8, 4))
  t13 <- load32((t12))
  t14 <- store32((t10, t11))
  t15 <- add((t10, 4))
  t16 <- store32((t15, t13))
  b1422[t5, t6, t0, t2, t3, t4]
b1770 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1770[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t0, t2))
  if t8
    then b2221[t0, t2, t1, t3, t4, t5, t6, t7]
    else b1933[t2, t3, t0, t1, t4, t5, t6, t7]
b2221 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2221[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, 1))
  t9 <- primUlt((t8, t1))
  if t9
    then b2697[1, t4, t7, t3, t1, t5, t6]
    else b1933[t1, t3, t0, t2, t4, t5, t6, t7]
b2222 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2222[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, 1))
  t9 <- primUlt((t8, t1))
  if t9
    then b2697[1, t4, t7, t0, t2, t5, t6]
    else b1770[t3, t1, t2, t0, t4, t5, t6, t7]
b2697 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2697[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1422[t4, t3, t2, t6, t5, t7]
    else b2679[1, t1, 7, t5, t3, t4, t6]
b1422 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1422[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t5, 3))
  t7 <- add((t4, t6))
  t8 <- load32((t7))
  t9 <- add((t7, 4))
  t10 <- load32((t9))
  t11 <- primUlt((t1, t10))
  if t11
    then b2222[t1, t10, t0, t8, t5, t4, t3, t2]
    else b1770[t8, t10, t0, t1, t5, t4, t3, t2]

-----------------------------------------
-- not recursive
b2704 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2704[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b1422[t4, t3, t2, t6, t5, t7]
    else b2698[1, 0, 7, t5, t3, t4, t6]

-----------------------------------------
-- recursive
b2228 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2228[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 1))
  t8 <- primUlt((t7, t1))
  if t8
    then b2704[1, 0, t6, t0, t2, t4, t5]
    else b2229[t3, t2, t1, t0, t4, t5, t6]
b1960 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1960[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t2))
  if t6
    then b2709[1, 0, t5, t3, t4, t2, t0]
    else b2709[1, 0, t5, t3, t4, t1, t0]
b2301 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2301[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 1))
  t8 <- primUlt((t7, t1))
  if t8
    then b2704[1, 0, t6, t3, t1, t4, t5]
    else b1937[t1, t3, t0, t2, t4, t5, t6]
b1937 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1937[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t3, t0))
  if t7
    then b1959[t1, t2, t3, t4, t5, t6]
    else b1960[t0, t1, t2, t4, t5, t6]
b1959 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b1959[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t0, t1))
  if t6
    then b2709[1, 0, t5, t3, t4, t1, t2]
    else b2709[1, 0, t5, t3, t4, t0, t2]
b2709 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2709[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2707[t7, t2, t4, t3, t6, t5]
    else b1240[t6, t5, t4, t2]
b2707 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2707[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t1, 3))
  t7 <- add((t3, t6))
  t8 <- load32((t7))
  t9 <- add((t7, 4))
  t10 <- load32((t9))
  t11 <- store32((t3, t8))
  t12 <- add((t3, 4))
  t13 <- store32((t12, t10))
  t14 <- load32((t3))
  t15 <- load32((t12))
  t16 <- primUlt((t5, t15))
  if t16
    then b2228[t5, t15, t4, t14, t3, t2, t0]
    else b2229[t14, t4, t15, t5, t3, t2, t0]
b2229 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b2229[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t0, t1))
  if t7
    then b2301[t0, t1, t2, t3, t4, t5, t6]
    else b1937[t1, t3, t0, t2, t4, t5, t6]

-----------------------------------------
-- recursive
b2434 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2434[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t3, 1))
  t8 <- shl((t3, 3))
  t9 <- add((t2, t8))
  t10 <- store32((t9, t1))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t0))
  t13 <- add((t2, 64))
  t14 <- store8((t13, t7))
  t15 <- b2337[str3, console]
  b2378[t5, t6, 8]
b2455 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2455[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- b2229[t0, t2, t1, t3, t4, t5, t6]
  t11 <- b2337[str3, console]
  b2378[t8, t9, 8]
b2443 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2443[t0, t1, t2, t3] =
  t4 <- add((t0, 64))
  t5 <- store8((t4, 0))
  t6 <- b2337[str3, console]
  b2378[t2, t3, 8]
b2736 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2736[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2738[t10, t9, t8, t7, t6, t5, t4]
    else b2443[t3, t6, t5, t4]
b2738 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2738[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1240[t2, t3, t1, t0]
  t8 <- b2337[str3, console]
  b2378[t5, t6, 8]
b2457 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2457[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- primUlt((t1, t2))
  if t9
    then b2722[1, 0, t5, t3, t8, t7, t6, t4, t2, t0]
    else b2722[1, 0, t5, t3, t8, t7, t6, t4, t1, t0]
b2446 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2446[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t3, t0))
  if t10
    then b2447[t1, t2, t3, t4, t5, t6, t7, t8, t9]
    else b2457[t0, t1, t2, t4, t5, t6, t7, t8, t9]
b2447 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2447[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- primUlt((t0, t1))
  if t9
    then b2722[1, 0, t5, t3, t8, t7, t6, t4, t1, t2]
    else b2722[1, 0, t5, t3, t8, t7, t6, t4, t0, t2]
b2722 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2722[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2720[t10, t2, t7, t3, t9, t8, t6, t5, t4]
    else b2434[t9, t8, t7, t2, t6, t5, t4]
b2720 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2720[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t1, 3))
  t10 <- add((t3, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- store32((t3, t11))
  t15 <- add((t3, 4))
  t16 <- store32((t15, t13))
  t17 <- load32((t3))
  t18 <- load32((t15))
  t19 <- primUlt((t5, t18))
  if t19
    then b2450[t5, t18, t4, t17, t3, t2, t0, t6, t7, t8]
    else b2455[t17, t18, t4, t5, t3, t2, t0, t6, t7, t8]
b2450 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2450[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2735[1, 0, t6, t9, t8, t7, t0, t2, t4, t5]
    else b2455[t3, t1, t2, t0, t4, t5, t6, t7, t8, t9]
b2735 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2735[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2733[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2736[1, 0, 7, t8, t3, t4, t5, t6, t7, t9]
b2733 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2733[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- b1422[t4, t5, t3, t1, t2, t0]
  t10 <- b2337[str3, console]
  b2378[t7, t8, 8]
b2799 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2799[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2801[t10, t9, t8, t7, t6, t5, t4]
    else b2443[t3, t6, t5, t4]
b2801 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2801[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 1))
  t8 <- shl((t0, 3))
  t9 <- add((t1, t8))
  t10 <- store32((t9, t3))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t2))
  t13 <- add((t1, 64))
  t14 <- store8((t13, t7))
  t15 <- b2337[str3, console]
  b2378[t5, t6, 8]
b2437 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2437[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t1, t2))
  if t10
    then b2744[1, t3, t6, t4, t9, t8, t7, t5, t2, t0]
    else b2744[1, t3, t6, t4, t9, t8, t7, t5, t1, t0]
b2431 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2431[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t3, t0))
  if t11
    then b2432[t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2437[t0, t1, t2, t4, t5, t6, t7, t8, t9, t10]
b2432 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2432[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t0, t1))
  if t10
    then b2744[1, t3, t6, t4, t9, t8, t7, t5, t1, t2]
    else b2744[1, t3, t6, t4, t9, t8, t7, t5, t0, t2]
b2744 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2744[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2742[t10, t2, t7, t3, t1, t9, t8, t6, t5, t4]
    else b2434[t9, t8, t7, t2, t6, t5, t4]
b2742 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2742[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- shl((t1, 3))
  t11 <- add((t3, t10))
  t12 <- shl((t4, 3))
  t13 <- add((t3, t12))
  t14 <- load32((t11))
  t15 <- add((t11, 4))
  t16 <- load32((t15))
  t17 <- store32((t13, t14))
  t18 <- add((t13, 4))
  t19 <- store32((t18, t16))
  t20 <- b1422[t5, t6, t0, t2, t3, t4]
  t21 <- b2337[str3, console]
  b2378[t8, t9, 8]
b2816 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2816[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2801[t10, t9, t8, t7, t6, t5, t4]
    else b2441[t3, t1, t6, t5, t4]
b2441 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2441[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 1))
  t6 <- add((t0, 64))
  t7 <- store8((t6, t5))
  t8 <- b2337[str3, console]
  b2378[t3, t4, 8]
b2422 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2422[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t3, 1))
  t8 <- shl((t3, 3))
  t9 <- add((t2, t8))
  t10 <- store32((t9, t1))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t0))
  t13 <- add((t2, 64))
  t14 <- store8((t13, t7))
  b2423[t4, t5, t6]
b2426 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2426[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t1, t2))
  if t11
    then b2757[1, t4, t7, t5, t10, t9, t8, t6, t2, t0]
    else b2757[1, t4, t7, t5, t10, t9, t8, t6, t1, t0]
b2419 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2419[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t3, t0))
  if t11
    then b2420[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2426[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
b2420 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2420[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t1, t2))
  if t11
    then b2757[1, t4, t7, t5, t10, t9, t8, t6, t2, t3]
    else b2757[1, t4, t7, t5, t10, t9, t8, t6, t1, t3]
b2757 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2757[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- sub((t2, t0))
  t11 <- primSle((t1, t10))
  if t11
    then b2755[t10, t2, t7, t3, t1, t9, t8, t6, t5, t4]
    else b2422[t9, t8, t7, t2, t6, t5, t4]
b2755 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2755[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- shl((t1, 3))
  t11 <- add((t3, t10))
  t12 <- shl((t4, 3))
  t13 <- add((t3, t12))
  t14 <- load32((t11))
  t15 <- add((t11, 4))
  t16 <- load32((t15))
  t17 <- store32((t13, t14))
  t18 <- add((t13, 4))
  t19 <- store32((t18, t16))
  t20 <- b1422[t5, t6, t0, t2, t3, t4]
  b2423[t7, t8, t9]
b2430 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2430[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 1))
  t6 <- add((t0, 64))
  t7 <- store8((t6, t5))
  b2423[t2, t3, t4]
b2416 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2416[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2770[1, t3, t7, t10, t9, t8, t0, t5, t4, t6]
    else b2417[t2, t1, t5, t0, t3, t4, t6, t7, t8, t9, t10]
b2768 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2768[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2416[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2417[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2417 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2417[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2418[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2419[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2412 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2412[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2418[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2431[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2418 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2418[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2770[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2419[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2770 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2770[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2768[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2775[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2394 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2394[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2395[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2419[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2395 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2395[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2793[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2419[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2791 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2791[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2393[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2394[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2408 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2408[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- primUlt((t0, t2))
  if t11
    then b2409[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10]
    else b2431[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9, t10]
b2409 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2409[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2812[1, t4, t7, t10, t9, t8, t3, t1, t5, t6]
    else b2431[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9, t10]
b2812 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2812[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2810[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2816[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2810 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2810[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2393[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2412[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2444 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2444[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- primUlt((t0, t2))
  if t10
    then b2445[t0, t2, t1, t3, t4, t5, t6, t7, t8, t9]
    else b2446[t2, t3, t0, t1, t4, t5, t6, t7, t8, t9]
b2445 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2445[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2807[1, 0, t6, t9, t8, t7, t3, t1, t4, t5]
    else b2446[t1, t3, t0, t2, t4, t5, t6, t7, t8, t9]
b2385 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2385[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- lshr((t0, 1))
  t9 <- load32((t2))
  t10 <- add((t2, 4))
  t11 <- load32((t10))
  t12 <- primUlt((t4, t11))
  if t12
    then b2386[t4, t11, t9, t2, t3, t1, t8, t5, t6, t7]
    else b2444[t9, t11, t3, t4, t2, t1, t8, t5, t6, t7]
b2386 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2386[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, 1))
  t11 <- primUlt((t10, t1))
  if t11
    then b2807[1, 0, t6, t9, t8, t7, t0, t4, t3, t5]
    else b2444[t2, t1, t4, t0, t3, t5, t6, t7, t8, t9]
b2807 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2807[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2805[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2799[1, 0, 7, t8, t3, t4, t5, t6, t7, t9]
b2805 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2805[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- shl((t0, 3))
  t10 <- add((t2, t9))
  t11 <- load32((t10))
  t12 <- add((t10, 4))
  t13 <- load32((t12))
  t14 <- primUlt((t5, t13))
  if t14
    then b2393[t5, t13, t11, t0, t2, t4, t1, t3, t6, t7, t8]
    else b2408[t11, t13, t4, t5, t0, t2, t1, t3, t6, t7, t8]
b2393 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2393[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10] =
  t11 <- add((t0, 1))
  t12 <- primUlt((t11, t1))
  if t12
    then b2793[1, t3, t7, t10, t9, t8, t0, t5, t4, t6]
    else b2394[t2, t1, t5, t0, t3, t4, t6, t7, t8, t9, t10]
b2793 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2793[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2791[t10, t9, t8, t2, t7, t6, t5, t4, t3]
    else b2775[1, t1, 7, t8, t3, t4, t5, t6, t7, t9]
b2775 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2775[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t1, t0))
  t11 <- primUle((t10, t2))
  if t11
    then b2773[t10, t9, t8, t7, t6, t5, t4]
    else b2430[t3, t1, t6, t5, t4]
b2773 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2773[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 1))
  t8 <- shl((t0, 3))
  t9 <- add((t1, t8))
  t10 <- store32((t9, t3))
  t11 <- add((t9, 4))
  t12 <- store32((t11, t2))
  t13 <- add((t1, 64))
  t14 <- store8((t13, t7))
  b2423[t4, t5, t6]
b2423 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2423[t0, t1, t2] =
  t3 <- b2337[str3, console]
  b2378[t1, t2, 8]
b2380 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2380[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- b2337[str2, console]
  t9 <- b2337[str34, console]
  t10 <- b1363[console, 32, t5]
  t11 <- b2337[str35, console]
  t12 <- b1363[console, 32, t7]
  t13 <- b2337[str36, console]
  t14 <- add((intervals, 64))
  t15 <- load8((t14))
  t16 <- primEq((t15, 1))
  if t16
    then b2383[intervals, t5, t7, t1, t4, t3]
    else b2385[t15, intervals, intervals, t5, t7, t1, t4, t3]
b2383 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2383[t0, t1, t2, t3, t4, t5] =
  t6 <- store32((t0, t2))
  t7 <- add((t0, 4))
  t8 <- store32((t7, t1))
  t9 <- add((t0, 64))
  t10 <- store8((t9, 0))
  t11 <- b2337[str3, console]
  b2378[t4, t5, 8]
b2378 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2378[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b1988[]
    else b2380[t0, t1, t2]

-----------------------------------------
-- not recursive
str30 :: Bit 32
str30 <- "Interval set contains:\n"

-----------------------------------------
-- not recursive
str32 :: Bit 32
str32 <- "  "

-----------------------------------------
-- not recursive
str33 :: Bit 32
str33 <- "\n"

-----------------------------------------
-- recursive
b2819 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2819[t0, t1, t2] =
  t3 <- shl((t0, 3))
  t4 <- add((t1, t3))
  t5 <- load32((t4))
  t6 <- add((t4, 4))
  t7 <- load32((t6))
  t8 <- b2337[str32, console]
  t9 <- b2337[str34, console]
  t10 <- b1363[console, 32, t7]
  t11 <- b2337[str35, console]
  t12 <- b1363[console, 32, t5]
  t13 <- b2337[str36, console]
  t14 <- b2337[str33, console]
  t15 <- add((t0, 1))
  t16 <- primUle((t15, t2))
  if t16
    then b2819[t15, t1, t2]
    else b1988[]

-----------------------------------------
-- not recursive
b1297 :: [Bit 32, Bit 32] >>= [Unit]
b1297[t0, t1] =
  t2 <- load32((t0))
  t3 <- add((t0, 4))
  t4 <- load32((t3))
  t5 <- b2337[str32, console]
  t6 <- b2337[str34, console]
  t7 <- b1363[console, 32, t4]
  t8 <- b2337[str35, console]
  t9 <- b1363[console, 32, t2]
  t10 <- b2337[str36, console]
  t11 <- b2337[str33, console]
  t12 <- primUle((1, t1))
  if t12
    then b2819[1, t0, t1]
    else b1988[]

-----------------------------------------
-- not recursive
str31 :: Bit 32
str31 <- " intervals\n"

-----------------------------------------
-- not recursive
b513 :: [Bit 32] >>= [Unit]
b513[t0] =
  t1 <- add((t0, 64))
  store8((t1, 1))

-----------------------------------------
-- not recursive
b989 :: [Bit 32, Bit 32] >>= [Unit]
b989[t0, t1] =
  t2 <- shl((t1, 1))
  t3 <- add((t0, 64))
  store8((t3, t2))

-----------------------------------------
-- not recursive
b2840 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2840[t0, t1, t2, t3, t4] =
  t5 <- shl((t0, 3))
  t6 <- add((t4, t5))
  t7 <- add((t3, 1))
  t8 <- shl((t0, 1))
  t9 <- store32((t6, t1))
  t10 <- add((t6, 4))
  t11 <- store32((t10, t7))
  t12 <- add((t4, 64))
  store8((t12, t8))

-----------------------------------------
-- not recursive
b1266 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1266[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- shl((t0, 3))
  t8 <- add((t6, t7))
  t9 <- add((t4, -1))
  t10 <- store32((t8, t9))
  t11 <- add((t8, 4))
  t12 <- store32((t11, t3))
  t13 <- add((t1, 1))
  t14 <- primUle((t13, 7))
  if t14
    then b2840[t13, t2, t3, t5, t6]
    else b989[t6, t1]

-----------------------------------------
-- recursive
b2847 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2847[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2845[t7, t2, t6, t5, t4, t3]
    else b513[t6]
b2845 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2845[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t1, 3))
  t7 <- add((t2, t6))
  t8 <- shl((t5, 3))
  t9 <- add((t2, t8))
  t10 <- load32((t7))
  t11 <- add((t7, 4))
  t12 <- load32((t11))
  t13 <- store32((t9, t10))
  t14 <- add((t9, 4))
  t15 <- store32((t14, t12))
  t16 <- add((t5, -1))
  t17 <- primSle((0, t16))
  if t17
    then b2850[t16, t2, t3, t4, t0]
    else b989[t2, t0]
b1269 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1269[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t3, t0))
  if t6
    then b1270[t0, t5, t2, t3, t4, t1]
    else b2847[1, 0, t1, t4, t3, t2, t5]
b1270 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1270[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t4, 3))
  t7 <- add((t1, t6))
  t8 <- add((t3, 1))
  t9 <- store32((t7, t0))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t8))
  t12 <- add((t4, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2850[t12, t1, t2, t3, t5]
    else b989[t1, t5]
b1264 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1264[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t3))
  if t7
    then b1265[t0, t1, t6, t3, t4, t5, t2]
    else b1269[t0, t2, t3, t4, t5, t6]
b1265 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1265[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t4, t0))
  if t7
    then b1266[t5, t6, t0, t1, t3, t4, t2]
    else b1268[t1, t2, t3, t4, t5, t6]
b1268 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1268[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t4, 3))
  t7 <- add((t1, t6))
  t8 <- add((t2, -1))
  t9 <- store32((t7, t8))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t0))
  t12 <- add((t4, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2850[t12, t1, t2, t3, t5]
    else b989[t1, t5]
b1262 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1262[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUlt((t1, t3))
  if t7
    then b2848[1, 0, t6, t4, t1, t0, t5]
    else b1264[t2, t3, t4, t0, t1, t6, t5]
b2848 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2848[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- sub((t2, t0))
  t8 <- primSle((t1, t7))
  if t8
    then b2850[t7, t6, t5, t4, t3]
    else b989[t6, t3]
b2850 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2850[t0, t1, t2, t3, t4] =
  t5 <- shl((t0, 3))
  t6 <- add((t1, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- primUlt((t7, t2))
  if t10
    then b2848[1, 0, t0, t4, t3, t2, t1]
    else b1262[t2, t3, t7, t9, t4, t1, t0]

-----------------------------------------
-- not recursive
b2854 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2854[t0, t1, t2, t3, t4] =
  t5 <- shl((t1, 3))
  t6 <- add((t2, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- store32((t6, t7))
  t11 <- store32((t8, t9))
  t12 <- add((t1, -1))
  t13 <- primSle((0, t12))
  if t13
    then b2850[t12, t2, t3, t4, t0]
    else b989[t2, t0]

-----------------------------------------
-- not recursive
b2856 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2856[t0, t1, t2, t3, t4, t5] =
  t6 <- sub((t2, t0))
  t7 <- primSle((t1, t6))
  if t7
    then b2854[t6, t2, t5, t4, t3]
    else b513[t5]

-----------------------------------------
-- not recursive
b1281 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1281[t0, t1, t2, t3, t4] =
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- add((t3, 1))
  t8 <- store32((t6, t0))
  t9 <- add((t6, 4))
  t10 <- store32((t9, t7))
  t11 <- add((t4, -1))
  t12 <- primSle((0, t11))
  if t12
    then b2850[t11, t1, t2, t3, t4]
    else b989[t1, t4]

-----------------------------------------
-- not recursive
b1280 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1280[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t3, t0))
  if t5
    then b1281[t0, t4, t2, t3, t1]
    else b2856[1, 0, t1, t3, t2, t4]

-----------------------------------------
-- not recursive
b1278 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1278[t0, t1, t2, t3, t4] =
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- add((t2, -1))
  t8 <- store32((t6, t7))
  t9 <- add((t6, 4))
  t10 <- store32((t9, t0))
  t11 <- add((t4, -1))
  t12 <- primSle((0, t11))
  if t12
    then b2850[t11, t1, t2, t3, t4]
    else b989[t1, t4]

-----------------------------------------
-- not recursive
b1277 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1277[t0, t1, t2, t3, t4, t5] =
  t6 <- shl((t0, 3))
  t7 <- add((t5, t6))
  t8 <- add((t3, -1))
  t9 <- store32((t7, t8))
  t10 <- add((t7, 4))
  t11 <- store32((t10, t2))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, 7))
  if t13
    then b2840[t12, t1, t2, t4, t5]
    else b989[t5, t0]

-----------------------------------------
-- not recursive
b1276 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1276[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t4, t0))
  if t6
    then b1277[t5, t0, t1, t3, t4, t2]
    else b1278[t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b1275 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1275[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t3))
  if t6
    then b1276[t0, t1, t5, t3, t4, t2]
    else b1280[t0, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b2872 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2872[t0, t1, t2, t3, t4, t5] =
  t6 <- sub((t2, t0))
  t7 <- primSle((t1, t6))
  if t7
    then b2850[t6, t5, t4, t3, t2]
    else b989[t5, t2]

-----------------------------------------
-- not recursive
b1273 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1273[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t1, t3))
  if t6
    then b2872[1, 0, t5, t1, t0, t4]
    else b1275[t2, t3, t5, t0, t1, t4]

-----------------------------------------
-- not recursive
b1473 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1473[t0, t1, t2, t3] =
  t4 <- lshr((t0, 1))
  t5 <- shl((t4, 3))
  t6 <- add((t1, t5))
  t7 <- load32((t6))
  t8 <- add((t6, 4))
  t9 <- load32((t8))
  t10 <- primUlt((t7, t2))
  if t10
    then b2872[1, 0, t4, t3, t2, t1]
    else b1273[t2, t3, t7, t9, t1, t4]

-----------------------------------------
-- not recursive
b942 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b942[t0, t1, t2] =
  t3 <- add((t2, 64))
  t4 <- load8((t3))
  t5 <- primEq((t4, 1))
  if t5
    then b1988[]
    else b1473[t4, t2, t0, t1]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "Reserving interval "

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "\n"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "interval  "

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "\n"

-----------------------------------------
-- not recursive
str37 :: Bit 32
str37 <- "  "

-----------------------------------------
-- not recursive
str38 :: Bit 32
str38 <- " "

-----------------------------------------
-- not recursive
str39 :: Bit 32
str39 <- " ("

-----------------------------------------
-- not recursive
str40 :: Bit 32
str40 <- " bits)\n"

-----------------------------------------
-- not recursive
b1597 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1597[t0, t1, t2, t3] =
  t4 <- b1380[t0, t1, t2]
  t5 <- b2337[str39, console]
  t6 <- b1380[console, 32, t3]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1988[]
    else b2339[t7, str40, console]

-----------------------------------------
-- not recursive
b2833 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2833[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b2640[1, 0, t3, t2]
    else b1528[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b2891 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2891[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b2833[t6, t3, t4, t5]
    else b2640[1, 0, t5, t4]

-----------------------------------------
-- not recursive
b1506 :: [Bit 32] >>= [Unit]
b1506[t0] =
  t1 <- b2337[str39, console]
  t2 <- b1380[console, 32, t0]
  t3 <- load8((str40))
  t4 <- primEq((t3, 0))
  if t4
    then b1988[]
    else b2339[t3, str40, console]

-----------------------------------------
-- not recursive
b2875 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2875[t0, t1, t2, t3, t4] =
  t5 <- b1003[t0, t1, t2, t3]
  t6 <- b2337[str39, console]
  t7 <- b1380[console, 32, t4]
  t8 <- load8((str40))
  t9 <- primEq((t8, 0))
  if t9
    then b1988[]
    else b2339[t8, str40, console]

-----------------------------------------
-- not recursive
b1587 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1587[t0, t1, t2, t3, t4] =
  t5 <- mul((t3, 160))
  t6 <- mul((t0, 2))
  t7 <- add((t5, t6))
  t8 <- add((t7, 753664))
  t9 <- shl((t2, 8))
  t10 <- or((t9, 32))
  t11 <- store16((t8, t10))
  t12 <- add((t0, 1))
  t13 <- primUle((t12, t1))
  if t13
    then b2875[t12, t1, t2, t3, t4]
    else b1506[t4]

-----------------------------------------
-- not recursive
b2880 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2880[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1006[t4, t3, t1, t0]
  t8 <- b2613[1, t0, t2, t5, t4, t3]
  t9 <- b2337[str39, console]
  t10 <- b1380[console, 32, t6]
  t11 <- load8((str40))
  t12 <- primEq((t11, 0))
  if t12
    then b1988[]
    else b2339[t11, str40, console]

-----------------------------------------
-- not recursive
b1585 :: [Bit 32, Bit 32] >>= [Unit]
b1585[t0, t1] =
  t2 <- load8((t0))
  t3 <- add((t0, 1))
  t4 <- load8((t3))
  t5 <- add((t0, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 3))
  t8 <- load8((t7))
  t9 <- add((t0, 6))
  t10 <- load8((t9))
  t11 <- add((t2, 1))
  t12 <- primUle((t11, t6))
  if t12
    then b2880[t11, t2, t6, t8, t4, t10, t1]
    else b1587[t4, t8, t10, t6, t1]

-----------------------------------------
-- not recursive
b2885 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2885[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- store8((t3, t0))
  t5 <- b2337[str39, console]
  t6 <- b1380[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1988[]
    else b2339[t7, str40, console]

-----------------------------------------
-- not recursive
b1583 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1583[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- add((t1, 5))
  t5 <- load8((t3))
  t6 <- store8((t4, t5))
  t7 <- add((t1, 2))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t8))
  if t10
    then b2885[t9, t1, t2]
    else b1585[t1, t2]

-----------------------------------------
-- not recursive
b2889 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2889[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- store8((t3, t0))
  t5 <- b2337[str39, console]
  t6 <- b1380[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1988[]
    else b2339[t7, str40, console]

-----------------------------------------
-- not recursive
b1591 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1591[t0, t1, t2, t3] =
  t4 <- add((t1, 5))
  t5 <- load8((t4))
  t6 <- add((t1, 6))
  t7 <- load8((t6))
  t8 <- mul((t2, 160))
  t9 <- mul((t5, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- and((t0, 255))
  t13 <- shl((t7, 8))
  t14 <- or((t12, t13))
  t15 <- store16((t11, t14))
  t16 <- add((t1, 3))
  t17 <- load8((t16))
  t18 <- add((t5, 1))
  t19 <- primUle((t18, t17))
  if t19
    then b2889[t18, t1, t3]
    else b1583[t2, t1, t3]

-----------------------------------------
-- not recursive
b1590 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1590[t0, t1, t2, t3] =
  t4 <- primEq((t2, 10))
  if t4
    then b1583[t0, t1, t3]
    else b1591[t2, t1, t0, t3]

-----------------------------------------
-- not recursive
b1582 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1582[t0, t1, t2] =
  t3 <- add((t1, 4))
  t4 <- load8((t3))
  t5 <- primEq((t0, 13))
  if t5
    then b1583[t4, t1, t2]
    else b1590[t4, t1, t0, t2]

-----------------------------------------
-- not recursive
b1581 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1581[t0, t1, t2] =
  t3 <- b264[13]
  t4 <- b1104[t0, t1]
  t5 <- b2337[str39, console]
  t6 <- b1380[console, 32, t2]
  t7 <- load8((str40))
  t8 <- primEq((t7, 0))
  if t8
    then b1988[]
    else b2339[t7, str40, console]

-----------------------------------------
-- not recursive
b2276 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2276[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b2891[1, 0, 31, t2, t3, t4]
  t11 <- b264[t6]
  t12 <- primEq((t6, 10))
  if t12
    then b1581[t6, t3, t5]
    else b1582[t6, t3, t5]

-----------------------------------------
-- not recursive
b2275 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2275[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b2891[1, 0, 31, t2, t3, t4]
  t11 <- b264[t6]
  t12 <- primEq((t6, 10))
  if t12
    then b1581[t6, t3, t5]
    else b1582[t6, t3, t5]

-----------------------------------------
-- not recursive
b1594 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1594[t0, t1, t2, t3, t4] =
  t5 <- ashr((t0, t1))
  t6 <- nzrem((t5, 10))
  t7 <- primUle((t6, 9))
  if t7
    then b2275[t6, itoaBuf, t5, t2, 32, t4, t3]
    else b2276[t6, itoaBuf, t5, t2, 32, t4, t3]

-----------------------------------------
-- not recursive
b1596 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1596[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- ashr((t5, t0))
  t8 <- shl((t7, t0))
  t9 <- primEq((t8, t5))
  if t9
    then b1594[t5, t0, t1, t2, t6]
    else b1597[t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b1595 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1595[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- ashr((t0, t8))
  t11 <- shl((t10, t8))
  t12 <- primEq((t11, t0))
  if t12
    then b1594[t0, t8, t7, t6, t9]
    else b1596[t5, t4, t3, t1, t2, t0, t9]

-----------------------------------------
-- not recursive
b1593 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1593[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- ashr((t0, t11))
  t14 <- shl((t13, t11))
  t15 <- primEq((t14, t0))
  if t15
    then b1594[t0, t11, t10, t9, t12]
    else b1595[t0, t1, t2, t3, t4, t5, t6, t7, t8, t12]

-----------------------------------------
-- not recursive
b1580 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1580[t0, t1, t2] =
  t3 <- b264[t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1581[t0, t1, t2]
    else b1582[t0, t1, t2]

-----------------------------------------
-- not recursive
b1928 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1928[t0, t1, t2] =
  t3 <- b2337[str37, console]
  t4 <- b2337[str34, console]
  t5 <- b1363[console, 32, t1]
  t6 <- b2337[str35, console]
  t7 <- b1363[console, 32, t2]
  t8 <- b2337[str36, console]
  t9 <- b2337[str38, console]
  t10 <- sub((t2, t1))
  t11 <- add((t10, 1))
  t12 <- primEq((t11, 0))
  if t12
    then b1580[48, console, t0]
    else b1593[t11, console, 32, 75, console, 10, 77, console, 20, 71, console, 30, t0]

-----------------------------------------
-- not recursive
b548 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32] >>= [Unit]
b548[t0, t1, t2] =
  t3 <- t0 @ t1
  t4 <- t3 @ t2
  t4 @ []

-----------------------------------------
-- recursive
b550 :: [Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b550[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t2, t6))
  if t7
    then b548[t1, t5, t4]
    else b547[t4, t3, t2, t1, t0]
b547 :: [Bit 32, Bit 32, Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32] >>= [Unit]
b547[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 1))
  t6 <- primUlt((t5, 32))
  if t6
    then b552[t3, t2, t1, t5, t4]
    else b548[t3, t4, t5]
b552 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b552[t0, t1, t2, t3, t4] =
  t5 <- mul((t4, 2))
  t6 <- add((t5, 1))
  t7 <- and((t2, t6))
  t8 <- primNeq((t7, 0))
  if t8
    then b548[t0, t4, t3]
    else b550[t6, t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b1095 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32] >>= [Unit]
b1095[t0, t1] =
  t2 <- t0 @ t1
  t3 <- t2 @ 12
  t3 @ []

-----------------------------------------
-- not recursive
b1096 :: [Bit 32, [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32] >>= [Unit]
b1096[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t2, t5))
  if t6
    then b1095[t1, t4]
    else b552[t1, t2, t3, 13, t0]

-----------------------------------------
-- not recursive
b1093 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], Bit 32, Bit 32, Bit 32] >>= [Unit]
b1093[t0, t1, t2, t3] =
  t4 <- mul((t3, 2))
  t5 <- add((t4, 1))
  t6 <- and((t2, t5))
  t7 <- primNeq((t6, 0))
  if t7
    then b1095[t0, t3]
    else b1096[t5, t0, t1, t2, t3]

-----------------------------------------
-- recursive
b1847 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1847[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- b1489[t3, t0, t1]
  t5 <- add((t2, t0))
  t6 <- add((t5, 1))
  t7 <- primUlt((t1, t6))
  if t7
    then b1988[]
    else b1093[t4, t1, t3, t0]
b1489 :: [Bit 32, Bit 32, Bit 32] >>= [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
b1489[t0, t1, t2] =
  k517{t2, t1, t0}
k517 :: {Bit 32, Bit 32, Bit 32} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
k517{t0, t1, t2} t3 = k524{t0, t1, t2, t3}
k524 :: {Bit 32, Bit 32, Bit 32, Bit 32} [Bit 32] ->> [[] ->> [Unit]]
k524{t0, t1, t2, t3} t4 = k531{t0, t1, t4, t2, t3}
k531 :: {Bit 32, Bit 32, Bit 32, Bit 32, Bit 32} [] ->> [Unit]
k531{t0, t1, t2, t3, t4} [] = b1844[t4, t3, t2, t1, t0]
b1844 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1844[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- b1928[t2, t1, t5]
  t7 <- primUlt((t5, t4))
  if t7
    then b1847[t3, t4, t5]
    else b1988[]

-----------------------------------------
-- recursive
b1954 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1954[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b1844[t5, t3, t4, t2, t1]
    else b1966[t4, t3, t1, t2, t0]
b1966 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1966[t0, t1, t2, t3, t4] =
  t5 <- add((t0, 1))
  t6 <- primUlt((t5, 32))
  if t6
    then b1930[t2, t3, t1, t5, t4]
    else b1844[t4, t1, t5, t3, t2]
b1930 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1930[t0, t1, t2, t3, t4] =
  t5 <- mul((t4, 2))
  t6 <- add((t5, 1))
  t7 <- and((t2, t6))
  t8 <- primNeq((t7, 0))
  if t8
    then b1844[t4, t2, t3, t1, t0]
    else b1954[t6, t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b1929 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1929[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- b1928[t2, t1, t4]
  t6 <- primUlt((t4, t3))
  if t6
    then b1847[t0, t3, t4]
    else b1988[]

-----------------------------------------
-- not recursive
b1730 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1730[t0, t1, t2, t3] =
  t4 <- add((t3, t0))
  t5 <- primUlt((t1, t4))
  if t5
    then b1929[t2, t3, 12, t1]
    else b1930[t1, t2, t3, 13, t0]

-----------------------------------------
-- not recursive
b1608 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1608[t0, t1, t2] =
  t3 <- mul((t1, 2))
  t4 <- add((t3, 1))
  t5 <- and((t2, t4))
  t6 <- primNeq((t5, 0))
  if t6
    then b1929[t1, t2, 12, t0]
    else b1730[t4, t0, t1, t2]

-----------------------------------------
-- not recursive
b1488 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1488[t0, t1, t2] =
  t3 <- add((t0, t2))
  t4 <- primUlt((t1, t3))
  if t4
    then b1988[]
    else b1608[t1, t2, t0]

-----------------------------------------
-- not recursive
b1119 :: [Bit 32, Bit 32] >>= [Unit]
b1119[t0, t1] =
  t2 <- add((t0, 4095))
  t3 <- and((t2, -4096))
  t4 <- primUlt((t3, t0))
  if t4
    then b1988[]
    else b1488[t3, t1, 4095]

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "Halting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b1120 :: [] >>= [Unit]
b1120[] =
  t0 <- load8((str1))
  t1 <- primEq((t0, 0))
  if t1
    then b1988[]
    else b2339[t0, str1, console]

-----------------------------------------
-- recursive
b2896 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2896[t0, t1, t2] =
  t3 <- shl((t0, 3))
  t4 <- add((t1, t3))
  t5 <- load32((t4))
  t6 <- add((t4, 4))
  t7 <- load32((t6))
  t8 <- b2337[str6, console]
  t9 <- b2337[str34, console]
  t10 <- b1363[console, 32, t7]
  t11 <- b2337[str35, console]
  t12 <- b1363[console, 32, t5]
  t13 <- b2337[str36, console]
  t14 <- b2337[str7, console]
  t15 <- b1119[t7, t5]
  t16 <- add((t0, 1))
  t17 <- primUle((t16, t2))
  if t17
    then b2896[t16, t1, t2]
    else b1120[]

-----------------------------------------
-- not recursive
b1495 :: [Bit 32, Bit 32] >>= [Unit]
b1495[t0, t1] =
  t2 <- lshr((t0, 1))
  t3 <- load32((t1))
  t4 <- add((t1, 4))
  t5 <- load32((t4))
  t6 <- b2337[str6, console]
  t7 <- b2337[str34, console]
  t8 <- b1363[console, 32, t5]
  t9 <- b2337[str35, console]
  t10 <- b1363[console, 32, t3]
  t11 <- b2337[str36, console]
  t12 <- b2337[str7, console]
  t13 <- b1119[t5, t3]
  t14 <- primUle((1, t2))
  if t14
    then b2896[1, t1, t2]
    else b1120[]

-----------------------------------------
-- not recursive
b1496 :: [Bit 32, Bit 32] >>= [Unit]
b1496[t0, t1] =
  t2 <- b2337[str30, console]
  t3 <- lshr((t0, 1))
  t4 <- b1297[t1, t3]
  t5 <- add((t3, 1))
  t6 <- b1380[console, 32, t5]
  t7 <- b2337[str31, console]
  t8 <- add((intervals, 64))
  t9 <- load8((t8))
  t10 <- primEq((t9, 1))
  if t10
    then b1120[]
    else b1495[t9, intervals]

-----------------------------------------
-- not recursive
str29 :: Bit 32
str29 <- "Interval set is empty\n"

-----------------------------------------
-- not recursive
b1300 :: [] >>= [Unit]
b1300[] =
  t0 <- b2337[str29, console]
  t1 <- add((intervals, 64))
  t2 <- load8((t1))
  t3 <- primEq((t2, 1))
  if t3
    then b1120[]
    else b1495[t2, intervals]

-----------------------------------------
-- not recursive
b2588 :: [] >>= [Unit]
b2588[] =
  t0 <- add((intervals, 64))
  t1 <- load8((t0))
  t2 <- primEq((t1, 1))
  if t2
    then b1300[]
    else b1496[t1, intervals]

-----------------------------------------
-- recursive
b2905 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2905[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- b2337[str4, console]
  t9 <- b2337[str34, console]
  t10 <- b1363[console, 32, t5]
  t11 <- b2337[str35, console]
  t12 <- b1363[console, 32, t7]
  t13 <- b2337[str36, console]
  t14 <- b942[t5, t7, intervals]
  t15 <- b2337[str5, console]
  t16 <- primEq((t4, 0))
  if t16
    then b2588[]
    else b2905[t4, t3, 12]

-----------------------------------------
-- not recursive
b1128 :: [] >>= [Unit]
b1128[] =
  t0 <- b942[0, 1048575, intervals]
  t1 <- b942[-1073741824, -1, intervals]
  t2 <- load32((4096))
  t3 <- load32((t2))
  t4 <- add((t2, 4))
  t5 <- primEq((t3, 0))
  if t5
    then b2588[]
    else b2905[t3, t4, 12]

-----------------------------------------
-- not recursive
b1497 :: [Bit 32, Bit 32] >>= [Unit]
b1497[t0, t1] =
  t2 <- b2337[str30, console]
  t3 <- lshr((t0, 1))
  t4 <- b1297[t1, t3]
  t5 <- add((t3, 1))
  t6 <- b1380[console, 32, t5]
  t7 <- b2337[str31, console]
  b1128[]

-----------------------------------------
-- not recursive
b1303 :: [] >>= [Unit]
b1303[] =
  t0 <- b2337[str29, console]
  b1128[]

-----------------------------------------
-- not recursive
b2592 :: [Bit 32] >>= [Unit]
b2592[t0] =
  t1 <- b2337[str18, console]
  t2 <- load32((4104))
  t3 <- b2337[str21, console]
  t4 <- b2337[str19, console]
  t5 <- b2337[str22, console]
  t6 <- b2337[t2, console]
  t7 <- b2337[str23, console]
  t8 <- b1363[console, 32, t2]
  t9 <- b2337[str24, console]
  t10 <- load32((4108))
  t11 <- b2337[str21, console]
  t12 <- b2337[str20, console]
  t13 <- b2337[str22, console]
  t14 <- b2337[t10, console]
  t15 <- b2337[str23, console]
  t16 <- b1363[console, 32, t10]
  t17 <- b2337[str24, console]
  t18 <- load32((4100))
  t19 <- load32((t18))
  t20 <- add((t18, 4))
  t21 <- b2378[t19, t20, 8]
  t22 <- load8((t0))
  t23 <- primEq((t22, 1))
  if t23
    then b1303[]
    else b1497[t22, intervals]

-----------------------------------------
-- recursive
b2908 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2908[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t2))
  t7 <- add((t0, -1))
  t8 <- b2337[str25, console]
  t9 <- b2337[t3, console]
  t10 <- b2337[str26, console]
  t11 <- b1380[console, 32, t4]
  t12 <- b2337[str27, console]
  t13 <- b2337[str11, console]
  t14 <- load32((t1))
  t15 <- b1363[console, 32, t14]
  t16 <- b2337[str12, console]
  t17 <- add((t1, 4))
  t18 <- load32((t17))
  t19 <- b1363[console, 32, t18]
  t20 <- b2337[str13, console]
  t21 <- b2337[str28, console]
  t22 <- add((t4, 1))
  t23 <- primEq((t7, 0))
  if t23
    then b2592[t5]
    else b2908[t7, t6, 8, t3, t22, t5]

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "mmap"

-----------------------------------------
-- not recursive
b2596 :: [Bit 32] >>= [Unit]
b2596[t0] =
  t1 <- b2337[str16, console]
  t2 <- load32((4100))
  t3 <- load32((t2))
  t4 <- add((t2, 4))
  t5 <- primEq((t3, 0))
  if t5
    then b2592[t0]
    else b2908[t3, t4, 8, str17, 0, t0]

-----------------------------------------
-- recursive
b2921 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2921[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t2))
  t7 <- add((t0, -1))
  t8 <- b2337[str25, console]
  t9 <- b2337[t3, console]
  t10 <- b2337[str26, console]
  t11 <- b1380[console, 32, t4]
  t12 <- b2337[str27, console]
  t13 <- b2337[str8, console]
  t14 <- load32((t1))
  t15 <- b1363[console, 32, t14]
  t16 <- b2337[str9, console]
  t17 <- add((t1, 4))
  t18 <- load32((t17))
  t19 <- b1363[console, 32, t18]
  t20 <- b2337[str10, console]
  t21 <- add((t1, 8))
  t22 <- load32((t21))
  t23 <- b1363[console, 32, t22]
  t24 <- b2337[str28, console]
  t25 <- add((t4, 1))
  t26 <- primEq((t7, 0))
  if t26
    then b2596[t5]
    else b2921[t7, t6, 12, t3, t25, t5]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "header"

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- b2285[itoaBuf, 0]
  t1 <- store8((console, 0))
  t2 <- add((console, 1))
  t3 <- store8((t2, 0))
  t4 <- add((console, 2))
  t5 <- store8((t4, 24))
  t6 <- add((console, 3))
  t7 <- store8((t6, 79))
  t8 <- add((console, 4))
  t9 <- store8((t8, 0))
  t10 <- add((console, 5))
  t11 <- store8((t10, 0))
  t12 <- add((console, 6))
  t13 <- store8((t12, 10))
  t14 <- b2331[0, 0, intervals, 0]
  t15 <- add((intervals, 64))
  t16 <- store8((t15, 1))
  t17 <- load8((console))
  t18 <- load8((t2))
  t19 <- store8((t8, t17))
  t20 <- store8((t10, t18))
  t21 <- load8((t4))
  t22 <- load8((t6))
  t23 <- load8((t12))
  t24 <- b998[t17, t21, t23, t22, t18]
  t25 <- b2337[str0, console]
  t26 <- b2337[str14, console]
  t27 <- load32((4096))
  t28 <- load32((t27))
  t29 <- add((t27, 4))
  t30 <- primEq((t28, 0))
  if t30
    then b2596[t15]
    else b2921[t28, t29, 12, str15, 0, t15]

-----------------------------------------
-- Entrypoints:
