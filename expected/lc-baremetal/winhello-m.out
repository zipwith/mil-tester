Loading source files ...
Running type checker ...
Using passes "csoros":
Running constructor function rewrite ...
Running type checker ...
Running specializer ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running representation transformation ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running specializer ...
Running type checker ...
*** MIL output file:
struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
s62 :: Unit
s62 <-
  Unit()

-----------------------------------------
-- not recursive
b736 :: [] >>= [Unit]
b736[] =
  return s62

-----------------------------------------
-- recursive
b831 :: [Bit 32, Bit 32] >>= [Unit]
b831[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b830[t4, t3]
b830 :: [Bit 32, Bit 32] >>= [Unit]
b830[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b831[t0, t1]
    else b736[]

-----------------------------------------
-- not recursive
topleft :: Bit 32
topleft <- area Window aligned 8

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "\nhhhh   hhhh\n"

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- " hh    hhh        lll lll\n"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- " hh    hh   eeee  ll  ll   oooo\n"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- " hhhhhhhh  ee  ee ll  ll  oo  oo\n"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- " hh    hh eeeeeee ll  ll oo   oo\n"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- " hh    hh  ee     ll  ll oo  oo\n"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "hhh   hhhh  eeee  ll  ll  oooo\n"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "\n"

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "    K e r n e l   W o r l d\n"

-----------------------------------------
-- not recursive
botright :: Bit 32
botright <- area Window aligned 8

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "\n      from LC and MIL\n"

-----------------------------------------
-- recursive
b497 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b497[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b497[t11, t1, t2, t3]
    else b736[]

-----------------------------------------
-- recursive
b500 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b500[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b500[t13, t1, t2, t3]
    else b736[]

-----------------------------------------
-- recursive
b951 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b951[t0, t1, t2, t3, t4, t5] =
  t6 <- b500[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b951[t7, t0, t2, t3, t4, t5]
    else b497[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b343 :: [Bit 32] >>= [Unit]
b343[t0] =
  t1 <- load8((t0))
  t2 <- add((t0, 1))
  t3 <- load8((t2))
  t4 <- add((t0, 2))
  t5 <- load8((t4))
  t6 <- add((t0, 3))
  t7 <- load8((t6))
  t8 <- add((t0, 6))
  t9 <- load8((t8))
  t10 <- add((t1, 1))
  t11 <- primUle((t10, t5))
  if t11
    then b951[t10, t1, t5, t7, t3, t9]
    else b497[t3, t7, t9, t5]

-----------------------------------------
-- not recursive
b960 :: [Bit 32, Bit 32] >>= [Unit]
b960[t0, t1] =
  t2 <- add((t1, 4))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b332 :: [Bit 32, Bit 32] >>= [Unit]
b332[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- add((t1, 5))
  t4 <- load8((t2))
  t5 <- store8((t3, t4))
  t6 <- add((t1, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t7))
  if t9
    then b960[t8, t1]
    else b343[t1]

-----------------------------------------
-- not recursive
b964 :: [Bit 32, Bit 32] >>= [Unit]
b964[t0, t1] =
  t2 <- add((t1, 5))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b320 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b320[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- load8((t3))
  t5 <- add((t1, 6))
  t6 <- load8((t5))
  t7 <- mul((t2, 160))
  t8 <- mul((t4, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- and((t0, 255))
  t12 <- shl((t6, 8))
  t13 <- or((t11, t12))
  t14 <- store16((t10, t13))
  t15 <- add((t1, 3))
  t16 <- load8((t15))
  t17 <- add((t4, 1))
  t18 <- primUle((t17, t16))
  if t18
    then b964[t17, t1]
    else b332[t2, t1]

-----------------------------------------
-- not recursive
b323 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b323[t0, t1, t2] =
  t3 <- primEq((t2, 10))
  if t3
    then b332[t0, t1]
    else b320[t2, t1, t0]

-----------------------------------------
-- not recursive
b325 :: [Bit 32, Bit 32] >>= [Unit]
b325[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load8((t2))
  t4 <- primEq((t1, 13))
  if t4
    then b332[t3, t0]
    else b323[t3, t0, t1]

-----------------------------------------
-- recursive
b858 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b858[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- b325[t2, t0]
  t5 <- load8((t3))
  t6 <- primEq((t5, 0))
  if t6
    then b736[]
    else b858[t5, t3, t2]

-----------------------------------------
-- not recursive
b856 :: [Bit 32, Bit 32] >>= [Unit]
b856[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b736[]
    else b858[t2, t0, t1]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "6 * 7 = "

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- recursive
b550 :: [Bit 32, Bit 32] >>= [Unit]
b550[t0, t1] =
  t2 <- add((itoaBuf, t0))
  t3 <- load8((t2))
  t4 <- b325[t1, t3]
  t5 <- add((t0, -1))
  t6 <- primSle((0, t5))
  if t6
    then b550[t5, t1]
    else b736[]

-----------------------------------------
-- recursive
b1044 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1044[t0, t1, t2, t3] =
  t4 <- b325[t2, t1]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 0))
  if t6
    then b1044[t5, t1, t2, t3]
    else b550[t3, t2]

-----------------------------------------
-- not recursive
b1043 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1043[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b1044[t5, t4, t3, t1]
    else b550[t1, t3]

-----------------------------------------
-- recursive
b803 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b803[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b802[t1, t7, t2, t3, t4, t5]
b1030 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1030[t0, t1, t2, t3, t4] =
  t5 <- lshr((t1, 4))
  t6 <- primEq((t5, 0))
  if t6
    then b1043[1, t2, 0, t3, t4]
    else b609[t5, t0, t3, t4]
b609 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b609[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- and((t0, 15))
  t6 <- primUle((t5, 9))
  if t6
    then b801[t5, t4, t0, t1, t2, t3]
    else b803[t5, t4, t0, t1, t2, t3]
b801 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b801[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b802[t1, t7, t2, t3, t4, t5]
b802 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b802[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b1030[t7, t2, t3, t4, t5]
    else b1043[1, t3, 0, t4, t5]

-----------------------------------------
-- not recursive
topright :: Bit 32
topright <- area Window aligned 8

-----------------------------------------
-- recursive
b514 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b514[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b514[t11, t1, t2, t3]
    else b736[]

-----------------------------------------
-- recursive
b516 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b516[t0, t1, t2, t3, t4] =
  t5 <- b514[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b516[t6, t1, t2, t3, t4]
    else b736[]

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "fac("

-----------------------------------------
-- not recursive
b648 :: [Bit 32] >>= [Unit]
b648[t0] =
  t1 <- load8((itoaBuf))
  t2 <- b325[t0, t1]
  return s62

-----------------------------------------
-- recursive
b975 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b975[t0, t1, t2] =
  t3 <- b325[t2, t1]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 2))
  if t5
    then b975[t4, t1, t2]
    else b736[]

-----------------------------------------
-- not recursive
b973 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b973[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b975[t5, t4, t3]
    else b736[]

-----------------------------------------
-- not recursive
b982 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b982[t0, t1, t2] =
  t3 <- b325[t2, t1]
  t4 <- b973[1, t0, 2, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b325[t2, t5]
  return s62

-----------------------------------------
-- not recursive
b980 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b980[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b982[t5, t3, t4]
    else b648[t4]

-----------------------------------------
-- not recursive
b630 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b630[t0, t1, t2] =
  t3 <- b973[1, t0, 2, t1, t2]
  b550[t0, t1]

-----------------------------------------
-- recursive
b810 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b810[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b809[t1, t7, t2, t3, t4, t5]
b808 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b808[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b809[t1, t7, t2, t3, t4, t5]
b809 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b809[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b986[t7, t2, t3, t4, t5]
    else b630[t3, t4, t5]
b986 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b986[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b630[t2, t3, t4]
    else b627[t5, t0, t3, t4]
b627 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b627[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b808[t5, t4, t0, t1, t2, t3]
    else b810[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1011 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1011[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b980[1, 0, 2, t3, t2]
    else b627[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b1009 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1009[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1011[t6, t3, t4, t5]
    else b980[1, 0, 2, t5, t4]

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- ") = "

-----------------------------------------
-- recursive
b991 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b991[t0, t1, t2] =
  t3 <- b325[t2, t1]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 4))
  if t5
    then b991[t4, t1, t2]
    else b736[]

-----------------------------------------
-- not recursive
b989 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b989[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b991[t5, t4, t3]
    else b736[]

-----------------------------------------
-- not recursive
b998 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b998[t0, t1, t2] =
  t3 <- b325[t2, t1]
  t4 <- b989[1, t0, 4, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b325[t2, t5]
  return s62

-----------------------------------------
-- not recursive
b996 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b996[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b998[t5, t3, t4]
    else b648[t4]

-----------------------------------------
-- not recursive
b644 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b644[t0, t1, t2] =
  t3 <- b989[1, t0, 4, t1, t2]
  b550[t0, t1]

-----------------------------------------
-- recursive
b817 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b817[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b816[t1, t7, t2, t3, t4, t5]
b815 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b815[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b816[t1, t7, t2, t3, t4, t5]
b816 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b816[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 5))
  if t8
    then b1002[t7, t2, t3, t4, t5]
    else b644[t3, t4, t5]
b1002 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1002[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b644[t2, t3, t4]
    else b641[t5, t0, t3, t4]
b641 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b641[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b815[t5, t4, t0, t1, t2, t3]
    else b817[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1007 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1007[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b996[1, 0, 4, t3, t2]
    else b641[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b1005 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1005[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1007[t6, t3, t4, t5]
    else b996[1, 0, 4, t5, t4]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "\n"

-----------------------------------------
-- recursive
b824 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b824[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1005[1, 0, 5, t2, t3, t4]
  b683[t5, t2, t3, t6]
b821 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b821[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1009[1, 0, 31, t2, t3, t4]
  b687[t5, t2, t6, t3]
b382 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b382[t0, t1, t2, t3] =
  t4 <- b856[str1, t1]
  t5 <- nzrem((t2, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b819[t5, itoaBuf, t2, t1, 32, t0, t3]
    else b821[t5, itoaBuf, t2, t1, 32, t0, t3]
b819 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b819[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1009[1, 0, 31, t2, t3, t4]
  b687[t5, t2, t6, t3]
b687 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b687[t0, t1, t2, t3] =
  t4 <- b856[str2, t3]
  t5 <- nzrem((t2, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b822[t5, itoaBuf, t2, t3, 32, t1, t0]
    else b824[t5, itoaBuf, t2, t3, 32, t1, t0]
b822 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b822[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1005[1, 0, 5, t2, t3, t4]
  b683[t5, t2, t3, t6]
b683 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b683[t0, t1, t2, t3] =
  t4 <- b856[str3, t2]
  t5 <- add((t0, 1))
  t6 <- mul((t5, t1))
  b384[t3, t2, t5, t6]
b384 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b384[t0, t1, t2, t3] =
  t4 <- primUge((t2, t0))
  if t4
    then b736[]
    else b382[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
botleft :: Bit 32
botleft <- area Window aligned 8

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store8((topleft, 0))
  t1 <- add((topleft, 1))
  t2 <- store8((t1, 0))
  t3 <- add((topleft, 2))
  t4 <- store8((t3, 11))
  t5 <- add((topleft, 3))
  t6 <- store8((t5, 39))
  t7 <- add((topleft, 4))
  t8 <- store8((t7, 0))
  t9 <- add((topleft, 5))
  t10 <- store8((t9, 0))
  t11 <- add((topleft, 6))
  t12 <- store8((t11, 7))
  t13 <- store8((botright, 12))
  t14 <- add((botright, 1))
  t15 <- store8((t14, 40))
  t16 <- add((botright, 2))
  t17 <- store8((t16, 23))
  t18 <- add((botright, 3))
  t19 <- store8((t18, 79))
  t20 <- add((botright, 4))
  t21 <- store8((t20, 12))
  t22 <- add((botright, 5))
  t23 <- store8((t22, 40))
  t24 <- add((botright, 6))
  t25 <- store8((t24, 77))
  t26 <- b830[itoaBuf, 0]
  t27 <- store8((topright, 0))
  t28 <- add((topright, 1))
  t29 <- store8((t28, 40))
  t30 <- add((topright, 2))
  t31 <- store8((t30, 11))
  t32 <- add((topright, 3))
  t33 <- store8((t32, 79))
  t34 <- add((topright, 4))
  t35 <- store8((t34, 0))
  t36 <- add((topright, 5))
  t37 <- store8((t36, 40))
  t38 <- add((topright, 6))
  t39 <- store8((t38, 30))
  t40 <- store8((botleft, 12))
  t41 <- add((botleft, 1))
  t42 <- store8((t41, 0))
  t43 <- add((botleft, 2))
  t44 <- store8((t43, 23))
  t45 <- add((botleft, 3))
  t46 <- store8((t45, 39))
  t47 <- add((botleft, 4))
  t48 <- store8((t47, 12))
  t49 <- add((botleft, 5))
  t50 <- store8((t49, 0))
  t51 <- add((botleft, 6))
  t52 <- store8((t51, 32))
  t53 <- load8((topleft))
  t54 <- load8((t1))
  t55 <- store8((t7, t53))
  t56 <- store8((t9, t54))
  t57 <- load8((t3))
  t58 <- load8((t5))
  t59 <- load8((t11))
  t60 <- b516[t53, t57, t59, t58, t54]
  t61 <- b856[str4, topleft]
  t62 <- b856[str5, topleft]
  t63 <- b856[str6, topleft]
  t64 <- b856[str7, topleft]
  t65 <- b856[str8, topleft]
  t66 <- b856[str9, topleft]
  t67 <- b856[str10, topleft]
  t68 <- b856[str11, topleft]
  t69 <- b856[str12, topleft]
  t70 <- b856[str13, topleft]
  t71 <- load8((botright))
  t72 <- load8((t14))
  t73 <- store8((t20, t71))
  t74 <- store8((t22, t72))
  t75 <- load8((t16))
  t76 <- load8((t18))
  t77 <- load8((t24))
  t78 <- b516[t71, t75, t77, t76, t72]
  t79 <- b856[str4, botright]
  t80 <- b856[str5, botright]
  t81 <- b856[str6, botright]
  t82 <- b856[str7, botright]
  t83 <- b856[str8, botright]
  t84 <- b856[str9, botright]
  t85 <- b856[str10, botright]
  t86 <- b856[str11, botright]
  t87 <- b856[str12, botright]
  t88 <- b856[str13, botright]
  t89 <- load8((topright))
  t90 <- load8((t28))
  t91 <- store8((t34, t89))
  t92 <- store8((t36, t90))
  t93 <- load8((t30))
  t94 <- load8((t32))
  t95 <- load8((t38))
  t96 <- b516[t89, t93, t95, t94, t90]
  t97 <- b856[str0, topright]
  t98 <- store8((itoaBuf, 97))
  t99 <- add((itoaBuf, 1))
  t100 <- b802[t99, 50, 2, 1, topright, 32]
  t101 <- b325[topright, 10]
  t102 <- load8((botleft))
  t103 <- load8((t41))
  t104 <- store8((t47, t102))
  t105 <- store8((t49, t103))
  t106 <- load8((t43))
  t107 <- load8((t45))
  t108 <- load8((t51))
  t109 <- b516[t102, t106, t108, t107, t103]
  b384[20, botleft, 0, 1]

-----------------------------------------
-- Entrypoints:
Writing MIL code GraphViz output to "actual/lc-baremetal/winhello.dot" ...
Success!
