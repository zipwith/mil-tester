Loading source files ...
Running type checker ...
Using passes "csoros":
Running constructor function rewrite ...
Running type checker ...
Running specializer ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running representation transformation ...
Running type checker ...
Running optimizer ...
Running type checker ...
Running specializer ...
Running type checker ...
*** MIL output file:
struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
s62 :: Unit
s62 <-
  Unit()

-----------------------------------------
-- not recursive
b737 :: [] >>= [Unit]
b737[] =
  return s62

-----------------------------------------
-- recursive
b832 :: [Bit 32, Bit 32] >>= [Unit]
b832[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b831[t4, t3]
b831 :: [Bit 32, Bit 32] >>= [Unit]
b831[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b832[t0, t1]
    else b737[]

-----------------------------------------
-- not recursive
topleft :: Bit 32
topleft <- area Window aligned 8

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "\nhhhh   hhhh\n"

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- " hh    hhh        lll lll\n"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- " hh    hh   eeee  ll  ll   oooo\n"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- " hhhhhhhh  ee  ee ll  ll  oo  oo\n"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- " hh    hh eeeeeee ll  ll oo   oo\n"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- " hh    hh  ee     ll  ll oo  oo\n"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "hhh   hhhh  eeee  ll  ll  oooo\n"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "\n"

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "    K e r n e l   W o r l d\n"

-----------------------------------------
-- not recursive
botright :: Bit 32
botright <- area Window aligned 8

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "\n      from LC and MIL\n"

-----------------------------------------
-- recursive
b498 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b498[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b498[t11, t1, t2, t3]
    else b737[]

-----------------------------------------
-- recursive
b501 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b501[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b501[t13, t1, t2, t3]
    else b737[]

-----------------------------------------
-- recursive
b952 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b952[t0, t1, t2, t3, t4, t5] =
  t6 <- b501[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b952[t7, t0, t2, t3, t4, t5]
    else b498[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b344 :: [Bit 32] >>= [Unit]
b344[t0] =
  t1 <- load8((t0))
  t2 <- add((t0, 1))
  t3 <- load8((t2))
  t4 <- add((t0, 2))
  t5 <- load8((t4))
  t6 <- add((t0, 3))
  t7 <- load8((t6))
  t8 <- add((t0, 6))
  t9 <- load8((t8))
  t10 <- add((t1, 1))
  t11 <- primUle((t10, t5))
  if t11
    then b952[t10, t1, t5, t7, t3, t9]
    else b498[t3, t7, t9, t5]

-----------------------------------------
-- not recursive
b961 :: [Bit 32, Bit 32] >>= [Unit]
b961[t0, t1] =
  t2 <- add((t1, 4))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b333 :: [Bit 32, Bit 32] >>= [Unit]
b333[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- add((t1, 5))
  t4 <- load8((t2))
  t5 <- store8((t3, t4))
  t6 <- add((t1, 2))
  t7 <- load8((t6))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t7))
  if t9
    then b961[t8, t1]
    else b344[t1]

-----------------------------------------
-- not recursive
b965 :: [Bit 32, Bit 32] >>= [Unit]
b965[t0, t1] =
  t2 <- add((t1, 5))
  store8((t2, t0))

-----------------------------------------
-- not recursive
b321 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b321[t0, t1, t2] =
  t3 <- add((t1, 5))
  t4 <- load8((t3))
  t5 <- add((t1, 6))
  t6 <- load8((t5))
  t7 <- mul((t2, 160))
  t8 <- mul((t4, 2))
  t9 <- add((t7, t8))
  t10 <- add((t9, 753664))
  t11 <- and((t0, 255))
  t12 <- shl((t6, 8))
  t13 <- or((t11, t12))
  t14 <- store16((t10, t13))
  t15 <- add((t1, 3))
  t16 <- load8((t15))
  t17 <- add((t4, 1))
  t18 <- primUle((t17, t16))
  if t18
    then b965[t17, t1]
    else b333[t2, t1]

-----------------------------------------
-- not recursive
b324 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b324[t0, t1, t2] =
  t3 <- primEq((t2, 10))
  if t3
    then b333[t0, t1]
    else b321[t2, t1, t0]

-----------------------------------------
-- not recursive
b326 :: [Bit 32, Bit 32] >>= [Unit]
b326[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load8((t2))
  t4 <- primEq((t1, 13))
  if t4
    then b333[t3, t0]
    else b324[t3, t0, t1]

-----------------------------------------
-- recursive
b859 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b859[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- b326[t2, t0]
  t5 <- load8((t3))
  t6 <- primEq((t5, 0))
  if t6
    then b737[]
    else b859[t5, t3, t2]

-----------------------------------------
-- not recursive
b857 :: [Bit 32, Bit 32] >>= [Unit]
b857[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b737[]
    else b859[t2, t0, t1]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "6 * 7 = "

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- recursive
b551 :: [Bit 32, Bit 32] >>= [Unit]
b551[t0, t1] =
  t2 <- add((itoaBuf, t0))
  t3 <- load8((t2))
  t4 <- b326[t1, t3]
  t5 <- add((t0, -1))
  t6 <- primSle((0, t5))
  if t6
    then b551[t5, t1]
    else b737[]

-----------------------------------------
-- recursive
b1045 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1045[t0, t1, t2, t3] =
  t4 <- b326[t2, t1]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 0))
  if t6
    then b1045[t5, t1, t2, t3]
    else b551[t3, t2]

-----------------------------------------
-- not recursive
b1044 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1044[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b1045[t5, t4, t3, t1]
    else b551[t1, t3]

-----------------------------------------
-- recursive
b804 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b804[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b803[t1, t7, t2, t3, t4, t5]
b1031 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1031[t0, t1, t2, t3, t4] =
  t5 <- lshr((t1, 4))
  t6 <- primEq((t5, 0))
  if t6
    then b1044[1, t2, 0, t3, t4]
    else b610[t5, t0, t3, t4]
b610 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b610[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- and((t0, 15))
  t6 <- primUle((t5, 9))
  if t6
    then b802[t5, t4, t0, t1, t2, t3]
    else b804[t5, t4, t0, t1, t2, t3]
b802 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b802[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b803[t1, t7, t2, t3, t4, t5]
b803 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b803[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b1031[t7, t2, t3, t4, t5]
    else b1044[1, t3, 0, t4, t5]

-----------------------------------------
-- not recursive
topright :: Bit 32
topright <- area Window aligned 8

-----------------------------------------
-- recursive
b515 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b515[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b515[t11, t1, t2, t3]
    else b737[]

-----------------------------------------
-- recursive
b517 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b517[t0, t1, t2, t3, t4] =
  t5 <- b515[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b517[t6, t1, t2, t3, t4]
    else b737[]

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "fac("

-----------------------------------------
-- not recursive
b649 :: [Bit 32] >>= [Unit]
b649[t0] =
  t1 <- load8((itoaBuf))
  t2 <- b326[t0, t1]
  return s62

-----------------------------------------
-- recursive
b976 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b976[t0, t1, t2] =
  t3 <- b326[t2, t1]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 2))
  if t5
    then b976[t4, t1, t2]
    else b737[]

-----------------------------------------
-- not recursive
b974 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b974[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b976[t5, t4, t3]
    else b737[]

-----------------------------------------
-- not recursive
b983 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b983[t0, t1, t2] =
  t3 <- b326[t2, t1]
  t4 <- b974[1, t0, 2, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b326[t2, t5]
  return s62

-----------------------------------------
-- not recursive
b981 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b981[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b983[t5, t3, t4]
    else b649[t4]

-----------------------------------------
-- not recursive
b631 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b631[t0, t1, t2] =
  t3 <- b974[1, t0, 2, t1, t2]
  b551[t0, t1]

-----------------------------------------
-- recursive
b811 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b811[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b810[t1, t7, t2, t3, t4, t5]
b809 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b809[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b810[t1, t7, t2, t3, t4, t5]
b810 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b810[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b987[t7, t2, t3, t4, t5]
    else b631[t3, t4, t5]
b987 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b987[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b631[t2, t3, t4]
    else b628[t5, t0, t3, t4]
b628 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b628[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b809[t5, t4, t0, t1, t2, t3]
    else b811[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1012 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1012[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b981[1, 0, 2, t3, t2]
    else b628[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b1010 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1010[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1012[t6, t3, t4, t5]
    else b981[1, 0, 2, t5, t4]

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- ") = "

-----------------------------------------
-- recursive
b992 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b992[t0, t1, t2] =
  t3 <- b326[t2, t1]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 4))
  if t5
    then b992[t4, t1, t2]
    else b737[]

-----------------------------------------
-- not recursive
b990 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b990[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b992[t5, t4, t3]
    else b737[]

-----------------------------------------
-- not recursive
b999 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b999[t0, t1, t2] =
  t3 <- b326[t2, t1]
  t4 <- b990[1, t0, 4, t2, t1]
  t5 <- load8((itoaBuf))
  t6 <- b326[t2, t5]
  return s62

-----------------------------------------
-- not recursive
b997 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b997[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b999[t5, t3, t4]
    else b649[t4]

-----------------------------------------
-- not recursive
b645 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b645[t0, t1, t2] =
  t3 <- b990[1, t0, 4, t1, t2]
  b551[t0, t1]

-----------------------------------------
-- recursive
b818 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b818[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 87))
  t7 <- and((t6, 255))
  b817[t1, t7, t2, t3, t4, t5]
b816 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b816[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, 48))
  t7 <- and((t6, 255))
  b817[t1, t7, t2, t3, t4, t5]
b817 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b817[t0, t1, t2, t3, t4, t5] =
  t6 <- store8((t0, t1))
  t7 <- add((t3, 1))
  t8 <- primUle((t7, 5))
  if t8
    then b1003[t7, t2, t3, t4, t5]
    else b645[t3, t4, t5]
b1003 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1003[t0, t1, t2, t3, t4] =
  t5 <- nzdiv((t1, 10))
  t6 <- primEq((t5, 0))
  if t6
    then b645[t2, t3, t4]
    else b642[t5, t0, t3, t4]
b642 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b642[t0, t1, t2, t3] =
  t4 <- add((itoaBuf, t1))
  t5 <- nzrem((t0, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b816[t5, t4, t0, t1, t2, t3]
    else b818[t5, t4, t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b1008 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1008[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b997[1, 0, 4, t3, t2]
    else b642[t4, t0, t2, t3]

-----------------------------------------
-- not recursive
b1006 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1006[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1008[t6, t3, t4, t5]
    else b997[1, 0, 4, t5, t4]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "\n"

-----------------------------------------
-- recursive
b825 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b825[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1006[1, 0, 5, t2, t3, t4]
  b684[t5, t2, t3, t6]
b822 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b822[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 87))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1010[1, 0, 31, t2, t3, t4]
  b688[t5, t2, t6, t3]
b383 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b383[t0, t1, t2, t3] =
  t4 <- b857[str1, t1]
  t5 <- nzrem((t2, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b820[t5, itoaBuf, t2, t1, 32, t0, t3]
    else b822[t5, itoaBuf, t2, t1, 32, t0, t3]
b820 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b820[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1010[1, 0, 31, t2, t3, t4]
  b688[t5, t2, t6, t3]
b688 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b688[t0, t1, t2, t3] =
  t4 <- b857[str2, t3]
  t5 <- nzrem((t2, 10))
  t6 <- primUle((t5, 9))
  if t6
    then b823[t5, itoaBuf, t2, t3, 32, t1, t0]
    else b825[t5, itoaBuf, t2, t3, 32, t1, t0]
b823 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b823[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, 48))
  t8 <- and((t7, 255))
  t9 <- store8((t1, t8))
  t10 <- b1006[1, 0, 5, t2, t3, t4]
  b684[t5, t2, t3, t6]
b684 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b684[t0, t1, t2, t3] =
  t4 <- b857[str3, t2]
  t5 <- add((t0, 1))
  t6 <- mul((t5, t1))
  b385[t3, t2, t5, t6]
b385 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b385[t0, t1, t2, t3] =
  t4 <- primUge((t2, t0))
  if t4
    then b737[]
    else b383[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
botleft :: Bit 32
botleft <- area Window aligned 8

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store8((topleft, 0))
  t1 <- add((topleft, 1))
  t2 <- store8((t1, 0))
  t3 <- add((topleft, 2))
  t4 <- store8((t3, 11))
  t5 <- add((topleft, 3))
  t6 <- store8((t5, 39))
  t7 <- add((topleft, 4))
  t8 <- store8((t7, 0))
  t9 <- add((topleft, 5))
  t10 <- store8((t9, 0))
  t11 <- add((topleft, 6))
  t12 <- store8((t11, 7))
  t13 <- store8((botright, 12))
  t14 <- add((botright, 1))
  t15 <- store8((t14, 40))
  t16 <- add((botright, 2))
  t17 <- store8((t16, 23))
  t18 <- add((botright, 3))
  t19 <- store8((t18, 79))
  t20 <- add((botright, 4))
  t21 <- store8((t20, 12))
  t22 <- add((botright, 5))
  t23 <- store8((t22, 40))
  t24 <- add((botright, 6))
  t25 <- store8((t24, 77))
  t26 <- b831[itoaBuf, 0]
  t27 <- store8((topright, 0))
  t28 <- add((topright, 1))
  t29 <- store8((t28, 40))
  t30 <- add((topright, 2))
  t31 <- store8((t30, 11))
  t32 <- add((topright, 3))
  t33 <- store8((t32, 79))
  t34 <- add((topright, 4))
  t35 <- store8((t34, 0))
  t36 <- add((topright, 5))
  t37 <- store8((t36, 40))
  t38 <- add((topright, 6))
  t39 <- store8((t38, 30))
  t40 <- store8((botleft, 12))
  t41 <- add((botleft, 1))
  t42 <- store8((t41, 0))
  t43 <- add((botleft, 2))
  t44 <- store8((t43, 23))
  t45 <- add((botleft, 3))
  t46 <- store8((t45, 39))
  t47 <- add((botleft, 4))
  t48 <- store8((t47, 12))
  t49 <- add((botleft, 5))
  t50 <- store8((t49, 0))
  t51 <- add((botleft, 6))
  t52 <- store8((t51, 32))
  t53 <- load8((topleft))
  t54 <- load8((t1))
  t55 <- store8((t7, t53))
  t56 <- store8((t9, t54))
  t57 <- load8((t3))
  t58 <- load8((t5))
  t59 <- load8((t11))
  t60 <- b517[t53, t57, t59, t58, t54]
  t61 <- b857[str4, topleft]
  t62 <- b857[str5, topleft]
  t63 <- b857[str6, topleft]
  t64 <- b857[str7, topleft]
  t65 <- b857[str8, topleft]
  t66 <- b857[str9, topleft]
  t67 <- b857[str10, topleft]
  t68 <- b857[str11, topleft]
  t69 <- b857[str12, topleft]
  t70 <- b857[str13, topleft]
  t71 <- load8((botright))
  t72 <- load8((t14))
  t73 <- store8((t20, t71))
  t74 <- store8((t22, t72))
  t75 <- load8((t16))
  t76 <- load8((t18))
  t77 <- load8((t24))
  t78 <- b517[t71, t75, t77, t76, t72]
  t79 <- b857[str4, botright]
  t80 <- b857[str5, botright]
  t81 <- b857[str6, botright]
  t82 <- b857[str7, botright]
  t83 <- b857[str8, botright]
  t84 <- b857[str9, botright]
  t85 <- b857[str10, botright]
  t86 <- b857[str11, botright]
  t87 <- b857[str12, botright]
  t88 <- b857[str13, botright]
  t89 <- load8((topright))
  t90 <- load8((t28))
  t91 <- store8((t34, t89))
  t92 <- store8((t36, t90))
  t93 <- load8((t30))
  t94 <- load8((t32))
  t95 <- load8((t38))
  t96 <- b517[t89, t93, t95, t94, t90]
  t97 <- b857[str0, topright]
  t98 <- store8((itoaBuf, 97))
  t99 <- add((itoaBuf, 1))
  t100 <- b803[t99, 50, 2, 1, topright, 32]
  t101 <- b326[topright, 10]
  t102 <- load8((botleft))
  t103 <- load8((t41))
  t104 <- store8((t47, t102))
  t105 <- store8((t49, t103))
  t106 <- load8((t43))
  t107 <- load8((t45))
  t108 <- load8((t51))
  t109 <- b517[t102, t106, t108, t107, t103]
  b385[20, botleft, 0, 1]

-----------------------------------------
-- Entrypoints:
Writing MIL code GraphViz output to "actual/lc-baremetal/winhello.dot" ...
Success!
