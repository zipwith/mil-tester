data Unit
  = Unit

-----------------------------------------
-- not recursive
construct_Signed :: [Word] >>= [Word]
construct_Signed[t0] =
  return t0

-----------------------------------------
-- recursive
b440 :: [Word] >>= [Word]
b440[t0] =
  t1 <- add((t0, -1))
  t2 <- b438[t1]
  t3 <- add((t0, -2))
  t4 <- b438[t3]
  add((t2, t4))
b438 :: [Word] >>= [Word]
b438[t0] =
  t1 <- primSlt((t0, 2))
  if t1
    then construct_Signed[t0]
    else b440[t0]

-----------------------------------------
-- not recursive
b374 :: [] >>= [Word]
b374[] =
  return 0

-----------------------------------------
-- recursive
b655 :: [Word, Word, Word] >>= [Word]
b655[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b603[t1, t0, t2]
    else b601[t2, t0]
b603 :: [Word, Word, Word] >>= [Word]
b603[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b597[t3, t0, t2]
    else b601[t2, t3]
b597 :: [Word, Word, Word] >>= [Word]
b597[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b601[t2, t0]
    else b655[t0, t1, t2]
b480 :: [Word, Word, Word] >>= [Word]
b480[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b597[t3, t1, t0]
    else b601[t0, t3]
b656 :: [Word, Word, Word] >>= [Word]
b656[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b480[t2, t1, t0]
    else b601[t2, t0]
b477 :: [Word, Word, Word] >>= [Word]
b477[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b601[t2, t0]
    else b656[t0, t1, t2]
b475 :: [Word, Word] >>= [Word]
b475[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b477[1, t1, t0]
    else b601[t0, 1]
b601 :: [Word, Word] >>= [Word]
b601[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b474[t3]
  add((t1, t4))
b474 :: [Word] >>= [Word]
b474[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b374[]
    else b475[t0, 10000000]

-----------------------------------------
-- not recursive
b611 :: [Word, Word, Word] >>= [Word]
b611[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b601[t2, t1]
    else b656[t1, t0, t2]

-----------------------------------------
-- not recursive
Proxy$f6t :: Unit
Proxy$f6t <-
  Unit()

-----------------------------------------
-- not recursive
b467 :: [Word] >>= [Unit]
b467[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$f6t

-----------------------------------------
-- recursive
b666 :: [Word, Word, Word] >>= [Word]
b666[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b601[t2, t0]
    else b669[t0, t1, t2]
b669 :: [Word, Word, Word] >>= [Word]
b669[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b668[t2, t1, t0]
    else b601[t2, t0]
b668 :: [Word, Word, Word] >>= [Word]
b668[t0, t1, t2] =
  t3 <- mul((t2, 10))
  b649[t3, t1, t0]
b649 :: [Word, Word, Word] >>= [Word]
b649[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b666[t0, t1, t2]
    else b601[t2, t0]

-----------------------------------------
-- recursive
b671 :: [Word, Word] >>= [Unit]
b671[t0, t1] =
  t2 <- mul((t0, 10))
  t3 <- sub((t1, t2))
  t4 <- b474[t3]
  t5 <- add((t0, t4))
  b498[t5, t1]
b613 :: [Word] >>= [Unit]
b613[t0] =
  t1 <- b465[0]
  t2 <- rem((t0, 10))
  b465[t2]
b697 :: [Word, Word] >>= [Unit]
b697[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b474[t3]
  t5 <- add((t1, t4))
  b685[t5, t0]
b685 :: [Word, Word] >>= [Unit]
b685[t0, t1] =
  t2 <- b465[t0]
  t3 <- rem((t1, 10))
  b465[t3]
b465 :: [Word] >>= [Unit]
b465[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b467[t0]
    else b471[t0]
b471 :: [Word] >>= [Unit]
b471[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b613[t0]
    else b657[t0, 10000000]
b657 :: [Word, Word] >>= [Unit]
b657[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b670[1, t1, t0]
    else b671[1, t0]
b670 :: [Word, Word, Word] >>= [Unit]
b670[t0, t1, t2] =
  t3 <- b611[t1, t0, t2]
  b498[t3, t2]
b498 :: [Word, Word] >>= [Unit]
b498[t0, t1] =
  t2 <- b392[t0]
  t3 <- rem((t1, 10))
  b465[t3]
b694 :: [Word] >>= [Unit]
b694[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b685[0, t0]
    else b695[t0, 10000000]
b695 :: [Word, Word] >>= [Unit]
b695[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b696[t1, 1, t0]
    else b697[t0, 1]
b696 :: [Word, Word, Word] >>= [Unit]
b696[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b697[t2, t1]
    else b698[t1, t0, t2]
b698 :: [Word, Word, Word] >>= [Unit]
b698[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b699[t2, t1, t0]
    else b697[t2, t0]
b699 :: [Word, Word, Word] >>= [Unit]
b699[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b700[t3, t1, t0]
    else b697[t0, t3]
b700 :: [Word, Word, Word] >>= [Unit]
b700[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b697[t2, t0]
    else b701[t0, t1, t2]
b701 :: [Word, Word, Word] >>= [Unit]
b701[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b702[t1, t0, t2]
    else b697[t2, t0]
b702 :: [Word, Word, Word] >>= [Unit]
b702[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- b649[t3, t0, t2]
  t5 <- b392[t4]
  t6 <- rem((t2, 10))
  b465[t6]
b392 :: [Word] >>= [Unit]
b392[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b467[t0]
    else b694[t0]

-----------------------------------------
-- not recursive
b665 :: [Word, Word] >>= [Word]
b665[t0, t1] =
  t2 <- mul((t0, 10))
  t3 <- sub((t1, t2))
  t4 <- b474[t3]
  t5 <- add((t0, t4))
  t6 <- b392[t5]
  t7 <- rem((t1, 10))
  t8 <- b465[t7]
  t9 <- b438[14]
  t10 <- b438[13]
  add((t9, t10))

-----------------------------------------
-- not recursive
b663 :: [Word, Word, Word] >>= [Word]
b663[t0, t1, t2] =
  t3 <- b611[t1, t0, t2]
  t4 <- b392[t3]
  t5 <- rem((t2, 10))
  t6 <- b465[t5]
  t7 <- b438[14]
  t8 <- b438[13]
  add((t7, t8))

-----------------------------------------
-- not recursive
b661 :: [Word, Word] >>= [Word]
b661[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b663[1, t1, t0]
    else b665[1, t0]

-----------------------------------------
-- not recursive
b660 :: [Word] >>= [Word]
b660[t0] =
  t1 <- b465[0]
  t2 <- rem((t0, 10))
  t3 <- b465[t2]
  t4 <- b438[14]
  t5 <- b438[13]
  add((t4, t5))

-----------------------------------------
-- not recursive
b659 :: [Word] >>= [Word]
b659[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b660[t0]
    else b661[t0, 10000000]

-----------------------------------------
-- not recursive
b621 :: [Word] >>= [Word]
b621[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  t3 <- b438[14]
  t4 <- b438[13]
  add((t3, t4))

-----------------------------------------
-- not recursive
b368 :: [] >>= [Word]
b368[] =
  t0 <- b438[14]
  t1 <- b438[13]
  t2 <- add((t0, t1))
  t3 <- primUlt((t2, 10))
  if t3
    then b621[t2]
    else b659[t2]

-----------------------------------------
-- not recursive
main :: [] >>= [Word]
main[] =
  b368[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Word]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b438(i32 %r0) {
  br label %b438

b438:
  %r1 = icmp slt i32 %r0, 2
  br i1 %r1, label %construct_Signed, label %b440

construct_Signed:
  ret i32 %r0

b440:
  %r6 = add i32 %r0, -1
  %r3 = call i32 @func_b438(i32 %r6)
  %r5 = add i32 %r0, -2
  %r4 = call i32 @func_b438(i32 %r5)
  %r2 = add i32 %r3, %r4
  ret i32 %r2
}

define internal i32 @func_b474(i32 %r0) {
  br label %b474

b474:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b374, label %b475

b374:
  ret i32 0

b475:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b477, label %b601

b477:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b601, label %b656

b601:
  %r8 = phi i32 [%r0, %b475], [%r0, %b477], [%r0, %b656], [%r0, %b480], [%r13, %b597], [%r13, %b655], [%r13, %b603]
  %r5 = phi i32 [1, %b475], [1, %b477], [1, %b656], [%r12, %b480], [%r11, %b597], [%r11, %b655], [%r10, %b603]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b474(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b656:
  %r14 = icmp ule i32 1, 10000000
  br i1 %r14, label %b480, label %b601

b480:
  %r12 = mul i32 1, 10
  %r16 = mul i32 1, 1000
  %r15 = icmp uge i32 %r0, %r16
  br i1 %r15, label %b597, label %b601

b597:
  %r11 = phi i32 [%r12, %b480], [%r10, %b603]
  %r18 = phi i32 [10000000, %b480], [%r18, %b603]
  %r13 = phi i32 [%r0, %b480], [%r13, %b603]
  %r17 = icmp eq i32 %r11, %r18
  br i1 %r17, label %b601, label %b655

b655:
  %r19 = icmp ule i32 %r11, %r18
  br i1 %r19, label %b603, label %b601

b603:
  %r10 = mul i32 %r11, 10
  %r21 = mul i32 %r11, 1000
  %r20 = icmp uge i32 %r13, %r21
  br i1 %r20, label %b597, label %b601
}

define internal i32 @func_b611(i32 %r0, i32 %r1, i32 %r2) {
  br label %b611

b611:
  %r3 = icmp eq i32 %r1, %r0
  br i1 %r3, label %b601, label %b656

b601:
  %r8 = phi i32 [%r2, %b611], [%r2, %b656], [%r2, %b480], [%r13, %b597], [%r13, %b655], [%r13, %b603]
  %r5 = phi i32 [%r1, %b611], [%r1, %b656], [%r12, %b480], [%r11, %b597], [%r11, %b655], [%r10, %b603]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b474(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b656:
  %r14 = icmp ule i32 %r1, %r0
  br i1 %r14, label %b480, label %b601

b480:
  %r12 = mul i32 %r1, 10
  %r16 = mul i32 %r1, 1000
  %r15 = icmp uge i32 %r2, %r16
  br i1 %r15, label %b597, label %b601

b597:
  %r11 = phi i32 [%r12, %b480], [%r10, %b603]
  %r18 = phi i32 [%r0, %b480], [%r18, %b603]
  %r13 = phi i32 [%r2, %b480], [%r13, %b603]
  %r17 = icmp eq i32 %r11, %r18
  br i1 %r17, label %b601, label %b655

b655:
  %r19 = icmp ule i32 %r11, %r18
  br i1 %r19, label %b603, label %b601

b603:
  %r10 = mul i32 %r11, 10
  %r21 = mul i32 %r11, 1000
  %r20 = icmp uge i32 %r13, %r21
  br i1 %r20, label %b597, label %b601
}

define internal i32 @func_b649(i32 %r0, i32 %r1, i32 %r2) {
  br label %b649

b649:
  %r6 = phi i32 [%r0, %0], [%r8, %b668]
  %r7 = phi i32 [%r1, %0], [%r7, %b668]
  %r4 = phi i32 [%r2, %0], [%r4, %b668]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b666, label %b601

b666:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b601, label %b669

b601:
  %r14 = phi i32 [%r4, %b649], [%r4, %b666], [%r4, %b669]
  %r11 = phi i32 [%r6, %b649], [%r6, %b666], [%r6, %b669]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b474(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b669:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b668, label %b601

b668:
  %r8 = mul i32 %r6, 10
  br label %b649
}

declare i32 @putchar(i32)

define internal void @func_b465(i32 %r0) {
  br label %b465

b465:
  %r2 = phi i32 [%r0, %0], [%r4, %b613], [%r3, %b498]
  %r1 = icmp ult i32 %r2, 10
  br i1 %r1, label %b467, label %b471

b467:
  %r6 = add i32 %r2, 48
  %r5 = call i32 @putchar(i32 %r6)
  ret void

b471:
  %r7 = icmp ult i32 %r2, 10
  br i1 %r7, label %b613, label %b657

b613:
  call void @func_b465(i32 0)
  %r4 = srem i32 %r2, 10
  br label %b465

b657:
  %r8 = icmp uge i32 %r2, 100
  br i1 %r8, label %b670, label %b671

b670:
  %r9 = call i32 @func_b611(i32 10000000, i32 1, i32 %r2)
  br label %b498

b671:
  %r13 = mul i32 1, 10
  %r12 = sub i32 %r2, %r13
  %r11 = call i32 @func_b474(i32 %r12)
  %r10 = add i32 1, %r11
  br label %b498

b498:
  %r15 = phi i32 [%r9, %b670], [%r10, %b671]
  %r14 = phi i32 [%r2, %b670], [%r2, %b671]
  call void @func_b392(i32 %r15)
  %r3 = srem i32 %r14, 10
  br label %b465
}

define internal void @func_b392(i32 %r0) {
  br label %b392

b392:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b467, label %b694

b467:
  %r4 = phi i32 [%r0, %b392], [%r5, %b465]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b694:
  %r6 = icmp ult i32 %r0, 10
  br i1 %r6, label %b685, label %b695

b685:
  %r9 = phi i32 [0, %b694], [%r11, %b697]
  %r8 = phi i32 [%r0, %b694], [%r10, %b697]
  call void @func_b465(i32 %r9)
  %r7 = srem i32 %r8, 10
  br label %b465

b695:
  %r12 = icmp uge i32 %r0, 100
  br i1 %r12, label %b696, label %b697

b465:
  %r5 = phi i32 [%r7, %b685], [%r16, %b613], [%r15, %b498], [%r14, %b702]
  %r13 = icmp ult i32 %r5, 10
  br i1 %r13, label %b467, label %b471

b696:
  %r17 = icmp eq i32 1, 10000000
  br i1 %r17, label %b697, label %b698

b697:
  %r10 = phi i32 [%r0, %b695], [%r0, %b696], [%r0, %b698], [%r0, %b699], [%r0, %b700], [%r0, %b701]
  %r18 = phi i32 [1, %b695], [1, %b696], [1, %b698], [%r22, %b699], [%r22, %b700], [%r22, %b701]
  %r21 = mul i32 %r18, 10
  %r20 = sub i32 %r10, %r21
  %r19 = call i32 @func_b474(i32 %r20)
  %r11 = add i32 %r18, %r19
  br label %b685

b471:
  %r23 = icmp ult i32 %r5, 10
  br i1 %r23, label %b613, label %b657

b698:
  %r24 = icmp ule i32 1, 10000000
  br i1 %r24, label %b699, label %b697

b613:
  call void @func_b465(i32 0)
  %r16 = srem i32 %r5, 10
  br label %b465

b657:
  %r25 = icmp uge i32 %r5, 100
  br i1 %r25, label %b670, label %b671

b699:
  %r22 = mul i32 1, 10
  %r27 = mul i32 1, 1000
  %r26 = icmp uge i32 %r0, %r27
  br i1 %r26, label %b700, label %b697

b670:
  %r28 = call i32 @func_b611(i32 10000000, i32 1, i32 %r5)
  br label %b498

b671:
  %r32 = mul i32 1, 10
  %r31 = sub i32 %r5, %r32
  %r30 = call i32 @func_b474(i32 %r31)
  %r29 = add i32 1, %r30
  br label %b498

b700:
  %r33 = icmp eq i32 %r22, 10000000
  br i1 %r33, label %b697, label %b701

b498:
  %r35 = phi i32 [%r28, %b670], [%r29, %b671]
  %r34 = phi i32 [%r5, %b670], [%r5, %b671]
  call void @func_b392(i32 %r35)
  %r15 = srem i32 %r34, 10
  br label %b465

b701:
  %r36 = icmp ule i32 %r22, 10000000
  br i1 %r36, label %b702, label %b697

b702:
  %r38 = mul i32 %r22, 10
  %r37 = call i32 @func_b649(i32 %r38, i32 10000000, i32 %r0)
  call void @func_b392(i32 %r37)
  %r14 = srem i32 %r0, 10
  br label %b465
}

define i32 @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b368

b368:
  %r2 = call i32 @func_b438(i32 14)
  %r3 = call i32 @func_b438(i32 13)
  %r1 = add i32 %r2, %r3
  %r0 = icmp ult i32 %r1, 10
  br i1 %r0, label %b621, label %b659

b621:
  %r8 = add i32 %r1, 48
  %r7 = call i32 @putchar(i32 %r8)
  %r5 = call i32 @func_b438(i32 14)
  %r6 = call i32 @func_b438(i32 13)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b659:
  %r9 = icmp ult i32 %r1, 10
  br i1 %r9, label %b660, label %b661

b660:
  call void @func_b465(i32 0)
  %r13 = srem i32 %r1, 10
  call void @func_b465(i32 %r13)
  %r11 = call i32 @func_b438(i32 14)
  %r12 = call i32 @func_b438(i32 13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b661:
  %r14 = icmp uge i32 %r1, 100
  br i1 %r14, label %b663, label %b665

b663:
  %r19 = call i32 @func_b611(i32 10000000, i32 1, i32 %r1)
  call void @func_b392(i32 %r19)
  %r18 = srem i32 %r1, 10
  call void @func_b465(i32 %r18)
  %r16 = call i32 @func_b438(i32 14)
  %r17 = call i32 @func_b438(i32 13)
  %r15 = add i32 %r16, %r17
  ret i32 %r15

b665:
  %r27 = mul i32 1, 10
  %r26 = sub i32 %r1, %r27
  %r25 = call i32 @func_b474(i32 %r26)
  %r24 = add i32 1, %r25
  call void @func_b392(i32 %r24)
  %r23 = srem i32 %r1, 10
  call void @func_b465(i32 %r23)
  %r21 = call i32 @func_b438(i32 14)
  %r22 = call i32 @func_b438(i32 13)
  %r20 = add i32 %r21, %r22
  ret i32 %r20
}

