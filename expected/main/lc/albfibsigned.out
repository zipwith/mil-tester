data Unit
  = Unit

-----------------------------------------
-- not recursive
construct_Signed :: [Word] >>= [Word]
construct_Signed[t0] =
  return t0

-----------------------------------------
-- recursive
b463 :: [Word] >>= [Word]
b463[t0] =
  t1 <- add((t0, -1))
  t2 <- b461[t1]
  t3 <- add((t0, -2))
  t4 <- b461[t3]
  add((t2, t4))
b461 :: [Word] >>= [Word]
b461[t0] =
  t1 <- primSlt((t0, 2))
  if t1
    then construct_Signed[t0]
    else b463[t0]

-----------------------------------------
-- not recursive
b374 :: [] >>= [Word]
b374[] =
  return 0

-----------------------------------------
-- recursive
b738 :: [Word, Word, Word] >>= [Word]
b738[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b737[t2, t1, t0]
    else b516[t2, t0]
b737 :: [Word, Word, Word] >>= [Word]
b737[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b734[t3, t1, t0]
    else b516[t0, t3]
b734 :: [Word, Word, Word] >>= [Word]
b734[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b516[t2, t0]
    else b738[t0, t1, t2]
b510 :: [Word, Word] >>= [Word]
b510[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b734[1, t1, t0]
    else b516[t0, 1]
b516 :: [Word, Word] >>= [Word]
b516[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b509[t3]
  add((t1, t4))
b509 :: [Word] >>= [Word]
b509[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b374[]
    else b510[t0, 10000000]

-----------------------------------------
-- not recursive
Proxy$f6t :: Unit
Proxy$f6t <-
  Unit()

-----------------------------------------
-- not recursive
b502 :: [Word] >>= [Unit]
b502[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$f6t

-----------------------------------------
-- recursive
b779 :: [Word, Word, Word] >>= [Unit]
b779[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b781[t2, t1, t0]
    else b719[t2, t0]
b781 :: [Word, Word, Word] >>= [Unit]
b781[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b776[t3, t1, t0]
    else b719[t0, t3]
b776 :: [Word, Word, Word] >>= [Unit]
b776[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b719[t2, t0]
    else b779[t0, t1, t2]
b773 :: [Word, Word, Word] >>= [Unit]
b773[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b776[t3, t0, t2]
    else b719[t2, t3]
b770 :: [Word, Word, Word] >>= [Unit]
b770[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b773[t1, t0, t2]
    else b719[t2, t0]
b766 :: [Word, Word, Word] >>= [Unit]
b766[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b719[t2, t0]
    else b770[t0, t1, t2]
b763 :: [Word, Word, Word] >>= [Unit]
b763[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b766[t3, t1, t0]
    else b719[t0, t3]
b760 :: [Word, Word, Word] >>= [Unit]
b760[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b763[t2, t1, t0]
    else b719[t2, t0]
b718 :: [Word, Word, Word] >>= [Unit]
b718[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b719[t2, t0]
    else b760[t0, t1, t2]
b677 :: [Word, Word] >>= [Unit]
b677[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b718[1, t1, t0]
    else b719[t0, 1]
b719 :: [Word, Word] >>= [Unit]
b719[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b509[t3]
  t5 <- add((t1, t4))
  t6 <- b500[t5]
  t7 <- rem((t0, 10))
  t8 <- primUlt((t7, 10))
  if t8
    then b502[t7]
    else b506[t7]
b506 :: [Word] >>= [Unit]
b506[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b611[t0]
    else b677[t0, 10000000]
b611 :: [Word] >>= [Unit]
b611[t0] =
  t1 <- b500[0]
  t2 <- rem((t0, 10))
  t3 <- primUlt((t2, 10))
  if t3
    then b502[t2]
    else b506[t2]
b500 :: [Word] >>= [Unit]
b500[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b502[t0]
    else b506[t0]

-----------------------------------------
-- not recursive
b834 :: [Word] >>= [Word]
b834[t0] =
  t1 <- add((t0, -10))
  t2 <- b509[t1]
  t3 <- add((t2, 1))
  t4 <- b500[t3]
  t5 <- rem((t0, 10))
  t6 <- b500[t5]
  t7 <- b461[14]
  t8 <- b461[13]
  add((t7, t8))

-----------------------------------------
-- not recursive
b848 :: [Word] >>= [Word]
b848[t0] =
  t1 <- add((t0, -100))
  t2 <- b509[t1]
  t3 <- add((t2, 10))
  t4 <- b500[t3]
  t5 <- rem((t0, 10))
  t6 <- b500[t5]
  t7 <- b461[14]
  t8 <- b461[13]
  add((t7, t8))

-----------------------------------------
-- not recursive
b846 :: [Word] >>= [Word]
b846[t0] =
  t1 <- add((t0, -1000))
  t2 <- b509[t1]
  t3 <- add((t2, 100))
  t4 <- b500[t3]
  t5 <- rem((t0, 10))
  t6 <- b500[t5]
  t7 <- b461[14]
  t8 <- b461[13]
  add((t7, t8))

-----------------------------------------
-- not recursive
b702 :: [Word, Word] >>= [Word]
b702[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b509[t3]
  t5 <- add((t1, t4))
  t6 <- b500[t5]
  t7 <- rem((t0, 10))
  t8 <- b500[t7]
  t9 <- b461[14]
  t10 <- b461[13]
  add((t9, t10))

-----------------------------------------
-- recursive
b778 :: [Word, Word, Word] >>= [Word]
b778[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b780[t2, t1, t0]
    else b702[t2, t0]
b780 :: [Word, Word, Word] >>= [Word]
b780[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b774[t3, t1, t0]
    else b702[t0, t3]
b774 :: [Word, Word, Word] >>= [Word]
b774[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b702[t2, t0]
    else b778[t0, t1, t2]

-----------------------------------------
-- not recursive
b860 :: [Word] >>= [Word]
b860[t0] =
  t1 <- primUge((t0, 10000))
  if t1
    then b774[100, 10000000, t0]
    else b846[t0]

-----------------------------------------
-- not recursive
b857 :: [Word] >>= [Word]
b857[t0] =
  t1 <- primUge((t0, 1000))
  if t1
    then b860[t0]
    else b848[t0]

-----------------------------------------
-- not recursive
b850 :: [Word] >>= [Word]
b850[t0] =
  t1 <- primUge((t0, 100))
  if t1
    then b857[t0]
    else b834[t0]

-----------------------------------------
-- not recursive
b684 :: [Word] >>= [Word]
b684[t0] =
  t1 <- b500[0]
  t2 <- rem((t0, 10))
  t3 <- b500[t2]
  t4 <- b461[14]
  t5 <- b461[13]
  add((t4, t5))

-----------------------------------------
-- not recursive
b683 :: [Word] >>= [Word]
b683[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b684[t0]
    else b850[t0]

-----------------------------------------
-- not recursive
b639 :: [Word] >>= [Word]
b639[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  t3 <- b461[14]
  t4 <- b461[13]
  add((t3, t4))

-----------------------------------------
-- not recursive
b854 :: [] >>= [Word]
b854[] =
  t0 <- b461[14]
  t1 <- b461[13]
  t2 <- add((t0, t1))
  t3 <- primUlt((t2, 10))
  if t3
    then b639[t2]
    else b683[t2]

-----------------------------------------
-- not recursive
b368 :: [] >>= [Word]
b368[] =
  b854[]

-----------------------------------------
-- not recursive
main :: [] >>= [Word]
main[] =
  b368[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Word]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b461(i32 %r0) {
  br label %b461

b461:
  %r1 = icmp slt i32 %r0, 2
  br i1 %r1, label %construct_Signed, label %b463

construct_Signed:
  ret i32 %r0

b463:
  %r6 = add i32 %r0, -1
  %r3 = call i32 @func_b461(i32 %r6)
  %r5 = add i32 %r0, -2
  %r4 = call i32 @func_b461(i32 %r5)
  %r2 = add i32 %r3, %r4
  ret i32 %r2
}

define internal i32 @func_b509(i32 %r0) {
  br label %b509

b509:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b374, label %b510

b374:
  ret i32 0

b510:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b734, label %b516

b734:
  %r4 = phi i32 [1, %b510], [%r7, %b737]
  %r5 = phi i32 [10000000, %b510], [%r5, %b737]
  %r6 = phi i32 [%r0, %b510], [%r6, %b737]
  %r3 = icmp eq i32 %r4, %r5
  br i1 %r3, label %b516, label %b738

b516:
  %r12 = phi i32 [%r0, %b510], [%r6, %b734], [%r6, %b738], [%r6, %b737]
  %r9 = phi i32 [1, %b510], [%r4, %b734], [%r4, %b738], [%r7, %b737]
  %r13 = mul i32 %r9, 10
  %r11 = sub i32 %r12, %r13
  %r10 = call i32 @func_b509(i32 %r11)
  %r8 = add i32 %r9, %r10
  ret i32 %r8

b738:
  %r14 = icmp ule i32 %r4, %r5
  br i1 %r14, label %b737, label %b516

b737:
  %r7 = mul i32 %r4, 10
  %r16 = mul i32 %r4, 1000
  %r15 = icmp uge i32 %r6, %r16
  br i1 %r15, label %b734, label %b516
}

declare i32 @putchar(i32)

define internal void @func_b500(i32 %r0) {
  br label %b500

b500:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b502, label %b506

b502:
  %r4 = phi i32 [%r0, %b500], [%r6, %b611], [%r5, %b719]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b506:
  %r8 = phi i32 [%r0, %b500], [%r6, %b611], [%r5, %b719]
  %r7 = icmp ult i32 %r8, 10
  br i1 %r7, label %b611, label %b677

b611:
  call void @func_b500(i32 0)
  %r6 = srem i32 %r8, 10
  %r9 = icmp ult i32 %r6, 10
  br i1 %r9, label %b502, label %b506

b677:
  %r10 = icmp uge i32 %r8, 100
  br i1 %r10, label %b718, label %b719

b718:
  %r11 = icmp eq i32 1, 10000000
  br i1 %r11, label %b719, label %b760

b719:
  %r13 = phi i32 [%r8, %b677], [%r8, %b718], [%r8, %b760], [%r8, %b763], [%r8, %b766], [%r8, %b770], [%r8, %b773], [%r23, %b776], [%r23, %b779], [%r23, %b781]
  %r15 = phi i32 [1, %b677], [1, %b718], [1, %b760], [%r22, %b763], [%r22, %b766], [%r22, %b770], [%r21, %b773], [%r20, %b776], [%r20, %b779], [%r19, %b781]
  %r18 = mul i32 %r15, 10
  %r17 = sub i32 %r13, %r18
  %r16 = call i32 @func_b509(i32 %r17)
  %r14 = add i32 %r15, %r16
  call void @func_b500(i32 %r14)
  %r5 = srem i32 %r13, 10
  %r12 = icmp ult i32 %r5, 10
  br i1 %r12, label %b502, label %b506

b760:
  %r24 = icmp ule i32 1, 10000000
  br i1 %r24, label %b763, label %b719

b763:
  %r22 = mul i32 1, 10
  %r26 = mul i32 1, 1000
  %r25 = icmp uge i32 %r8, %r26
  br i1 %r25, label %b766, label %b719

b766:
  %r27 = icmp eq i32 %r22, 10000000
  br i1 %r27, label %b719, label %b770

b770:
  %r28 = icmp ule i32 %r22, 10000000
  br i1 %r28, label %b773, label %b719

b773:
  %r21 = mul i32 %r22, 10
  %r30 = mul i32 %r22, 1000
  %r29 = icmp uge i32 %r8, %r30
  br i1 %r29, label %b776, label %b719

b776:
  %r20 = phi i32 [%r21, %b773], [%r19, %b781]
  %r32 = phi i32 [10000000, %b773], [%r32, %b781]
  %r23 = phi i32 [%r8, %b773], [%r23, %b781]
  %r31 = icmp eq i32 %r20, %r32
  br i1 %r31, label %b719, label %b779

b779:
  %r33 = icmp ule i32 %r20, %r32
  br i1 %r33, label %b781, label %b719

b781:
  %r19 = mul i32 %r20, 10
  %r35 = mul i32 %r20, 1000
  %r34 = icmp uge i32 %r23, %r35
  br i1 %r34, label %b776, label %b719
}

define i32 @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b368

b368:
  br label %b854

b854:
  %r2 = call i32 @func_b461(i32 14)
  %r3 = call i32 @func_b461(i32 13)
  %r1 = add i32 %r2, %r3
  %r0 = icmp ult i32 %r1, 10
  br i1 %r0, label %b639, label %b683

b639:
  %r8 = add i32 %r1, 48
  %r7 = call i32 @putchar(i32 %r8)
  %r5 = call i32 @func_b461(i32 14)
  %r6 = call i32 @func_b461(i32 13)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b683:
  %r9 = icmp ult i32 %r1, 10
  br i1 %r9, label %b684, label %b850

b684:
  call void @func_b500(i32 0)
  %r13 = srem i32 %r1, 10
  call void @func_b500(i32 %r13)
  %r11 = call i32 @func_b461(i32 14)
  %r12 = call i32 @func_b461(i32 13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b850:
  %r14 = icmp uge i32 %r1, 100
  br i1 %r14, label %b857, label %b834

b857:
  %r15 = icmp uge i32 %r1, 1000
  br i1 %r15, label %b860, label %b848

b834:
  %r22 = add i32 %r1, -10
  %r21 = call i32 @func_b509(i32 %r22)
  %r20 = add i32 %r21, 1
  call void @func_b500(i32 %r20)
  %r19 = srem i32 %r1, 10
  call void @func_b500(i32 %r19)
  %r17 = call i32 @func_b461(i32 14)
  %r18 = call i32 @func_b461(i32 13)
  %r16 = add i32 %r17, %r18
  ret i32 %r16

b860:
  %r23 = icmp uge i32 %r1, 10000
  br i1 %r23, label %b774, label %b846

b848:
  %r30 = add i32 %r1, -100
  %r29 = call i32 @func_b509(i32 %r30)
  %r28 = add i32 %r29, 10
  call void @func_b500(i32 %r28)
  %r27 = srem i32 %r1, 10
  call void @func_b500(i32 %r27)
  %r25 = call i32 @func_b461(i32 14)
  %r26 = call i32 @func_b461(i32 13)
  %r24 = add i32 %r25, %r26
  ret i32 %r24

b774:
  %r32 = phi i32 [100, %b860], [%r35, %b780]
  %r33 = phi i32 [10000000, %b860], [%r33, %b780]
  %r34 = phi i32 [%r1, %b860], [%r34, %b780]
  %r31 = icmp eq i32 %r32, %r33
  br i1 %r31, label %b702, label %b778

b846:
  %r42 = add i32 %r1, -1000
  %r41 = call i32 @func_b509(i32 %r42)
  %r40 = add i32 %r41, 100
  call void @func_b500(i32 %r40)
  %r39 = srem i32 %r1, 10
  call void @func_b500(i32 %r39)
  %r37 = call i32 @func_b461(i32 14)
  %r38 = call i32 @func_b461(i32 13)
  %r36 = add i32 %r37, %r38
  ret i32 %r36

b702:
  %r47 = phi i32 [%r34, %b774], [%r34, %b778], [%r34, %b780]
  %r49 = phi i32 [%r32, %b774], [%r32, %b778], [%r35, %b780]
  %r52 = mul i32 %r49, 10
  %r51 = sub i32 %r47, %r52
  %r50 = call i32 @func_b509(i32 %r51)
  %r48 = add i32 %r49, %r50
  call void @func_b500(i32 %r48)
  %r46 = srem i32 %r47, 10
  call void @func_b500(i32 %r46)
  %r44 = call i32 @func_b461(i32 14)
  %r45 = call i32 @func_b461(i32 13)
  %r43 = add i32 %r44, %r45
  ret i32 %r43

b778:
  %r53 = icmp ule i32 %r32, %r33
  br i1 %r53, label %b780, label %b702

b780:
  %r35 = mul i32 %r32, 10
  %r55 = mul i32 %r32, 1000
  %r54 = icmp uge i32 %r34, %r55
  br i1 %r54, label %b774, label %b702
}

