data Unit
  = Unit

-----------------------------------------
-- not recursive
b374 :: [] >>= [Word]
b374[] =
  return 0

-----------------------------------------
-- recursive
b590 :: [Word, Word, Word] >>= [Word]
b590[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b589[t2, t1, t0]
    else b516[t2, t0]
b589 :: [Word, Word, Word] >>= [Word]
b589[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b586[t3, t1, t0]
    else b516[t0, t3]
b586 :: [Word, Word, Word] >>= [Word]
b586[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b516[t2, t0]
    else b590[t0, t1, t2]
b510 :: [Word, Word] >>= [Word]
b510[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b586[1, t1, t0]
    else b516[t0, 1]
b516 :: [Word, Word] >>= [Word]
b516[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b509[t3]
  add((t1, t4))
b509 :: [Word] >>= [Word]
b509[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b374[]
    else b510[t0, 10000000]

-----------------------------------------
-- not recursive
b626 :: [Word] >>= [Word]
b626[t0] =
  t1 <- add((t0, -10))
  t2 <- b509[t1]
  add((t2, 1))

-----------------------------------------
-- not recursive
b634 :: [Word] >>= [Word]
b634[t0] =
  t1 <- add((t0, -100))
  t2 <- b509[t1]
  add((t2, 10))

-----------------------------------------
-- not recursive
b639 :: [Word] >>= [Word]
b639[t0] =
  t1 <- add((t0, -1000))
  t2 <- b509[t1]
  add((t2, 100))

-----------------------------------------
-- recursive
b594 :: [Word, Word, Word] >>= [Word]
b594[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b593[t2, t1, t0]
    else b516[t2, t0]
b593 :: [Word, Word, Word] >>= [Word]
b593[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b591[t3, t1, t0]
    else b516[t0, t3]
b591 :: [Word, Word, Word] >>= [Word]
b591[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b516[t2, t0]
    else b594[t0, t1, t2]

-----------------------------------------
-- not recursive
b647 :: [Word] >>= [Word]
b647[t0] =
  t1 <- primUge((t0, 10000))
  if t1
    then b591[100, 10000000, t0]
    else b639[t0]

-----------------------------------------
-- not recursive
b644 :: [Word] >>= [Word]
b644[t0] =
  t1 <- primUge((t0, 1000))
  if t1
    then b647[t0]
    else b634[t0]

-----------------------------------------
-- not recursive
b641 :: [Word] >>= [Word]
b641[t0] =
  t1 <- primUge((t0, 100))
  if t1
    then b644[t0]
    else b626[t0]

-----------------------------------------
-- not recursive
b105 :: [Word] >>= [Word]
b105[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b374[]
    else b641[t0]

-----------------------------------------
-- not recursive
Proxy$f6h :: Unit
Proxy$f6h <-
  Unit()

-----------------------------------------
-- not recursive
b502 :: [Word] >>= [Unit]
b502[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$f6h

-----------------------------------------
-- recursive
b397 :: [Word] >>= [Unit]
b397[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b502[t0]
    else b380[t0]
b380 :: [Word] >>= [Unit]
b380[t0] =
  t1 <- b105[t0]
  t2 <- b397[t1]
  t3 <- rem((t0, 10))
  t4 <- primUlt((t3, 10))
  if t4
    then b502[t3]
    else b506[t3]
b506 :: [Word] >>= [Unit]
b506[t0] =
  t1 <- b509[t0]
  t2 <- b397[t1]
  t3 <- rem((t0, 10))
  t4 <- primUlt((t3, 10))
  if t4
    then b502[t3]
    else b506[t3]

-----------------------------------------
-- not recursive
b500 :: [Word] >>= [Unit]
b500[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b502[t0]
    else b506[t0]

-----------------------------------------
-- not recursive
construct_Signed :: [Word] >>= [Word]
construct_Signed[t0] =
  return t0

-----------------------------------------
-- recursive
b463 :: [Word] >>= [Word]
b463[t0] =
  t1 <- add((t0, -1))
  t2 <- b461[t1]
  t3 <- add((t0, -2))
  t4 <- b461[t3]
  add((t2, t4))
b461 :: [Word] >>= [Word]
b461[t0] =
  t1 <- primSlt((t0, 2))
  if t1
    then construct_Signed[t0]
    else b463[t0]

-----------------------------------------
-- not recursive
b368 :: [] >>= [Word]
b368[] =
  t0 <- b461[15]
  t1 <- b500[t0]
  t2 <- b461[14]
  t3 <- b461[13]
  add((t2, t3))

-----------------------------------------
-- not recursive
main :: [] >>= [Word]
main[] =
  b368[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Word]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b509(i32 %r0) {
  br label %b509

b509:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b374, label %b510

b374:
  ret i32 0

b510:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b586, label %b516

b586:
  %r4 = phi i32 [1, %b510], [%r7, %b589]
  %r5 = phi i32 [10000000, %b510], [%r5, %b589]
  %r6 = phi i32 [%r0, %b510], [%r6, %b589]
  %r3 = icmp eq i32 %r4, %r5
  br i1 %r3, label %b516, label %b590

b516:
  %r12 = phi i32 [%r0, %b510], [%r6, %b586], [%r6, %b590], [%r6, %b589]
  %r9 = phi i32 [1, %b510], [%r4, %b586], [%r4, %b590], [%r7, %b589]
  %r13 = mul i32 %r9, 10
  %r11 = sub i32 %r12, %r13
  %r10 = call i32 @func_b509(i32 %r11)
  %r8 = add i32 %r9, %r10
  ret i32 %r8

b590:
  %r14 = icmp ule i32 %r4, %r5
  br i1 %r14, label %b589, label %b516

b589:
  %r7 = mul i32 %r4, 10
  %r16 = mul i32 %r4, 1000
  %r15 = icmp uge i32 %r6, %r16
  br i1 %r15, label %b586, label %b516
}

define internal i32 @func_b105(i32 %r0) {
  br label %b105

b105:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b374, label %b641

b374:
  ret i32 0

b641:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b644, label %b626

b644:
  %r3 = icmp uge i32 %r0, 1000
  br i1 %r3, label %b647, label %b634

b626:
  %r6 = add i32 %r0, -10
  %r5 = call i32 @func_b509(i32 %r6)
  %r4 = add i32 %r5, 1
  ret i32 %r4

b647:
  %r7 = icmp uge i32 %r0, 10000
  br i1 %r7, label %b591, label %b639

b634:
  %r10 = add i32 %r0, -100
  %r9 = call i32 @func_b509(i32 %r10)
  %r8 = add i32 %r9, 10
  ret i32 %r8

b591:
  %r12 = phi i32 [100, %b647], [%r15, %b593]
  %r13 = phi i32 [10000000, %b647], [%r13, %b593]
  %r14 = phi i32 [%r0, %b647], [%r14, %b593]
  %r11 = icmp eq i32 %r12, %r13
  br i1 %r11, label %b516, label %b594

b639:
  %r18 = add i32 %r0, -1000
  %r17 = call i32 @func_b509(i32 %r18)
  %r16 = add i32 %r17, 100
  ret i32 %r16

b516:
  %r23 = phi i32 [%r14, %b591], [%r14, %b594], [%r14, %b593]
  %r20 = phi i32 [%r12, %b591], [%r12, %b594], [%r15, %b593]
  %r24 = mul i32 %r20, 10
  %r22 = sub i32 %r23, %r24
  %r21 = call i32 @func_b509(i32 %r22)
  %r19 = add i32 %r20, %r21
  ret i32 %r19

b594:
  %r25 = icmp ule i32 %r12, %r13
  br i1 %r25, label %b593, label %b516

b593:
  %r15 = mul i32 %r12, 10
  %r27 = mul i32 %r12, 1000
  %r26 = icmp uge i32 %r14, %r27
  br i1 %r26, label %b591, label %b516
}

declare i32 @putchar(i32)

define internal void @func_b397(i32 %r0) {
  br label %b397

b397:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b502, label %b380

b502:
  %r4 = phi i32 [%r0, %b397], [%r6, %b380], [%r5, %b506]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b380:
  %r8 = call i32 @func_b105(i32 %r0)
  call void @func_b397(i32 %r8)
  %r6 = srem i32 %r0, 10
  %r7 = icmp ult i32 %r6, 10
  br i1 %r7, label %b502, label %b506

b506:
  %r10 = phi i32 [%r6, %b380], [%r5, %b506]
  %r11 = call i32 @func_b509(i32 %r10)
  call void @func_b397(i32 %r11)
  %r5 = srem i32 %r10, 10
  %r9 = icmp ult i32 %r5, 10
  br i1 %r9, label %b502, label %b506
}

define internal void @func_b500(i32 %r0) {
  br label %b500

b500:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b502, label %b506

b502:
  %r4 = phi i32 [%r0, %b500], [%r5, %b506]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b506:
  %r7 = phi i32 [%r0, %b500], [%r5, %b506]
  %r8 = call i32 @func_b509(i32 %r7)
  call void @func_b397(i32 %r8)
  %r5 = srem i32 %r7, 10
  %r6 = icmp ult i32 %r5, 10
  br i1 %r6, label %b502, label %b506
}

define internal i32 @func_b461(i32 %r0) {
  br label %b461

b461:
  %r1 = icmp slt i32 %r0, 2
  br i1 %r1, label %construct_Signed, label %b463

construct_Signed:
  ret i32 %r0

b463:
  %r6 = add i32 %r0, -1
  %r3 = call i32 @func_b461(i32 %r6)
  %r5 = add i32 %r0, -2
  %r4 = call i32 @func_b461(i32 %r5)
  %r2 = add i32 %r3, %r4
  ret i32 %r2
}

define i32 @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b368

b368:
  %r3 = call i32 @func_b461(i32 15)
  call void @func_b500(i32 %r3)
  %r1 = call i32 @func_b461(i32 14)
  %r2 = call i32 @func_b461(i32 13)
  %r0 = add i32 %r1, %r2
  ret i32 %r0
}

