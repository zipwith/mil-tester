data Eight0
  = Eight0 ([Word] ->> [[Word] ->> [[Word] ->> [Word]]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Eight2
  = Eight2 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Four1
  = Four1 Word Word Word Word

data Six3
  = Six3 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Six5
  = Six5 Three4 Six3 Eight2 Eight2 Four1 Eight0

data Three4
  = Three4 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

-----------------------------------------
-- not recursive
k96 :: {} [Word] ->> [Word]
k96{} t0 = return 1056820

-----------------------------------------
-- not recursive
example3 :: [Word] ->> [Word]
example3 <-
  k96{}

-----------------------------------------
-- not recursive
b127 :: [Word] >>= [Word]
b127[t0] =
  t1 <- and((t0, 1044495))
  or((t1, 2097200))

-----------------------------------------
-- not recursive
k95 :: {} [Word] ->> [Word]
k95{} t0 = b127[t0]

-----------------------------------------
-- not recursive
example2 :: [Word] ->> [Word]
example2 <-
  k95{}

-----------------------------------------
-- not recursive
b125 :: [Word] >>= [Word]
b125[t0] =
  t1 <- and((t0, -16))
  or((t1, 2))

-----------------------------------------
-- not recursive
k94 :: {} [Word] ->> [Word]
k94{} t0 = b125[t0]

-----------------------------------------
-- not recursive
example1 :: [Word] ->> [Word]
example1 <-
  k94{}

-----------------------------------------
-- not recursive
b255 :: [Word, Word] >>= [Word]
b255[t0, t1] =
  t2 <- and((t1, -16))
  or((t2, t0))

-----------------------------------------
-- not recursive
k170 :: {Word} [Word] ->> [Word]
k170{t0} t1 = b255[t0, t1]

-----------------------------------------
-- not recursive
k93 :: {} [Word] ->> [[Word] ->> [Word]]
k93{} t0 = k170{t0}

-----------------------------------------
-- not recursive
setTfield :: [Word] ->> [[Word] ->> [Word]]
setTfield <-
  k93{}

-----------------------------------------
-- not recursive
b254 :: [Word, Word] >>= [Word]
b254[t0, t1] =
  t2 <- and((t1, -4081))
  or((t2, t0))

-----------------------------------------
-- not recursive
k169 :: {Word} [Word] ->> [Word]
k169{t0} t1 = b254[t0, t1]

-----------------------------------------
-- not recursive
b121 :: [Word] >>= [[Word] ->> [Word]]
b121[t0] =
  t1 <- shl((t0, 4))
  k169{t1}

-----------------------------------------
-- not recursive
k92 :: {} [Word] ->> [[Word] ->> [Word]]
k92{} t0 = b121[t0]

-----------------------------------------
-- not recursive
setZfield :: [Word] ->> [[Word] ->> [Word]]
setZfield <-
  k92{}

-----------------------------------------
-- not recursive
b253 :: [Word, Word] >>= [Word]
b253[t0, t1] =
  t2 <- and((t1, -1044481))
  or((t2, t0))

-----------------------------------------
-- not recursive
k168 :: {Word} [Word] ->> [Word]
k168{t0} t1 = b253[t0, t1]

-----------------------------------------
-- not recursive
b119 :: [Word] >>= [[Word] ->> [Word]]
b119[t0] =
  t1 <- shl((t0, 12))
  k168{t1}

-----------------------------------------
-- not recursive
k91 :: {} [Word] ->> [[Word] ->> [Word]]
k91{} t0 = b119[t0]

-----------------------------------------
-- not recursive
setYfield :: [Word] ->> [[Word] ->> [Word]]
setYfield <-
  k91{}

-----------------------------------------
-- not recursive
b251 :: [Word, Word] >>= [Word]
b251[t0, t1] =
  t2 <- and((t1, 1048575))
  or((t2, t0))

-----------------------------------------
-- not recursive
k166 :: {Word} [Word] ->> [Word]
k166{t0} t1 = b251[t0, t1]

-----------------------------------------
-- not recursive
b117 :: [Word] >>= [[Word] ->> [Word]]
b117[t0] =
  t1 <- shl((t0, 20))
  k166{t1}

-----------------------------------------
-- not recursive
k90 :: {} [Word] ->> [[Word] ->> [Word]]
k90{} t0 = b117[t0]

-----------------------------------------
-- not recursive
setXfield :: [Word] ->> [[Word] ->> [Word]]
setXfield <-
  k90{}

-----------------------------------------
-- not recursive
b113 :: [Word, Word, Word] >>= [Word]
b113[t0, t1, t2] =
  t3 <- not((t1))
  t4 <- and((t0, t3))
  or((t4, t2))

-----------------------------------------
-- not recursive
k87 :: {Word, Word} [Word] ->> [Word]
k87{t0, t1} t2 = b113[t2, t1, t0]

-----------------------------------------
-- not recursive
k88 :: {Word} [Word] ->> [[Word] ->> [Word]]
k88{t0} t1 = k87{t1, t0}

-----------------------------------------
-- not recursive
k89 :: {} [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
k89{} t0 = k88{t0}

-----------------------------------------
-- not recursive
setField :: [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
setField <-
  k89{}

-----------------------------------------
-- not recursive
bitfields :: Eight0
bitfields <-
  Eight0(setField, setXfield, setYfield, setZfield, setTfield, example1, example2, example3)

-----------------------------------------
-- not recursive
s25 :: Four1
s25 <-
  Four1(-1, -2, -7, -2)

-----------------------------------------
-- not recursive
k121 :: {} [Word] ->> [Word]
k121{} t0 = or((t0, 15))

-----------------------------------------
-- not recursive
barg :: [Word] ->> [Word]
barg <-
  k121{}

-----------------------------------------
-- not recursive
k120 :: {} [Word] ->> [Word]
k120{} t0 = and((t0, 15))

-----------------------------------------
-- not recursive
barf :: [Word] ->> [Word]
barf <-
  k120{}

-----------------------------------------
-- not recursive
k119 :: {} [Word] ->> [Word]
k119{} t0 = return t0

-----------------------------------------
-- not recursive
bare :: [Word] ->> [Word]
bare <-
  k119{}

-----------------------------------------
-- not recursive
k117 :: {} [Word] ->> [Word]
k117{} t0 = neg((t0))

-----------------------------------------
-- not recursive
barc :: [Word] ->> [Word]
barc <-
  k117{}

-----------------------------------------
-- not recursive
k116 :: {} [Word] ->> [Word]
k116{} t0 = not((t0))

-----------------------------------------
-- not recursive
barb :: [Word] ->> [Word]
barb <-
  k116{}

-----------------------------------------
-- not recursive
k115 :: {} [Word] ->> [Word]
k115{} t0 = return 0

-----------------------------------------
-- not recursive
bara :: [Word] ->> [Word]
bara <-
  k115{}

-----------------------------------------
-- not recursive
k118 :: {} [Word] ->> [Word]
k118{} t0 = return -1

-----------------------------------------
-- not recursive
bard :: [Word] ->> [Word]
bard <-
  k118{}

-----------------------------------------
-- not recursive
bars :: Eight2
bars <-
  Eight2(bard, bara, barb, barc, bard, bare, barf, barg)

-----------------------------------------
-- not recursive
foos :: Eight2
foos <-
  Eight2(bare, bare, bare, bard, bara, bare, bare, barb)

-----------------------------------------
-- not recursive
k105 :: {} [Word] ->> [Word]
k105{} t0 = add((t0, 3))

-----------------------------------------
-- not recursive
plus3e :: [Word] ->> [Word]
plus3e <-
  k105{}

-----------------------------------------
-- not recursive
plusses :: Six3
plusses <-
  Six3(plus3e, plus3e, plus3e, plus3e, plus3e, plus3e)

-----------------------------------------
-- not recursive
b141 :: [Word] >>= [Word]
b141[t0] =
  t1 <- add((t0, 1))
  mul((t1, t1))

-----------------------------------------
-- not recursive
k99 :: {} [Word] ->> [Word]
k99{} t0 = b141[t0]

-----------------------------------------
-- not recursive
square2 :: [Word] ->> [Word]
square2 <-
  k99{}

-----------------------------------------
-- not recursive
k97 :: {} [Word] ->> [Word]
k97{} t0 = mul((t0, t0))

-----------------------------------------
-- not recursive
square :: [Word] ->> [Word]
square <-
  k97{}

-----------------------------------------
-- not recursive
s19 :: Three4
s19 <-
  Three4(square, square2, square2)

-----------------------------------------
-- not recursive
entrypoint main :: Six5
main <-
  Six5(s19, plusses, foos, bars, s25, bitfields)

-----------------------------------------
-- Entrypoints: main
