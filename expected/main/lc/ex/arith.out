data Eight0
  = Eight0 ([Word] ->> [[Word] ->> [[Word] ->> [Word]]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [[Word] ->> [Word]]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Eight2
  = Eight2 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Four1
  = Four1 Word Word Word Word

data Six3
  = Six3 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

data Six5
  = Six5 Three4 Six3 Eight2 Eight2 Four1 Eight0

data Three4
  = Three4 ([Word] ->> [Word]) ([Word] ->> [Word]) ([Word] ->> [Word])

-----------------------------------------
-- not recursive
k104 :: {} [Word] ->> [Word]
k104{} t0 = return 1056820

-----------------------------------------
-- not recursive
example3 :: [Word] ->> [Word]
example3 <-
  k104{}

-----------------------------------------
-- not recursive
b162 :: [Word] >>= [Word]
b162[t0] =
  t1 <- and((t0, 1044495))
  or((t1, 2097200))

-----------------------------------------
-- not recursive
k105 :: {} [Word] ->> [Word]
k105{} t0 = b162[t0]

-----------------------------------------
-- not recursive
example2 :: [Word] ->> [Word]
example2 <-
  k105{}

-----------------------------------------
-- not recursive
b164 :: [Word] >>= [Word]
b164[t0] =
  t1 <- and((t0, -16))
  or((t1, 2))

-----------------------------------------
-- not recursive
k106 :: {} [Word] ->> [Word]
k106{} t0 = b164[t0]

-----------------------------------------
-- not recursive
example1 :: [Word] ->> [Word]
example1 <-
  k106{}

-----------------------------------------
-- not recursive
b243 :: [Word, Word] >>= [Word]
b243[t0, t1] =
  t2 <- and((t1, -16))
  or((t2, t0))

-----------------------------------------
-- not recursive
k162 :: {Word} [Word] ->> [Word]
k162{t0} t1 = b243[t0, t1]

-----------------------------------------
-- not recursive
k107 :: {} [Word] ->> [[Word] ->> [Word]]
k107{} t0 = k162{t0}

-----------------------------------------
-- not recursive
setTfield :: [Word] ->> [[Word] ->> [Word]]
setTfield <-
  k107{}

-----------------------------------------
-- not recursive
b242 :: [Word, Word] >>= [Word]
b242[t0, t1] =
  t2 <- and((t1, -4081))
  or((t2, t0))

-----------------------------------------
-- not recursive
k161 :: {Word} [Word] ->> [Word]
k161{t0} t1 = b242[t0, t1]

-----------------------------------------
-- not recursive
b168 :: [Word] >>= [[Word] ->> [Word]]
b168[t0] =
  t1 <- shl((t0, 4))
  k161{t1}

-----------------------------------------
-- not recursive
k108 :: {} [Word] ->> [[Word] ->> [Word]]
k108{} t0 = b168[t0]

-----------------------------------------
-- not recursive
setZfield :: [Word] ->> [[Word] ->> [Word]]
setZfield <-
  k108{}

-----------------------------------------
-- not recursive
b241 :: [Word, Word] >>= [Word]
b241[t0, t1] =
  t2 <- and((t1, -1044481))
  or((t2, t0))

-----------------------------------------
-- not recursive
k160 :: {Word} [Word] ->> [Word]
k160{t0} t1 = b241[t0, t1]

-----------------------------------------
-- not recursive
b170 :: [Word] >>= [[Word] ->> [Word]]
b170[t0] =
  t1 <- shl((t0, 12))
  k160{t1}

-----------------------------------------
-- not recursive
k109 :: {} [Word] ->> [[Word] ->> [Word]]
k109{} t0 = b170[t0]

-----------------------------------------
-- not recursive
setYfield :: [Word] ->> [[Word] ->> [Word]]
setYfield <-
  k109{}

-----------------------------------------
-- not recursive
b239 :: [Word, Word] >>= [Word]
b239[t0, t1] =
  t2 <- and((t1, 1048575))
  or((t2, t0))

-----------------------------------------
-- not recursive
k158 :: {Word} [Word] ->> [Word]
k158{t0} t1 = b239[t0, t1]

-----------------------------------------
-- not recursive
b172 :: [Word] >>= [[Word] ->> [Word]]
b172[t0] =
  t1 <- shl((t0, 20))
  k158{t1}

-----------------------------------------
-- not recursive
k110 :: {} [Word] ->> [[Word] ->> [Word]]
k110{} t0 = b172[t0]

-----------------------------------------
-- not recursive
setXfield :: [Word] ->> [[Word] ->> [Word]]
setXfield <-
  k110{}

-----------------------------------------
-- not recursive
b174 :: [Word, Word, Word] >>= [Word]
b174[t0, t1, t2] =
  t3 <- not((t1))
  t4 <- and((t0, t3))
  or((t4, t2))

-----------------------------------------
-- not recursive
k111 :: {Word, Word} [Word] ->> [Word]
k111{t0, t1} t2 = b174[t2, t1, t0]

-----------------------------------------
-- not recursive
k112 :: {Word} [Word] ->> [[Word] ->> [Word]]
k112{t0} t1 = k111{t1, t0}

-----------------------------------------
-- not recursive
k113 :: {} [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
k113{} t0 = k112{t0}

-----------------------------------------
-- not recursive
setField :: [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
setField <-
  k113{}

-----------------------------------------
-- not recursive
bitfields :: Eight0
bitfields <-
  Eight0(setField, setXfield, setYfield, setZfield, setTfield, example1, example2, example3)

-----------------------------------------
-- not recursive
s25 :: Four1
s25 <-
  Four1(-1, -2, -7, -2)

-----------------------------------------
-- not recursive
k79 :: {} [Word] ->> [Word]
k79{} t0 = or((t0, 15))

-----------------------------------------
-- not recursive
barg :: [Word] ->> [Word]
barg <-
  k79{}

-----------------------------------------
-- not recursive
k80 :: {} [Word] ->> [Word]
k80{} t0 = and((t0, 15))

-----------------------------------------
-- not recursive
barf :: [Word] ->> [Word]
barf <-
  k80{}

-----------------------------------------
-- not recursive
k81 :: {} [Word] ->> [Word]
k81{} t0 = return t0

-----------------------------------------
-- not recursive
bare :: [Word] ->> [Word]
bare <-
  k81{}

-----------------------------------------
-- not recursive
k82 :: {} [Word] ->> [Word]
k82{} t0 = return -1

-----------------------------------------
-- not recursive
bard :: [Word] ->> [Word]
bard <-
  k82{}

-----------------------------------------
-- not recursive
k83 :: {} [Word] ->> [Word]
k83{} t0 = neg((t0))

-----------------------------------------
-- not recursive
barc :: [Word] ->> [Word]
barc <-
  k83{}

-----------------------------------------
-- not recursive
k84 :: {} [Word] ->> [Word]
k84{} t0 = not((t0))

-----------------------------------------
-- not recursive
barb :: [Word] ->> [Word]
barb <-
  k84{}

-----------------------------------------
-- not recursive
k85 :: {} [Word] ->> [Word]
k85{} t0 = return 0

-----------------------------------------
-- not recursive
bara :: [Word] ->> [Word]
bara <-
  k85{}

-----------------------------------------
-- not recursive
bars :: Eight2
bars <-
  Eight2(bard, bara, barb, barc, bard, bare, barf, barg)

-----------------------------------------
-- not recursive
foos :: Eight2
foos <-
  Eight2(bare, bare, bare, bard, bara, bare, bare, barb)

-----------------------------------------
-- not recursive
k95 :: {} [Word] ->> [Word]
k95{} t0 = add((t0, 3))

-----------------------------------------
-- not recursive
plus3e :: [Word] ->> [Word]
plus3e <-
  k95{}

-----------------------------------------
-- not recursive
plusses :: Six3
plusses <-
  Six3(plus3e, plus3e, plus3e, plus3e, plus3e, plus3e)

-----------------------------------------
-- not recursive
b148 :: [Word] >>= [Word]
b148[t0] =
  t1 <- add((t0, 1))
  mul((t1, t1))

-----------------------------------------
-- not recursive
k101 :: {} [Word] ->> [Word]
k101{} t0 = b148[t0]

-----------------------------------------
-- not recursive
square2 :: [Word] ->> [Word]
square2 <-
  k101{}

-----------------------------------------
-- not recursive
k103 :: {} [Word] ->> [Word]
k103{} t0 = mul((t0, t0))

-----------------------------------------
-- not recursive
square :: [Word] ->> [Word]
square <-
  k103{}

-----------------------------------------
-- not recursive
s19 :: Three4
s19 <-
  Three4(square, square2, square2)

-----------------------------------------
-- not recursive
entrypoint main :: Six5
main <-
  Six5(s19, plusses, foos, bars, s25, bitfields)

-----------------------------------------
-- Entrypoints: main
