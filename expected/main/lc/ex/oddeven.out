data Pair0
  = Pair0 ([Word] ->> [Flag]) ([Word] ->> [Flag])

-----------------------------------------
-- not recursive
b71 :: [] >>= [Flag]
b71[] =
  return flag1

-----------------------------------------
-- not recursive
b66 :: [] >>= [Flag]
b66[] =
  return flag0

-----------------------------------------
-- recursive
b67 :: [Word] >>= [Flag]
b67[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b71[]
    else b72[t1]
b72 :: [Word] >>= [Flag]
b72[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b66[]
    else b67[t1]

-----------------------------------------
-- not recursive
entrypoint main :: [Word] >>= [Flag]
main[t0] =
  t1 <- primEq((t0, 0))
  if t1
    then b71[]
    else b72[t0]

-----------------------------------------
-- not recursive
entrypoint main0 :: Flag
main0 <-
  return flag1

-----------------------------------------
-- not recursive
entrypoint main1 :: [Word] >>= [Flag]
main1[t0] =
  t1 <- primEq((t0, 0))
  if t1
    then b71[]
    else b72[t0]

-----------------------------------------
-- not recursive
k45 :: {} [Word] ->> [Flag]
k45{} t0 = main[t0]

-----------------------------------------
-- not recursive
even :: [Word] ->> [Flag]
even <-
  k45{}

-----------------------------------------
-- not recursive
b104 :: [Word] >>= [Flag]
b104[t0] =
  t1 <- primEq((t0, 0))
  if t1
    then b66[]
    else b67[t0]

-----------------------------------------
-- not recursive
k44 :: {} [Word] ->> [Flag]
k44{} t0 = b104[t0]

-----------------------------------------
-- not recursive
odd :: [Word] ->> [Flag]
odd <-
  k44{}

-----------------------------------------
-- not recursive
entrypoint main2 :: Pair0
main2 <-
  Pair0(odd, even)

-----------------------------------------
-- not recursive
entrypoint main3 :: [Word] >>= [Flag]
main3[t0] =
  t1 <- add((t0, 1))
  t2 <- primEq((t1, 0))
  if t2
    then b66[]
    else b67[t1]

-----------------------------------------
-- Entrypoints: main main0 main1 main2 main3
