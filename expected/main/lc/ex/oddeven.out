data Pair0
  = Pair0 ([Word] ->> [Flag]) ([Word] ->> [Flag])

-----------------------------------------
-- not recursive
b79 :: [] >>= [Flag]
b79[] =
  return flag0

-----------------------------------------
-- not recursive
b84 :: [] >>= [Flag]
b84[] =
  return flag1

-----------------------------------------
-- recursive
b83 :: [Word] >>= [Flag]
b83[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b79[]
    else b78[t1]
b78 :: [Word] >>= [Flag]
b78[t0] =
  t1 <- add((t0, -1))
  b101[t1, 0]
b101 :: [Word, Word] >>= [Flag]
b101[t0, t1] =
  t2 <- primEq((t0, t1))
  if t2
    then b84[]
    else b83[t0]

-----------------------------------------
-- not recursive
entrypoint main :: [Word] >>= [Flag]
main[t0] =
  b101[t0, 0]

-----------------------------------------
-- not recursive
entrypoint main0 :: Flag
main0 <-
  return flag1

-----------------------------------------
-- not recursive
entrypoint main1 :: [Word] >>= [Flag]
main1[t0] =
  b101[t0, 0]

-----------------------------------------
-- not recursive
k53 :: {} [Word] ->> [Flag]
k53{} t0 = b101[t0, 0]

-----------------------------------------
-- not recursive
even :: [Word] ->> [Flag]
even <-
  k53{}

-----------------------------------------
-- not recursive
b105 :: [Word, Word] >>= [Flag]
b105[t0, t1] =
  t2 <- primEq((t0, t1))
  if t2
    then b79[]
    else b78[t0]

-----------------------------------------
-- not recursive
k52 :: {} [Word] ->> [Flag]
k52{} t0 = b105[t0, 0]

-----------------------------------------
-- not recursive
odd :: [Word] ->> [Flag]
odd <-
  k52{}

-----------------------------------------
-- not recursive
entrypoint main2 :: Pair0
main2 <-
  Pair0(odd, even)

-----------------------------------------
-- not recursive
entrypoint main3 :: [Word] >>= [Flag]
main3[t0] =
  t1 <- add((t0, 1))
  t2 <- primEq((t1, 0))
  if t2
    then b79[]
    else b78[t1]

-----------------------------------------
-- Entrypoints: main main0 main1 main2 main3
