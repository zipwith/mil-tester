data Unit
  = Unit

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b82 :: [] >>= [Unit]
b82[] =
  [t0, t1] <- rdtscPrim(())
  [t2, t3] <- rdtscPrim(())
  t4 <- sub((t2, t0))
  [] <- print((t4))
  return Unit

-----------------------------------------
-- not recursive
k54 :: {} [] ->> [Unit]
k54{} [] = b82[]

-----------------------------------------
-- not recursive
entrypoint main :: [] ->> [Unit]
main <-
  k54{}

-----------------------------------------
-- not recursive
entrypoint p1 :: {Word} [Word] ->> [Word]
p1{t0} t1 = add((t0, t1))

-----------------------------------------
-- not recursive
entrypoint p0 :: {} [Word] ->> [[Word] ->> [Word]]
p0{} t0 = p1{t0}

-----------------------------------------
-- not recursive
entrypoint ext :: [Word] ->> [[Word] ->> [Word]]
ext <-
  p0{}

-----------------------------------------
-- not recursive
entrypoint fromNat1 :: forall (a :: *). {a} [] ->> [a]
fromNat1{t0} [] = return t0

-----------------------------------------
-- not recursive
entrypoint fromNat0 :: forall (a :: *). {} [a] ->> [[] ->> [a]]
fromNat0{} t0 = fromNat1{t0}

-----------------------------------------
-- not recursive
entrypoint fromNat :: forall (a :: *). [a] ->> [[] ->> [a]]
fromNat <-
  fromNat0{}

-----------------------------------------
-- not recursive
entrypoint bx :: [Word, Word, Word, Word] >>= [Word, Word]
bx[t0, t1, t2, t3] =
  [t4, t5] <- subc0((t1, t3))
  [t6, t7] <- subc((t0, t2, t5))
  return [t4, t6]

-----------------------------------------
-- not recursive
entrypoint kb :: {Word, Word} [Word, Word] ->> [Word, Word]
kb{t0, t1} [t2, t3] = bx[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint ka :: {} [Word, Word] ->> [[Word, Word] ->> [Word, Word]]
ka{} [t0, t1] = kb{t0, t1}

-----------------------------------------
-- not recursive
entrypoint subx :: [Word, Word] ->> [[Word, Word] ->> [Word, Word]]
subx <-
  ka{}

-----------------------------------------
-- not recursive
entrypoint b :: [Word, Word, Word, Word] >>= [Word, Word]
b[t0, t1, t2, t3] =
  [t4, t5] <- subc0((t1, t3))
  [t6, t7] <- subc((t0, t2, t5))
  return [t4, t6]

-----------------------------------------
-- not recursive
entrypoint k1 :: {Word, Word} [Word, Word] ->> [Word, Word]
k1{t0, t1} [t2, t3] = b[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint k :: {} [Word, Word] ->> [[Word, Word] ->> [Word, Word]]
k{} [t0, t1] = k1{t0, t1}

-----------------------------------------
-- not recursive
entrypoint sub64 :: [Word, Word] ->> [[Word, Word] ->> [Word, Word]]
sub64 <-
  k{}

-----------------------------------------
-- not recursive
b8 :: [] >>= [Word]
b8[] =
  [t0, t1] <- rdtscPrim(())
  return t0

-----------------------------------------
-- not recursive
entrypoint rdtscClosure :: {} [] ->> [Word]
rdtscClosure{} [] = b8[]

-----------------------------------------
-- not recursive
entrypoint rdtsc :: [] ->> [Word]
rdtsc <-
  rdtscClosure{}

-----------------------------------------
-- Entrypoints: main ext fromNat subx sub64 rdtsc
