data Unit
  = Unit

-----------------------------------------
-- not recursive
priosetSize :: Word
priosetSize <- area (Stored Word) aligned 4

-----------------------------------------
-- not recursive
entrypoint clearPrioset :: [] >>= [Unit]
clearPrioset[] =
  store32((priosetSize, 0))

-----------------------------------------
-- not recursive
b245 :: [] >>= [Word]
b245[] =
  return 0

-----------------------------------------
-- not recursive
b244 :: [Word] >>= [Word]
b244[t0] =
  t1 <- shl((t0, 1))
  t2 <- add((t1, -2))
  or((t2, 1))

-----------------------------------------
-- not recursive
b231 :: [Word] >>= [Word]
b231[t0] =
  t1 <- primUgt((t0, 0))
  if t1
    then b244[t0]
    else b245[]

-----------------------------------------
-- not recursive
prioset :: Word
prioset <- area (Array 256 (Stored (Ix 256))) aligned 256

-----------------------------------------
-- not recursive
prioidx :: Word
prioidx <- area (Array 256 (Stored (Ix 256))) aligned 256

-----------------------------------------
-- not recursive
b78 :: [Word, Word] >>= [Unit]
b78[t0, t1] =
  t2 <- add((prioset, t1))
  t3 <- store8((t2, t0))
  t4 <- add((prioidx, t0))
  store8((t4, t1))

-----------------------------------------
-- not recursive
b189 :: [Word] >>= [Unit]
b189[t0] =
  t1 <- store8((prioset, t0))
  t2 <- add((prioidx, t0))
  store8((t2, 0))

-----------------------------------------
-- recursive
b88 :: [Word, Word, Word, Word] >>= [Unit]
b88[t0, t1, t2, t3] =
  t4 <- add((prioset, t0))
  t5 <- store8((t4, t1))
  t6 <- add((prioidx, t1))
  t7 <- store8((t6, t0))
  t8 <- b231[t2]
  t9 <- primEq((t8, 0))
  if t9
    then b189[t3]
    else b199[t8, t2, t3]
b199 :: [Word, Word, Word] >>= [Unit]
b199[t0, t1, t2] =
  t3 <- lshr((t0, 2))
  t4 <- add((prioset, t3))
  t5 <- load8((t4))
  t6 <- primUlt((t5, t2))
  if t6
    then b88[t1, t5, t3, t2]
    else b78[t2, t1]

-----------------------------------------
-- not recursive
entrypoint insertPriority :: [Word] >>= [Unit]
insertPriority[t0] =
  t1 <- load32((priosetSize))
  t2 <- add((t1, 1))
  t3 <- store32((priosetSize, t2))
  t4 <- and((t1, 255))
  t5 <- b231[t4]
  t6 <- primEq((t5, 0))
  if t6
    then b189[t0]
    else b199[t5, t4, t0]

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b119 :: [] >>= [Unit]
b119[] =
  return Unit

-----------------------------------------
-- not recursive
construct_Just1 :: [Word] >>= [Word]
construct_Just1[t0] =
  t1 <- shl((t0, 1))
  or((t1, 1))

-----------------------------------------
-- not recursive
b247 :: [Word, Word] >>= [Word]
b247[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then construct_Just1[t0]
    else b245[]

-----------------------------------------
-- not recursive
b109 :: [Word, Word, Word, Word] >>= [Unit]
b109[t0, t1, t2, t3] =
  t4 <- add((prioset, t0))
  t5 <- store8((t4, t1))
  t6 <- add((prioidx, t1))
  t7 <- store8((t6, t0))
  t8 <- add((prioset, t2))
  t9 <- store8((t8, t3))
  t10 <- add((prioidx, t3))
  store8((t10, t2))

-----------------------------------------
-- not recursive
b110 :: [Word, Word, Word, Word] >>= [Unit]
b110[t0, t1, t2, t3] =
  t4 <- primUgt((t0, t3))
  if t4
    then b109[t2, t0, t1, t3]
    else b78[t3, t2]

-----------------------------------------
-- recursive
b105 :: [Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b105[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUgt((t1, t3))
  if t7
    then b78[t1, t4]
    else b101[t6, t5, t4, t3, t2, t1, t0]
b201 :: [Word, Word, Word, Word, Word, Word] >>= [Unit]
b201[t0, t1, t2, t3, t4, t5] =
  t6 <- lshr((t0, 1))
  t7 <- add((prioset, t6))
  t8 <- load8((t7))
  t9 <- primUgt((t2, t5))
  if t9
    then b105[t1, t2, t6, t8, t3, t4, t5]
    else b101[t5, t4, t3, t8, t6, t2, t1]
b101 :: [Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b101[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUgt((t0, t3))
  if t7
    then b100[t2, t0, t1, t5, t6]
    else b100[t2, t3, t4, t5, t6]
b100 :: [Word, Word, Word, Word, Word] >>= [Unit]
b100[t0, t1, t2, t3, t4] =
  t5 <- add((prioset, t0))
  t6 <- store8((t5, t1))
  t7 <- add((prioidx, t1))
  t8 <- store8((t7, t0))
  t9 <- mul((t2, 2))
  t10 <- add((t9, 1))
  t11 <- b247[t10, t4]
  t12 <- primEq((t11, 0))
  if t12
    then b78[t3, t2]
    else b236[t11, t2, t4, t3]
b236 :: [Word, Word, Word, Word] >>= [Unit]
b236[t0, t1, t2, t3] =
  t4 <- lshr((t0, 1))
  t5 <- add((prioset, t4))
  t6 <- load8((t5))
  t7 <- mul((t1, 2))
  t8 <- add((t7, 2))
  t9 <- b247[t8, t2]
  t10 <- primEq((t9, 0))
  if t10
    then b110[t6, t4, t1, t3]
    else b201[t9, t2, t3, t1, t4, t6]

-----------------------------------------
-- not recursive
b168 :: [Word, Word, Word] >>= [Unit]
b168[t0, t1, t2] =
  t3 <- mul((t2, 2))
  t4 <- add((t3, 1))
  t5 <- b247[t4, t0]
  t6 <- primEq((t5, 0))
  if t6
    then b78[t1, t2]
    else b236[t5, t2, t0, t1]

-----------------------------------------
-- not recursive
b120 :: [Word, Word, Word] >>= [Unit]
b120[t0, t1, t2] =
  t3 <- add((prioidx, t0))
  t4 <- load8((t3))
  t5 <- add((t2, -2))
  t6 <- and((t5, 255))
  t7 <- b168[t6, t1, t4]
  t8 <- add((prioset, t4))
  t9 <- load8((t8))
  t10 <- b231[t4]
  t11 <- primEq((t10, 0))
  if t11
    then b189[t9]
    else b199[t10, t4, t9]

-----------------------------------------
-- not recursive
entrypoint removePriority :: [Word] >>= [Unit]
removePriority[t0] =
  t1 <- load32((priosetSize))
  t2 <- add((t1, -1))
  t3 <- store32((priosetSize, t2))
  t4 <- and((t2, 255))
  t5 <- add((prioset, t4))
  t6 <- load8((t5))
  t7 <- primNeq((t0, t6))
  if t7
    then b120[t0, t6, t1]
    else b119[]

-----------------------------------------
-- not recursive
b187 :: [] >>= [Word]
b187[] =
  load8((prioset))

-----------------------------------------
-- not recursive
b174 :: [] >>= [Word]
b174[] =
  return -1

-----------------------------------------
-- not recursive
entrypoint highestPriority1 :: [] >>= [Word]
highestPriority1[] =
  t0 <- load32((priosetSize))
  t1 <- primEq((t0, 0))
  if t1
    then b174[]
    else b187[]

-----------------------------------------
-- not recursive
s9 :: Unit
s9 <-
  Unit()

-----------------------------------------
-- not recursive
b205 :: [] >>= [Unit]
b205[] =
  return s9

-----------------------------------------
-- recursive
b248 :: [Word, Word] >>= [Unit]
b248[t0, t1] =
  [] <- noinline(())
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  t5 <- primUlt((t3, 256))
  if t5
    then b248[t4, t3]
    else b205[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store32((priosetSize, 0))
  t1 <- b248[prioset, 0]
  b248[prioidx, 0]

-----------------------------------------
-- Entrypoints: clearPrioset insertPriority removePriority highestPriority1
