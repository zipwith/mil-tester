data List (a :: *)
  = Nil
  | Cons a (List a)

-----------------------------------------
-- not recursive
b79 :: [Word] >>= [Word]
b79[t0] =
  return t0

-----------------------------------------
-- recursive
b78 :: forall (a :: *). [List a, Word] >>= [Word]
b78[t0, t1] =
  t2 <- Cons 1 t0
  t3 <- add((t1, 1))
  b80[t2, t3]
b80 :: forall (a :: *). [List a, Word] >>= [Word]
b80[t0, t1] =
  case t0 of
    Nil -> b79[t1]
    Cons -> b78[t0, t1]

-----------------------------------------
-- not recursive
Nil :: forall (a :: *). List a
Nil <-
  Nil()

-----------------------------------------
-- not recursive
b85 :: forall (a :: *). [] >>= [List a]
b85[] =
  return Nil

-----------------------------------------
-- recursive
b101 :: [List Word] >>= [List Word]
b101[t0] =
  case t0 of
    Nil -> b85[]
    Cons -> b102[t0]
b102 :: [List Word] >>= [List Word]
b102[t0] =
  t1 <- Cons 0 t0
  t2 <- Cons 1 t0
  t3 <- mul((t1, t1))
  t4 <- b101[t2]
  Cons(t3, t4)

-----------------------------------------
-- not recursive
s3 :: List Word
s3 <-
  Cons(4, Nil)

-----------------------------------------
-- not recursive
s4 :: List Word
s4 <-
  Cons(3, s3)

-----------------------------------------
-- not recursive
s5 :: List Word
s5 <-
  Cons(2, s4)

-----------------------------------------
-- not recursive
xs :: List Word
xs <-
  Cons(1, s5)

-----------------------------------------
-- not recursive
entrypoint main :: List Word
main <-
  b102[xs]

-----------------------------------------
-- not recursive
entrypoint size :: Word
size <-
  b80[main, 0]

-----------------------------------------
-- not recursive
k52 :: forall (a :: *). {Word} [List a] ->> [Word]
k52{t0} t1 = b80[t1, t0]

-----------------------------------------
-- not recursive
entrypoint length :: forall (a :: *). [List a] ->> [Word]
length <-
  k52{0}

-----------------------------------------
-- recursive
b84 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b84[t0, t1] =
  t2 <- Cons 0 t0
  t3 <- Cons 1 t0
  t4 <- t1 @ t2
  t5 <- b86[t3, t1]
  Cons(t4, t5)
b86 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b86[t0, t1] =
  case t0 of
    Nil -> b85[]
    Cons -> b84[t0, t1]

-----------------------------------------
-- not recursive
k54 :: forall (a :: *) (a0 :: *). {[a] ->> [a0]} [List a] ->> [List a0]
k54{t0} t1 = b86[t1, t0]

-----------------------------------------
-- not recursive
k55 :: forall (a :: *) (a0 :: *). {} [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
k55{} t0 = k54{t0}

-----------------------------------------
-- not recursive
entrypoint map :: forall (a :: *) (a0 :: *). [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
map <-
  k55{}

-----------------------------------------
-- Entrypoints: size main length map
