data List (a :: *)
  = Nil
  | Cons a (List a)

-----------------------------------------
-- not recursive
entrypoint size :: Bit 32
size <-
  return 4

-----------------------------------------
-- not recursive
Nil :: forall (a :: *). List a
Nil <-
  Nil()

-----------------------------------------
-- not recursive
s5 :: List (Bit 32)
s5 <-
  Cons(16, Nil)

-----------------------------------------
-- not recursive
s6 :: List (Bit 32)
s6 <-
  Cons(9, s5)

-----------------------------------------
-- not recursive
s7 :: List (Bit 32)
s7 <-
  Cons(4, s6)

-----------------------------------------
-- not recursive
entrypoint main :: List (Bit 32)
main <-
  Cons(1, s7)

-----------------------------------------
-- not recursive
b79 :: [Bit 32] >>= [Bit 32]
b79[t0] =
  return t0

-----------------------------------------
-- recursive
b78 :: forall (a :: *). [List a, Bit 32] >>= [Bit 32]
b78[t0, t1] =
  t2 <- Cons 1 t0
  t3 <- add((t1, 1))
  b80[t2, t3]
b80 :: forall (a :: *). [List a, Bit 32] >>= [Bit 32]
b80[t0, t1] =
  case t0 of
    Nil -> b79[t1]
    Cons -> b78[t0, t1]

-----------------------------------------
-- not recursive
k52 :: forall (a :: *). {Bit 32} [List a] ->> [Bit 32]
k52{t0} t1 = b80[t1, t0]

-----------------------------------------
-- not recursive
entrypoint length :: forall (a :: *). [List a] ->> [Bit 32]
length <-
  k52{0}

-----------------------------------------
-- not recursive
b85 :: forall (a :: *). [] >>= [List a]
b85[] =
  return Nil

-----------------------------------------
-- recursive
b84 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b84[t0, t1] =
  t2 <- Cons 0 t0
  t3 <- Cons 1 t0
  t4 <- t1 @ t2
  t5 <- b86[t3, t1]
  Cons(t4, t5)
b86 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b86[t0, t1] =
  case t0 of
    Nil -> b85[]
    Cons -> b84[t0, t1]

-----------------------------------------
-- not recursive
k54 :: forall (a :: *) (a0 :: *). {[a] ->> [a0]} [List a] ->> [List a0]
k54{t0} t1 = b86[t1, t0]

-----------------------------------------
-- not recursive
k55 :: forall (a :: *) (a0 :: *). {} [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
k55{} t0 = k54{t0}

-----------------------------------------
-- not recursive
entrypoint map :: forall (a :: *) (a0 :: *). [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
map <-
  k55{}

-----------------------------------------
-- Entrypoints: size main length map
