data List (a :: *)
  = Nil
  | Cons a (List a)

-----------------------------------------
-- not recursive
entrypoint size :: Word
size <-
  return 4

-----------------------------------------
-- not recursive
Nil :: forall (a :: *). List a
Nil <-
  Nil()

-----------------------------------------
-- not recursive
s8 :: List Word
s8 <-
  Cons(16, Nil)

-----------------------------------------
-- not recursive
s9 :: List Word
s9 <-
  Cons(9, s8)

-----------------------------------------
-- not recursive
s10 :: List Word
s10 <-
  Cons(4, s9)

-----------------------------------------
-- not recursive
entrypoint main :: List Word
main <-
  Cons(1, s10)

-----------------------------------------
-- not recursive
b78 :: forall (a :: *). [a] >>= [a]
b78[t0] =
  return t0

-----------------------------------------
-- recursive
b83 :: forall (a :: *). [List a, Word] >>= [Word]
b83[t0, t1] =
  assert t0 Cons
  t2 <- Cons 1 t0
  t3 <- add((t1, 1))
  case t2 of
    Nil -> b78[t3]
    Cons -> b83[t2, t3]

-----------------------------------------
-- not recursive
b80 :: forall (a :: *). [List a, Word] >>= [Word]
b80[t0, t1] =
  case t0 of
    Nil -> b78[t1]
    Cons -> b83[t0, t1]

-----------------------------------------
-- not recursive
k47 :: forall (a :: *). {Word} [List a] ->> [Word]
k47{t0} t1 = b80[t1, t0]

-----------------------------------------
-- not recursive
entrypoint length :: forall (a :: *). [List a] ->> [Word]
length <-
  k47{0}

-----------------------------------------
-- not recursive
b72 :: forall (a :: *). [] >>= [List a]
b72[] =
  return Nil

-----------------------------------------
-- recursive
b84 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b84[t0, t1] =
  assert t0 Cons
  t2 <- Cons 0 t0
  t3 <- Cons 1 t0
  t4 <- t1 @ t2
  t5 <- b74[t3, t1]
  Cons(t4, t5)
b74 :: forall (a :: *) (a0 :: *). [List a, [a] ->> [a0]] >>= [List a0]
b74[t0, t1] =
  case t0 of
    Nil -> b72[]
    Cons -> b84[t0, t1]

-----------------------------------------
-- not recursive
k45 :: forall (a :: *) (a0 :: *). {[a] ->> [a0]} [List a] ->> [List a0]
k45{t0} t1 = b74[t1, t0]

-----------------------------------------
-- not recursive
k46 :: forall (a :: *) (a0 :: *). {} [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
k46{} t0 = k45{t0}

-----------------------------------------
-- not recursive
entrypoint map :: forall (a :: *) (a0 :: *). [[a] ->> [a0]] ->> [[List a] ->> [List a0]]
map <-
  k46{}

-----------------------------------------
-- Entrypoints: size main length map
