data Unit
  = Unit

-----------------------------------------
-- not recursive
priosetSize :: Word
priosetSize <- area (Stored Word) aligned 4

-----------------------------------------
-- not recursive
entrypoint clearPrioset :: [] >>= [Unit]
clearPrioset[] =
  store32((priosetSize, 0))

-----------------------------------------
-- not recursive
prioset :: Word
prioset <- area (Array 256 (Stored (Ix 256))) aligned 256

-----------------------------------------
-- not recursive
prioidx :: Word
prioidx <- area (Array 256 (Stored (Ix 256))) aligned 256

-----------------------------------------
-- not recursive
b189 :: [Word] >>= [Unit]
b189[t0] =
  t1 <- store8((prioset, t0))
  t2 <- add((prioidx, t0))
  store8((t2, 0))

-----------------------------------------
-- not recursive
b78 :: [Word, Word] >>= [Unit]
b78[t0, t1] =
  t2 <- add((prioset, t1))
  t3 <- store8((t2, t0))
  t4 <- add((prioidx, t0))
  store8((t4, t1))

-----------------------------------------
-- recursive
b88 :: [Word, Word, Word, Word] >>= [Unit]
b88[t0, t1, t2, t3] =
  t4 <- add((prioset, t0))
  t5 <- store8((t4, t1))
  t6 <- add((prioidx, t1))
  t7 <- store8((t6, t0))
  t8 <- primUgt((t2, 0))
  if t8
    then b329[t2, t3]
    else b189[t3]
b329 :: [Word, Word] >>= [Unit]
b329[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- lshr((t2, 1))
  t4 <- add((prioset, t3))
  t5 <- load8((t4))
  t6 <- primUlt((t5, t1))
  if t6
    then b88[t0, t5, t3, t1]
    else b78[t1, t0]

-----------------------------------------
-- not recursive
entrypoint insertPriority :: [Word] >>= [Unit]
insertPriority[t0] =
  t1 <- load32((priosetSize))
  t2 <- add((t1, 1))
  t3 <- store32((priosetSize, t2))
  t4 <- and((t1, 255))
  t5 <- primUgt((t4, 0))
  if t5
    then b329[t4, t0]
    else b189[t0]

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b119 :: [] >>= [Unit]
b119[] =
  return Unit

-----------------------------------------
-- not recursive
b216 :: [Word, Word] >>= [Unit]
b216[t0, t1] =
  t2 <- add((prioset, t1))
  t3 <- store8((t2, t0))
  t4 <- add((prioidx, t0))
  t5 <- store8((t4, t1))
  t6 <- load8((t2))
  t7 <- primUgt((t1, 0))
  if t7
    then b329[t1, t6]
    else b189[t6]

-----------------------------------------
-- not recursive
b224 :: [Word, Word, Word, Word] >>= [Unit]
b224[t0, t1, t2, t3] =
  t4 <- add((prioset, t0))
  t5 <- store8((t4, t1))
  t6 <- add((prioidx, t1))
  t7 <- store8((t6, t0))
  t8 <- add((prioset, t2))
  t9 <- store8((t8, t3))
  t10 <- add((prioidx, t3))
  t11 <- store8((t10, t2))
  t12 <- load8((t4))
  t13 <- primUgt((t0, 0))
  if t13
    then b329[t0, t12]
    else b189[t12]

-----------------------------------------
-- not recursive
b218 :: [Word, Word, Word, Word] >>= [Unit]
b218[t0, t1, t2, t3] =
  t4 <- primUgt((t0, t3))
  if t4
    then b224[t2, t0, t1, t3]
    else b216[t3, t2]

-----------------------------------------
-- not recursive
b204 :: [Word, Word, Word] >>= [Unit]
b204[t0, t1, t2] =
  t3 <- add((prioset, t1))
  t4 <- store8((t3, t0))
  t5 <- add((prioidx, t0))
  t6 <- store8((t5, t1))
  t7 <- add((prioset, t2))
  t8 <- load8((t7))
  t9 <- primUgt((t2, 0))
  if t9
    then b329[t2, t8]
    else b189[t8]

-----------------------------------------
-- not recursive
b207 :: [Word, Word, Word, Word, Word] >>= [Unit]
b207[t0, t1, t2, t3, t4] =
  t5 <- add((prioset, t0))
  t6 <- store8((t5, t1))
  t7 <- add((prioidx, t1))
  t8 <- store8((t7, t0))
  t9 <- add((prioset, t2))
  t10 <- store8((t9, t3))
  t11 <- add((prioidx, t3))
  t12 <- store8((t11, t2))
  t13 <- add((prioset, t4))
  t14 <- load8((t13))
  t15 <- primUgt((t4, 0))
  if t15
    then b329[t4, t14]
    else b189[t14]

-----------------------------------------
-- not recursive
b206 :: [Word, Word, Word, Word, Word] >>= [Unit]
b206[t0, t1, t2, t3, t4] =
  t5 <- primUgt((t0, t3))
  if t5
    then b207[t2, t0, t1, t3, t4]
    else b204[t3, t2, t4]

-----------------------------------------
-- recursive
b209 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b209[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUgt((t1, t3))
  if t8
    then b204[t1, t4, t7]
    else b210[t6, t5, t4, t3, t2, t1, t0, t7]
b339 :: [Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b339[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((prioset, t0))
  t8 <- load8((t7))
  t9 <- primUgt((t2, t5))
  if t9
    then b209[t1, t2, t0, t8, t3, t4, t5, t6]
    else b210[t5, t4, t3, t8, t0, t2, t1, t6]
b210 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b210[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUgt((t0, t3))
  if t8
    then b211[t2, t0, t1, t5, t6, t7]
    else b211[t2, t3, t4, t5, t6, t7]
b211 :: [Word, Word, Word, Word, Word, Word] >>= [Unit]
b211[t0, t1, t2, t3, t4, t5] =
  t6 <- add((prioset, t0))
  t7 <- store8((t6, t1))
  t8 <- add((prioidx, t1))
  t9 <- store8((t8, t0))
  t10 <- mul((t2, 2))
  t11 <- add((t10, 1))
  t12 <- primUle((t11, t4))
  if t12
    then b336[t11, t2, t4, t3, t5]
    else b204[t3, t2, t5]
b336 :: [Word, Word, Word, Word, Word] >>= [Unit]
b336[t0, t1, t2, t3, t4] =
  t5 <- add((prioset, t0))
  t6 <- load8((t5))
  t7 <- mul((t1, 2))
  t8 <- add((t7, 2))
  t9 <- primUle((t8, t2))
  if t9
    then b339[t8, t2, t3, t1, t0, t6, t4]
    else b206[t6, t0, t1, t3, t4]

-----------------------------------------
-- not recursive
b225 :: [Word, Word, Word, Word, Word] >>= [Unit]
b225[t0, t1, t2, t3, t4] =
  t5 <- add((prioset, t0))
  t6 <- store8((t5, t1))
  t7 <- add((prioidx, t1))
  t8 <- store8((t7, t0))
  t9 <- mul((t2, 2))
  t10 <- add((t9, 1))
  t11 <- primUle((t10, t4))
  if t11
    then b336[t10, t2, t4, t3, t0]
    else b204[t3, t2, t0]

-----------------------------------------
-- not recursive
b223 :: [Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b223[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUgt((t0, t3))
  if t7
    then b225[t2, t0, t1, t5, t6]
    else b225[t2, t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b222 :: [Word, Word, Word, Word, Word, Word, Word] >>= [Unit]
b222[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUgt((t1, t3))
  if t7
    then b216[t1, t4]
    else b223[t6, t5, t4, t3, t2, t1, t0]

-----------------------------------------
-- not recursive
b350 :: [Word, Word, Word, Word, Word, Word] >>= [Unit]
b350[t0, t1, t2, t3, t4, t5] =
  t6 <- add((prioset, t0))
  t7 <- load8((t6))
  t8 <- primUgt((t2, t5))
  if t8
    then b222[t1, t2, t0, t7, t3, t4, t5]
    else b223[t5, t4, t3, t7, t0, t2, t1]

-----------------------------------------
-- not recursive
b355 :: [Word, Word, Word, Word] >>= [Unit]
b355[t0, t1, t2, t3] =
  t4 <- add((prioset, t0))
  t5 <- load8((t4))
  t6 <- mul((t1, 2))
  t7 <- add((t6, 2))
  t8 <- primUle((t7, t2))
  if t8
    then b350[t7, t2, t3, t1, t0, t5]
    else b218[t5, t0, t1, t3]

-----------------------------------------
-- not recursive
b120 :: [Word, Word, Word] >>= [Unit]
b120[t0, t1, t2] =
  t3 <- add((prioidx, t0))
  t4 <- load8((t3))
  t5 <- add((t2, -2))
  t6 <- and((t5, 255))
  t7 <- mul((t4, 2))
  t8 <- add((t7, 1))
  t9 <- primUle((t8, t6))
  if t9
    then b355[t8, t4, t6, t1]
    else b216[t1, t4]

-----------------------------------------
-- not recursive
entrypoint removePriority :: [Word] >>= [Unit]
removePriority[t0] =
  t1 <- load32((priosetSize))
  t2 <- add((t1, -1))
  t3 <- store32((priosetSize, t2))
  t4 <- and((t2, 255))
  t5 <- add((prioset, t4))
  t6 <- load8((t5))
  t7 <- primNeq((t0, t6))
  if t7
    then b120[t0, t6, t1]
    else b119[]

-----------------------------------------
-- not recursive
b187 :: [] >>= [Word]
b187[] =
  load8((prioset))

-----------------------------------------
-- not recursive
b174 :: [] >>= [Word]
b174[] =
  return -1

-----------------------------------------
-- not recursive
entrypoint highestPriority1 :: [] >>= [Word]
highestPriority1[] =
  t0 <- load32((priosetSize))
  t1 <- primEq((t0, 0))
  if t1
    then b174[]
    else b187[]

-----------------------------------------
-- not recursive
s9 :: Unit
s9 <-
  Unit()

-----------------------------------------
-- not recursive
b235 :: [] >>= [Unit]
b235[] =
  return s9

-----------------------------------------
-- recursive
b285 :: [Word, Word] >>= [Unit]
b285[t0, t1] =
  [] <- noinline(())
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  t5 <- primUlt((t3, 256))
  if t5
    then b285[t4, t3]
    else b235[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store32((priosetSize, 0))
  t1 <- b285[prioset, 0]
  b285[prioidx, 0]

-----------------------------------------
-- Entrypoints: clearPrioset insertPriority removePriority highestPriority1
