bitdata Bool /1
  = False [ B0 ]
    -- predFalse(x :: Bit 1) = x == 0x0
  | True [ B1 ]
    -- predTrue(x :: Bit 1) = x == 0x1

-- bit pattern:
--  _

data Unit
  = Unit

-----------------------------------------
-- not recursive
external blah :: [[] ->> [Unit]] ->> [[] ->> [Bit 32]]

-----------------------------------------
-- not recursive
external get :: [Bool] ->> [[] ->> [Bit 32]]

-----------------------------------------
-- not recursive
True :: Bool
True <-
  True()

-----------------------------------------
-- not recursive
external put :: [Bit 32] ->> [[] ->> [Unit]]

-----------------------------------------
-- not recursive
b77 :: [] >>= [Unit]
b77[] =
  t0 <- get @ True
  t1 <- t0 @ []
  t2 <- put @ t1
  t2 @ []

-----------------------------------------
-- not recursive
k52 :: {} [] ->> [Unit]
k52{} [] = b77[]

-----------------------------------------
-- not recursive
s1 :: [] ->> [Unit]
s1 <-
  k52{}

-----------------------------------------
-- not recursive
k53 :: forall (a :: *). {} [a] ->> [[] ->> [Bit 32]]
k53{} t0 = blah @ s1

-----------------------------------------
-- not recursive
entrypoint stuff :: forall (a :: *). [a] ->> [[] ->> [Bit 32]]
stuff <-
  k53{}

-----------------------------------------
-- Entrypoints: stuff
