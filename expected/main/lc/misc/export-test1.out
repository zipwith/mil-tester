data List1
  = Nil2
  | Cons3 Word List1

data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint LNil :: List1
LNil <-
  Nil2()

-----------------------------------------
-- not recursive
entrypoint LCons :: [Word, List1] >>= [List1]
LCons[t0, t1] =
  Cons3(t0, t1)

-----------------------------------------
-- not recursive
b81 :: [] >>= [Word]
b81[] =
  return 0

-----------------------------------------
-- recursive
b80 :: [List1] >>= [Word]
b80[t0] =
  t1 <- Cons3 0 t0
  t2 <- Cons3 1 t0
  t3 <- b82[t2]
  add((t1, t3))
b82 :: [List1] >>= [Word]
b82[t0] =
  case t0 of
    Nil2 -> b81[]
    Cons3 -> b80[t0]

-----------------------------------------
-- not recursive
entrypoint sum :: [List1] >>= [Word]
sum[t0] =
  b82[t0]

-----------------------------------------
-- not recursive
entrypoint count :: Word
count <- area (Stored Word) aligned 8

-----------------------------------------
-- not recursive
export external val :: Word

-----------------------------------------
-- not recursive
Nil :: List1
Nil <-
  Nil2()

-----------------------------------------
-- not recursive
entrypoint nil :: List1
nil <-
  return Nil

-----------------------------------------
-- not recursive
entrypoint cons :: [Word, List1] >>= [List1]
cons[t0, t1] =
  Cons3(t0, t1)

-----------------------------------------
-- not recursive
entrypoint readRef :: [Word] >>= [Word]
readRef[t0] =
  load32((t0))

-----------------------------------------
-- not recursive
entrypoint writeRef :: [Word, Word] >>= [Unit]
writeRef[t0, t1] =
  store32((t0, t1))

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  store32((count, 7))

-----------------------------------------
-- Entrypoints: LNil LCons sum count val nil cons readRef writeRef
