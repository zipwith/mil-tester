data B
  = F
  | T

data Dup (a :: *)
  = Dup a a

data Either (a :: *) (b :: *)
  = Left a
  | Right b

data Maybe (a :: *)
  = Nothing
  | Just a

data Pair (a :: *) (b :: *)
  = Pair a b

data Rainbow
  = Red
  | Orange
  | Green
  | Blue
  | Indigo
  | Violet

-----------------------------------------
-- not recursive
b96 :: [Word] >>= [Word]
b96[t0] =
  return t0

-----------------------------------------
-- recursive
b95 :: [Word] >>= [Word]
b95[t0] =
  t1 <- add((t0, -1))
  t2 <- b114[t1, 2]
  t3 <- add((t0, -2))
  t4 <- b114[t3, 2]
  add((t2, t4))
b114 :: [Word, Word] >>= [Word]
b114[t0, t1] =
  t2 <- primSlt((t0, t1))
  if t2
    then b96[t0]
    else b95[t0]

-----------------------------------------
-- not recursive
k62 :: {} [Word] ->> [Word]
k62{} t0 = b114[t0, 2]

-----------------------------------------
-- not recursive
entrypoint fib :: [Word] ->> [Word]
fib <-
  k62{}

-----------------------------------------
-- not recursive
k60 :: {Word} [Word] ->> [Word]
k60{t0} t1 = return t0

-----------------------------------------
-- not recursive
k61 :: {} [Word] ->> [[Word] ->> [Word]]
k61{} t0 = k60{t0}

-----------------------------------------
-- not recursive
entrypoint const :: [Word] ->> [[Word] ->> [Word]]
const <-
  k61{}

-----------------------------------------
-- not recursive
b87 :: [Word, Word, Word] >>= [Word]
b87[t0, t1, t2] =
  t3 <- add((t1, t2))
  add((t0, t3))

-----------------------------------------
-- not recursive
k57 :: {Word, Word} [Word] ->> [Word]
k57{t0, t1} t2 = b87[t1, t0, t2]

-----------------------------------------
-- not recursive
k58 :: {Word} [Word] ->> [[Word] ->> [Word]]
k58{t0} t1 = k57{t1, t0}

-----------------------------------------
-- not recursive
k59 :: {} [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
k59{} t0 = k58{t0}

-----------------------------------------
-- not recursive
entrypoint add3 :: [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
add3 <-
  k59{}

-----------------------------------------
-- not recursive
entrypoint wide :: Bit 64
wide <-
  return X0123_4567_89ab_cdef

-----------------------------------------
-- not recursive
T :: B
T <-
  T()

-----------------------------------------
-- not recursive
entrypoint flag :: B
flag <-
  return T

-----------------------------------------
-- not recursive
Green :: Rainbow
Green <-
  Green()

-----------------------------------------
-- not recursive
entrypoint color :: Rainbow
color <-
  return Green

-----------------------------------------
-- not recursive
b84 :: [Dup (Bit 7)] >>= [Dup (Bit 7)]
b84[t0] =
  t1 <- Dup 0 t0
  t2 <- Dup 1 t0
  Dup(t2, t1)

-----------------------------------------
-- not recursive
k56 :: {} [Dup (Bit 7)] ->> [Dup (Bit 7)]
k56{} t0 = b84[t0]

-----------------------------------------
-- not recursive
entrypoint swap :: [Dup (Bit 7)] ->> [Dup (Bit 7)]
swap <-
  k56{}

-----------------------------------------
-- not recursive
s1 :: forall (a :: *). Either a (Bit 6)
s1 <-
  Right(B01_1111)

-----------------------------------------
-- not recursive
s2 :: forall (b :: *). Either (Bit 3) b
s2 <-
  Left(B101)

-----------------------------------------
-- not recursive
entrypoint elf :: Dup (Either (Bit 3) (Bit 6))
elf <-
  Dup(s2, s1)

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
entrypoint no :: Maybe (Ix 3)
no <-
  return Nothing

-----------------------------------------
-- not recursive
entrypoint origin :: Pair (Bit 3) (Bit 4)
origin <-
  Pair(B001, X8)

-----------------------------------------
-- Entrypoints: fib const add3 wide flag color swap elf no origin
