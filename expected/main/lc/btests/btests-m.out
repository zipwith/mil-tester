data B
  = F
  | T

data Dup (a :: *)
  = Dup a a

data Either (a :: *) (b :: *)
  = Left a
  | Right b

data Maybe (a :: *)
  = Nothing
  | Just a

data Pair (a :: *) (b :: *)
  = Pair a b

data Rainbow
  = Red
  | Orange
  | Green
  | Blue
  | Indigo
  | Violet

-----------------------------------------
-- not recursive
b83 :: [Word] >>= [Word]
b83[t0] =
  return t0

-----------------------------------------
-- recursive
b84 :: [Word] >>= [Word]
b84[t0] =
  t1 <- add((t0, -1))
  t2 <- b98[t1]
  t3 <- add((t0, -2))
  t4 <- b98[t3]
  add((t2, t4))
b98 :: [Word] >>= [Word]
b98[t0] =
  t1 <- primSlt((t0, 2))
  if t1
    then b83[t0]
    else b84[t0]

-----------------------------------------
-- not recursive
k54 :: {} [Word] ->> [Word]
k54{} t0 = b98[t0]

-----------------------------------------
-- not recursive
entrypoint fib :: [Word] ->> [Word]
fib <-
  k54{}

-----------------------------------------
-- not recursive
k52 :: {Word} [Word] ->> [Word]
k52{t0} t1 = return t0

-----------------------------------------
-- not recursive
k53 :: {} [Word] ->> [[Word] ->> [Word]]
k53{} t0 = k52{t0}

-----------------------------------------
-- not recursive
entrypoint const :: [Word] ->> [[Word] ->> [Word]]
const <-
  k53{}

-----------------------------------------
-- not recursive
b75 :: [Word, Word, Word] >>= [Word]
b75[t0, t1, t2] =
  t3 <- add((t1, t2))
  add((t0, t3))

-----------------------------------------
-- not recursive
k49 :: {Word, Word} [Word] ->> [Word]
k49{t0, t1} t2 = b75[t1, t0, t2]

-----------------------------------------
-- not recursive
k50 :: {Word} [Word] ->> [[Word] ->> [Word]]
k50{t0} t1 = k49{t1, t0}

-----------------------------------------
-- not recursive
k51 :: {} [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
k51{} t0 = k50{t0}

-----------------------------------------
-- not recursive
entrypoint add3 :: [Word] ->> [[Word] ->> [[Word] ->> [Word]]]
add3 <-
  k51{}

-----------------------------------------
-- not recursive
entrypoint wide :: Bit 64
wide <-
  return X0123_4567_89ab_cdef

-----------------------------------------
-- not recursive
T :: B
T <-
  T()

-----------------------------------------
-- not recursive
entrypoint flag :: B
flag <-
  return T

-----------------------------------------
-- not recursive
Green :: Rainbow
Green <-
  Green()

-----------------------------------------
-- not recursive
entrypoint color :: Rainbow
color <-
  return Green

-----------------------------------------
-- not recursive
b72 :: [Dup (Bit 7)] >>= [Dup (Bit 7)]
b72[t0] =
  t1 <- Dup 0 t0
  t2 <- Dup 1 t0
  Dup(t2, t1)

-----------------------------------------
-- not recursive
k48 :: {} [Dup (Bit 7)] ->> [Dup (Bit 7)]
k48{} t0 = b72[t0]

-----------------------------------------
-- not recursive
entrypoint swap :: [Dup (Bit 7)] ->> [Dup (Bit 7)]
swap <-
  k48{}

-----------------------------------------
-- not recursive
s1 :: forall (a :: *). Either a (Bit 6)
s1 <-
  Right(B01_1111)

-----------------------------------------
-- not recursive
s2 :: forall (b :: *). Either (Bit 3) b
s2 <-
  Left(B101)

-----------------------------------------
-- not recursive
entrypoint elf :: Dup (Either (Bit 3) (Bit 6))
elf <-
  Dup(s2, s1)

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
entrypoint no :: Maybe (Ix 3)
no <-
  return Nothing

-----------------------------------------
-- not recursive
entrypoint origin :: Pair (Bit 3) (Bit 4)
origin <-
  Pair(B001, X8)

-----------------------------------------
-- Entrypoints: fib const add3 wide flag color swap elf no origin
