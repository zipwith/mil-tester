data B
  = F
  | T

data Dup3
  = Dup5 Either2 Either2

data Either2
  = Left3 Word
  | Right4 Word

data Maybe1
  = Nothing1
  | Just2 Word

data Pair0
  = Pair0 Word Word

data Rainbow
  = Red
  | Orange
  | Green
  | Blue
  | Indigo
  | Violet

-----------------------------------------
-- not recursive
entrypoint origin :: Pair0
origin <-
  Pair0(1, 8)

-----------------------------------------
-- not recursive
Nothing :: Maybe1
Nothing <-
  Nothing1()

-----------------------------------------
-- not recursive
entrypoint no :: Maybe1
no <-
  return Nothing

-----------------------------------------
-- not recursive
s1 :: Either2
s1 <-
  Right4(31)

-----------------------------------------
-- not recursive
s2 :: Either2
s2 <-
  Left3(5)

-----------------------------------------
-- not recursive
entrypoint elf :: Dup3
elf <-
  Dup5(s2, s1)

-----------------------------------------
-- not recursive
entrypoint swap :: [Pair0] >>= [Pair0]
swap[t0] =
  t1 <- Pair0 0 t0
  t2 <- Pair0 1 t0
  Pair0(t2, t1)

-----------------------------------------
-- not recursive
Green :: Rainbow
Green <-
  Green()

-----------------------------------------
-- not recursive
entrypoint color :: Rainbow
color <-
  return Green

-----------------------------------------
-- not recursive
T :: B
T <-
  T()

-----------------------------------------
-- not recursive
entrypoint flag :: B
flag <-
  return T

-----------------------------------------
-- not recursive
entrypoint wide :: Word
entrypoint wide1 :: Word
[wide,wide1] <-
  return [-1985229329, 19088743]

-----------------------------------------
-- not recursive
entrypoint add3 :: [Word, Word, Word] >>= [Word]
add3[t0, t1, t2] =
  t3 <- add((t1, t2))
  add((t0, t3))

-----------------------------------------
-- not recursive
entrypoint const :: [Word, Word] >>= [Word]
const[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
b70 :: [Word] >>= [Word]
b70[t0] =
  return t0

-----------------------------------------
-- recursive
b71 :: [Word] >>= [Word]
b71[t0] =
  t1 <- add((t0, -1))
  t2 <- fib[t1]
  t3 <- add((t0, -2))
  t4 <- fib[t3]
  add((t2, t4))
entrypoint fib :: [Word] >>= [Word]
fib[t0] =
  t1 <- primSlt((t0, 2))
  if t1
    then b70[t0]
    else b71[t0]

-----------------------------------------
-- Entrypoints: origin no elf swap color flag [wide,wide1] add3 const fib
