data B
  = F
  | T

data Dup3
  = Dup5 Either2 Either2

data Dup4
  = Dup6 (Bit 32) (Bit 32)

data Either2
  = Left3 (Bit 32)
  | Right4 (Bit 32)

data Maybe1
  = Nothing1
  | Just2 (Bit 32)

data Rainbow
  = Red
  | Orange
  | Green
  | Blue
  | Indigo
  | Violet

-----------------------------------------
-- not recursive
entrypoint origin :: Dup4
origin <-
  Dup6(1, 8)

-----------------------------------------
-- not recursive
Nothing :: Maybe1
Nothing <-
  Nothing1()

-----------------------------------------
-- not recursive
entrypoint no :: Maybe1
no <-
  return Nothing

-----------------------------------------
-- not recursive
s1 :: Either2
s1 <-
  Right4(31)

-----------------------------------------
-- not recursive
s2 :: Either2
s2 <-
  Left3(5)

-----------------------------------------
-- not recursive
entrypoint elf :: Dup3
elf <-
  Dup5(s2, s1)

-----------------------------------------
-- not recursive
entrypoint swap :: [Dup4] >>= [Dup4]
swap[t0] =
  t1 <- Dup6 0 t0
  t2 <- Dup6 1 t0
  Dup6(t2, t1)

-----------------------------------------
-- not recursive
Green :: Rainbow
Green <-
  Green()

-----------------------------------------
-- not recursive
entrypoint color :: Rainbow
color <-
  return Green

-----------------------------------------
-- not recursive
T :: B
T <-
  T()

-----------------------------------------
-- not recursive
entrypoint flag :: B
flag <-
  return T

-----------------------------------------
-- not recursive
entrypoint wide :: Bit 32
entrypoint wide1 :: Bit 32
[wide,wide1] <-
  return [-1985229329, 19088743]

-----------------------------------------
-- not recursive
entrypoint add3 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
add3[t0, t1, t2] =
  t3 <- add((t1, t2))
  add((t0, t3))

-----------------------------------------
-- not recursive
entrypoint const :: [Bit 32, Bit 32] >>= [Bit 32]
const[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
b96 :: [Bit 32] >>= [Bit 32]
b96[t0] =
  return t0

-----------------------------------------
-- recursive
b95 :: [Bit 32] >>= [Bit 32]
b95[t0] =
  t1 <- add((t0, -1))
  t2 <- b114[t1, 2]
  t3 <- add((t0, -2))
  t4 <- b114[t3, 2]
  add((t2, t4))
b114 :: [Bit 32, Bit 32] >>= [Bit 32]
b114[t0, t1] =
  t2 <- primSlt((t0, t1))
  if t2
    then b96[t0]
    else b95[t0]

-----------------------------------------
-- not recursive
entrypoint fib :: [Bit 32] >>= [Bit 32]
fib[t0] =
  b114[t0, 2]

-----------------------------------------
-- Entrypoints: origin no elf swap color flag [wide,wide1] add3 const fib
