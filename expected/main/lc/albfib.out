data Unit
  = Unit

-----------------------------------------
-- not recursive
b478 :: [] >>= [Bit 32]
b478[] =
  return 1

-----------------------------------------
-- recursive
b396 :: [Bit 32] >>= [Bit 32]
b396[t0] =
  t1 <- primEq((t0, 1))
  if t1
    then b478[]
    else b397[t0]
b397 :: [Bit 32] >>= [Bit 32]
b397[t0] =
  t1 <- add((t0, -1))
  t2 <- b395[t1]
  t3 <- add((t0, -2))
  t4 <- b395[t3]
  add((t2, t4))
b395 :: [Bit 32] >>= [Bit 32]
b395[t0] =
  t1 <- primEq((t0, 0))
  if t1
    then b478[]
    else b396[t0]

-----------------------------------------
-- not recursive
b333 :: [] >>= [Bit 32]
b333[] =
  return 0

-----------------------------------------
-- recursive
b505 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b505[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b500[t2, t0]
    else b507[t0, t1, t2]
b507 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b507[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b509[t1, t0, t2]
    else b500[t2, t0]
b509 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b509[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b504[t3, t0, t2]
b503 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b503[t0, t1, t2] =
  t3 <- mul((t2, 10))
  b504[t3, t1, t0]
b504 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b504[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b505[t0, t1, t2]
    else b500[t2, t0]
b501 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b501[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b503[t2, t1, t0]
    else b500[t2, t0]
b499 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b499[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b500[t2, t1]
    else b501[t1, t0, t2]
b498 :: [Bit 32, Bit 32] >>= [Bit 32]
b498[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b499[t1, 1, t0]
    else b500[t0, 1]
b500 :: [Bit 32, Bit 32] >>= [Bit 32]
b500[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b497[t3]
  add((t1, t4))
b497 :: [Bit 32] >>= [Bit 32]
b497[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b333[]
    else b498[t0, 10000000]

-----------------------------------------
-- not recursive
Proxy$f8s :: Unit
Proxy$f8s <-
  Unit()

-----------------------------------------
-- not recursive
b476 :: [Bit 32] >>= [Unit]
b476[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$f8s

-----------------------------------------
-- recursive
b440 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b440[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b500[t2, t0]
    else b515[t0, t1, t2]
b515 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b515[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b445[t1, t0, t2]
    else b500[t2, t0]
b445 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b445[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b439[t3, t0, t2]
b439 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b439[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b440[t0, t1, t2]
    else b500[t2, t0]

-----------------------------------------
-- recursive
b546 :: [Bit 32, Bit 32] >>= [Unit]
b546[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b497[t3]
  t5 <- add((t1, t4))
  b537[t5, t0]
b537 :: [Bit 32, Bit 32] >>= [Unit]
b537[t0, t1] =
  t2 <- b475[t0]
  t3 <- rem((t1, 10))
  b475[t3]
b475 :: [Bit 32] >>= [Unit]
b475[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b476[t0]
    else b535[t0]
b535 :: [Bit 32] >>= [Unit]
b535[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b537[0, t0]
    else b544[t0, 10000000]
b544 :: [Bit 32, Bit 32] >>= [Unit]
b544[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b545[t1, 1, t0]
    else b546[t0, 1]
b545 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b545[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b546[t2, t1]
    else b564[t1, t0, t2]
b564 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b564[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b566[t2, t1, t0]
    else b546[t2, t0]
b566 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b566[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b504[t3, t1, t0]
  t5 <- b349[t4]
  t6 <- rem((t0, 10))
  b475[t6]
b563 :: [Bit 32] >>= [Unit]
b563[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b537[0, t0]
    else b565[t0, 10000000]
b565 :: [Bit 32, Bit 32] >>= [Unit]
b565[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b567[t1, 1, t0]
    else b546[t0, 1]
b567 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b567[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b546[t2, t1]
    else b569[t1, t0, t2]
b569 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b569[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b570[t2, t1, t0]
    else b546[t2, t0]
b570 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b570[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b439[t3, t1, t0]
  t5 <- b349[t4]
  t6 <- rem((t0, 10))
  b475[t6]
b349 :: [Bit 32] >>= [Unit]
b349[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b476[t0]
    else b563[t0]

-----------------------------------------
-- not recursive
b327 :: [] >>= [Bit 32]
b327[] =
  t0 <- b395[14]
  t1 <- b395[13]
  t2 <- add((t0, t1))
  t3 <- b349[t2]
  b396[15]

-----------------------------------------
-- not recursive
main :: [] >>= [Bit 32]
main[] =
  b327[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Bit 32]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b395(i32 %r0) {
  br label %b395

b395:
  %r1 = icmp eq i32 %r0, 0
  br i1 %r1, label %b478, label %b396

b478:
  ret i32 1

b396:
  %r2 = icmp eq i32 %r0, 1
  br i1 %r2, label %b478, label %b397

b397:
  %r7 = add i32 %r0, -1
  %r4 = call i32 @func_b395(i32 %r7)
  %r6 = add i32 %r0, -2
  %r5 = call i32 @func_b395(i32 %r6)
  %r3 = add i32 %r4, %r5
  ret i32 %r3
}

define internal i32 @func_b504(i32 %r0, i32 %r1, i32 %r2) {
  br label %b504

b504:
  %r6 = phi i32 [%r0, %0], [%r8, %b509]
  %r7 = phi i32 [%r1, %0], [%r7, %b509]
  %r4 = phi i32 [%r2, %0], [%r4, %b509]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b505, label %b500

b505:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b500, label %b507

b500:
  %r14 = phi i32 [%r4, %b504], [%r4, %b505], [%r4, %b507]
  %r11 = phi i32 [%r6, %b504], [%r6, %b505], [%r6, %b507]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b497(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b507:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b509, label %b500

b509:
  %r8 = mul i32 %r6, 10
  br label %b504
}

define internal i32 @func_b497(i32 %r0) {
  br label %b497

b497:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b333, label %b498

b333:
  ret i32 0

b498:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b499, label %b500

b499:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b500, label %b501

b500:
  %r8 = phi i32 [%r0, %b498], [%r0, %b499], [%r0, %b501], [%r11, %b504], [%r11, %b505], [%r11, %b507]
  %r5 = phi i32 [1, %b498], [1, %b499], [1, %b501], [%r10, %b504], [%r10, %b505], [%r10, %b507]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b497(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b501:
  %r12 = icmp ule i32 1, 10000000
  br i1 %r12, label %b503, label %b500

b503:
  %r13 = mul i32 1, 10
  br label %b504

b504:
  %r10 = phi i32 [%r13, %b503], [%r17, %b509]
  %r16 = phi i32 [10000000, %b503], [%r16, %b509]
  %r11 = phi i32 [%r0, %b503], [%r11, %b509]
  %r15 = mul i32 %r10, 100
  %r14 = icmp uge i32 %r11, %r15
  br i1 %r14, label %b505, label %b500

b505:
  %r18 = icmp eq i32 %r10, %r16
  br i1 %r18, label %b500, label %b507

b507:
  %r19 = icmp ule i32 %r10, %r16
  br i1 %r19, label %b509, label %b500

b509:
  %r17 = mul i32 %r10, 10
  br label %b504
}

define internal i32 @func_b439(i32 %r0, i32 %r1, i32 %r2) {
  br label %b439

b439:
  %r6 = phi i32 [%r0, %0], [%r8, %b445]
  %r7 = phi i32 [%r1, %0], [%r7, %b445]
  %r4 = phi i32 [%r2, %0], [%r4, %b445]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b440, label %b500

b440:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b500, label %b515

b500:
  %r14 = phi i32 [%r4, %b439], [%r4, %b440], [%r4, %b515]
  %r11 = phi i32 [%r6, %b439], [%r6, %b440], [%r6, %b515]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b497(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b515:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b445, label %b500

b445:
  %r8 = mul i32 %r6, 10
  br label %b439
}

declare i32 @putchar(i32)

define internal void @func_b475(i32 %r0) {
  br label %b475

b475:
  %r2 = phi i32 [%r0, %0], [%r4, %b537], [%r3, %b566]
  %r1 = icmp ult i32 %r2, 10
  br i1 %r1, label %b476, label %b535

b476:
  %r6 = add i32 %r2, 48
  %r5 = call i32 @putchar(i32 %r6)
  ret void

b535:
  %r7 = icmp ult i32 %r2, 10
  br i1 %r7, label %b537, label %b544

b537:
  %r9 = phi i32 [0, %b535], [%r11, %b546]
  %r8 = phi i32 [%r2, %b535], [%r10, %b546]
  call void @func_b475(i32 %r9)
  %r4 = srem i32 %r8, 10
  br label %b475

b544:
  %r12 = icmp uge i32 %r2, 100
  br i1 %r12, label %b545, label %b546

b545:
  %r13 = icmp eq i32 1, 10000000
  br i1 %r13, label %b546, label %b564

b546:
  %r10 = phi i32 [%r2, %b544], [%r2, %b545], [%r2, %b564]
  %r14 = phi i32 [1, %b544], [1, %b545], [1, %b564]
  %r17 = mul i32 %r14, 10
  %r16 = sub i32 %r10, %r17
  %r15 = call i32 @func_b497(i32 %r16)
  %r11 = add i32 %r14, %r15
  br label %b537

b564:
  %r18 = icmp ule i32 1, 10000000
  br i1 %r18, label %b566, label %b546

b566:
  %r20 = mul i32 1, 10
  %r19 = call i32 @func_b504(i32 %r20, i32 10000000, i32 %r2)
  call void @func_b349(i32 %r19)
  %r3 = srem i32 %r2, 10
  br label %b475
}

define internal void @func_b349(i32 %r0) {
  br label %b349

b349:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b476, label %b563

b476:
  %r4 = phi i32 [%r0, %b349], [%r5, %b475]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b563:
  %r6 = icmp ult i32 %r0, 10
  br i1 %r6, label %b537, label %b565

b537:
  %r9 = phi i32 [0, %b563], [%r11, %b546], [0, %b535]
  %r8 = phi i32 [%r0, %b563], [%r10, %b546], [%r5, %b535]
  call void @func_b475(i32 %r9)
  %r7 = srem i32 %r8, 10
  br label %b475

b565:
  %r12 = icmp uge i32 %r0, 100
  br i1 %r12, label %b567, label %b546

b475:
  %r5 = phi i32 [%r7, %b537], [%r15, %b570], [%r14, %b566]
  %r13 = icmp ult i32 %r5, 10
  br i1 %r13, label %b476, label %b535

b567:
  %r16 = icmp eq i32 1, 10000000
  br i1 %r16, label %b546, label %b569

b546:
  %r10 = phi i32 [%r0, %b565], [%r0, %b567], [%r0, %b569], [%r5, %b544], [%r5, %b545], [%r5, %b564]
  %r17 = phi i32 [1, %b565], [1, %b567], [1, %b569], [1, %b544], [1, %b545], [1, %b564]
  %r20 = mul i32 %r17, 10
  %r19 = sub i32 %r10, %r20
  %r18 = call i32 @func_b497(i32 %r19)
  %r11 = add i32 %r17, %r18
  br label %b537

b535:
  %r21 = icmp ult i32 %r5, 10
  br i1 %r21, label %b537, label %b544

b569:
  %r22 = icmp ule i32 1, 10000000
  br i1 %r22, label %b570, label %b546

b544:
  %r23 = icmp uge i32 %r5, 100
  br i1 %r23, label %b545, label %b546

b570:
  %r25 = mul i32 1, 10
  %r24 = call i32 @func_b439(i32 %r25, i32 10000000, i32 %r0)
  call void @func_b349(i32 %r24)
  %r15 = srem i32 %r0, 10
  br label %b475

b545:
  %r26 = icmp eq i32 1, 10000000
  br i1 %r26, label %b546, label %b564

b564:
  %r27 = icmp ule i32 1, 10000000
  br i1 %r27, label %b566, label %b546

b566:
  %r29 = mul i32 1, 10
  %r28 = call i32 @func_b504(i32 %r29, i32 10000000, i32 %r5)
  call void @func_b349(i32 %r28)
  %r14 = srem i32 %r5, 10
  br label %b475
}

define i32 @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b327

b327:
  %r1 = call i32 @func_b395(i32 14)
  %r2 = call i32 @func_b395(i32 13)
  %r0 = add i32 %r1, %r2
  call void @func_b349(i32 %r0)
  br label %b396

b396:
  %r3 = icmp eq i32 15, 1
  br i1 %r3, label %b478, label %b397

b478:
  ret i32 1

b397:
  %r8 = add i32 15, -1
  %r5 = call i32 @func_b395(i32 %r8)
  %r7 = add i32 15, -2
  %r6 = call i32 @func_b395(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4
}

