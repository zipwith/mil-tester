-----------------------------------------
-- not recursive
b90 :: [Bit 32] >>= [Bit 32]
b90[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b87 :: [Bit 32, Bit 32] >>= [Bit 32]
b87[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b91[t0, t3]
  b91[t2, t4]
b89 :: [Bit 32, Bit 32] >>= [Bit 32]
b89[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b88[t0]
    else b87[t0, t1]
b88 :: [Bit 32] >>= [Bit 32]
b88[t0] =
  t1 <- add((t0, -1))
  b91[t1, 1]
b91 :: [Bit 32, Bit 32] >>= [Bit 32]
b91[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b90[t1]
    else b89[t0, t1]

-----------------------------------------
-- not recursive
entrypoint acker :: [Bit 32, Bit 32] >>= [Bit 32]
acker[t0, t1] =
  b91[t0, t1]

-----------------------------------------
-- not recursive
b136 :: [] >>= [Bit 32]
b136[] =
  return 2

-----------------------------------------
-- recursive
b123 :: [Bit 32, Bit 32] >>= [Bit 32]
b123[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b127[t0, t3]
  b127[t2, t4]
b125 :: [Bit 32, Bit 32] >>= [Bit 32]
b125[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b124[t0]
    else b123[t0, t1]
b124 :: [Bit 32] >>= [Bit 32]
b124[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b136[]
    else b141[t1]
b141 :: [Bit 32] >>= [Bit 32]
b141[t0] =
  t1 <- add((t0, -1))
  t2 <- b127[t0, 0]
  b127[t1, t2]
b127 :: [Bit 32, Bit 32] >>= [Bit 32]
b127[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b90[t1]
    else b125[t0, t1]

-----------------------------------------
-- not recursive
entrypoint ackerI :: [Bit 32, Bit 32] >>= [Bit 32]
ackerI[t0, t1] =
  b127[t0, t1]

-----------------------------------------
-- Entrypoints: acker ackerI
