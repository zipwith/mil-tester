-----------------------------------------
-- not recursive
b91 :: [Bit 32] >>= [Bit 32]
b91[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b88 :: [Bit 32, Bit 32] >>= [Bit 32]
b88[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b92[t0, t3]
  b92[t2, t4]
b90 :: [Bit 32, Bit 32] >>= [Bit 32]
b90[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b89[t0]
    else b88[t0, t1]
b89 :: [Bit 32] >>= [Bit 32]
b89[t0] =
  t1 <- add((t0, -1))
  b92[t1, 1]
b92 :: [Bit 32, Bit 32] >>= [Bit 32]
b92[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b91[t1]
    else b90[t0, t1]

-----------------------------------------
-- not recursive
entrypoint acker :: [Bit 32, Bit 32] >>= [Bit 32]
acker[t0, t1] =
  b92[t0, t1]

-----------------------------------------
-- not recursive
b137 :: [] >>= [Bit 32]
b137[] =
  return 2

-----------------------------------------
-- recursive
b124 :: [Bit 32, Bit 32] >>= [Bit 32]
b124[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b128[t0, t3]
  b128[t2, t4]
b126 :: [Bit 32, Bit 32] >>= [Bit 32]
b126[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b125[t0]
    else b124[t0, t1]
b125 :: [Bit 32] >>= [Bit 32]
b125[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b137[]
    else b142[t1]
b142 :: [Bit 32] >>= [Bit 32]
b142[t0] =
  t1 <- add((t0, -1))
  t2 <- b128[t0, 0]
  b128[t1, t2]
b128 :: [Bit 32, Bit 32] >>= [Bit 32]
b128[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b91[t1]
    else b126[t0, t1]

-----------------------------------------
-- not recursive
entrypoint ackerI :: [Bit 32, Bit 32] >>= [Bit 32]
ackerI[t0, t1] =
  b128[t0, t1]

-----------------------------------------
-- Entrypoints: acker ackerI
