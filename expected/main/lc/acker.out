-----------------------------------------
-- not recursive
b100 :: [Bit 32] >>= [Bit 32]
b100[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b97 :: [Bit 32, Bit 32] >>= [Bit 32]
b97[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b101[t0, t3]
  b101[t2, t4]
b99 :: [Bit 32, Bit 32] >>= [Bit 32]
b99[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b98[t0]
    else b97[t0, t1]
b98 :: [Bit 32] >>= [Bit 32]
b98[t0] =
  t1 <- add((t0, -1))
  b101[t1, 1]
b101 :: [Bit 32, Bit 32] >>= [Bit 32]
b101[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b100[t1]
    else b99[t0, t1]

-----------------------------------------
-- not recursive
entrypoint acker :: [Bit 32, Bit 32] >>= [Bit 32]
acker[t0, t1] =
  b101[t0, t1]

-----------------------------------------
-- not recursive
b146 :: [] >>= [Bit 32]
b146[] =
  return 2

-----------------------------------------
-- recursive
b133 :: [Bit 32, Bit 32] >>= [Bit 32]
b133[t0, t1] =
  t2 <- add((t0, -1))
  t3 <- add((t1, -1))
  t4 <- b137[t0, t3]
  b137[t2, t4]
b135 :: [Bit 32, Bit 32] >>= [Bit 32]
b135[t0, t1] =
  t2 <- primEq((t1, 0))
  if t2
    then b134[t0]
    else b133[t0, t1]
b134 :: [Bit 32] >>= [Bit 32]
b134[t0] =
  t1 <- add((t0, -1))
  t2 <- primEq((t1, 0))
  if t2
    then b146[]
    else b151[t1]
b151 :: [Bit 32] >>= [Bit 32]
b151[t0] =
  t1 <- add((t0, -1))
  t2 <- b137[t0, 0]
  b137[t1, t2]
b137 :: [Bit 32, Bit 32] >>= [Bit 32]
b137[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b100[t1]
    else b135[t0, t1]

-----------------------------------------
-- not recursive
entrypoint ackerI :: [Bit 32, Bit 32] >>= [Bit 32]
ackerI[t0, t1] =
  b137[t0, t1]

-----------------------------------------
-- Entrypoints: acker ackerI
