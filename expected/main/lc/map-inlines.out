data List0
  = Nil0
  | Cons1 (Bit 32) List0

-----------------------------------------
-- not recursive
Nil :: List0
Nil <-
  Nil0()

-----------------------------------------
-- not recursive
b79 :: [] >>= [List0]
b79[] =
  return Nil

-----------------------------------------
-- recursive
b103 :: [List0, Bit 32] >>= [List0]
b103[t0, t1] =
  t2 <- Cons1 0 t0
  t3 <- Cons1 1 t0
  t4 <- add((t1, t2))
  t5 <- b102[t3, t1]
  Cons1(t4, t5)
b102 :: [List0, Bit 32] >>= [List0]
b102[t0, t1] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b103[t0, t1]

-----------------------------------------
-- not recursive
entrypoint mapsucc :: [List0] >>= [List0]
mapsucc[t0] =
  b102[t0, 1]

-----------------------------------------
-- recursive
b105 :: [List0, Bit 32] >>= [List0]
b105[t0, t1] =
  t2 <- Cons1 0 t0
  t3 <- Cons1 1 t0
  t4 <- mul((t1, t2))
  t5 <- b104[t3, t1]
  Cons1(t4, t5)
b104 :: [List0, Bit 32] >>= [List0]
b104[t0, t1] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b105[t0, t1]

-----------------------------------------
-- not recursive
entrypoint mapdouble :: [List0] >>= [List0]
mapdouble[t0] =
  b104[t0, 2]

-----------------------------------------
-- recursive
b107 :: forall (a :: *). [List0, [Bit 32] ->> [a], [a] ->> [Bit 32]] >>= [List0]
b107[t0, t1, t2] =
  t3 <- Cons1 0 t0
  t4 <- Cons1 1 t0
  t5 <- t1 @ t3
  t6 <- t2 @ t5
  t7 <- b106[t4, t1, t2]
  Cons1(t6, t7)
b106 :: forall (a :: *). [List0, [Bit 32] ->> [a], [a] ->> [Bit 32]] >>= [List0]
b106[t0, t1, t2] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b107[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint mapcomp :: [[Bit 32] ->> [Bit 32], [Bit 32] ->> [Bit 32], List0] >>= [List0]
mapcomp[t0, t1, t2] =
  b106[t2, t1, t0]

-----------------------------------------
-- recursive
b109 :: [List0, Bit 32, Bit 32] >>= [List0]
b109[t0, t1, t2] =
  t3 <- Cons1 0 t0
  t4 <- Cons1 1 t0
  t5 <- mul((t1, t3))
  t6 <- add((t2, t5))
  t7 <- b108[t4, t1, t2]
  Cons1(t6, t7)
b108 :: [List0, Bit 32, Bit 32] >>= [List0]
b108[t0, t1, t2] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b109[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint maptoodd :: [List0] >>= [List0]
maptoodd[t0] =
  b108[t0, 2, 1]

-----------------------------------------
-- Entrypoints: mapsucc mapdouble mapcomp maptoodd
