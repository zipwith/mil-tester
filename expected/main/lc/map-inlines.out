data List0
  = Nil0
  | Cons1 Word List0

-----------------------------------------
-- not recursive
Nil :: List0
Nil <-
  Nil0()

-----------------------------------------
-- not recursive
b79 :: [] >>= [List0]
b79[] =
  return Nil

-----------------------------------------
-- recursive
b105 :: [List0] >>= [List0]
b105[t0] =
  t1 <- Cons1 0 t0
  t2 <- Cons1 1 t0
  t3 <- add((t1, 1))
  t4 <- mapsucc[t2]
  Cons1(t3, t4)
entrypoint mapsucc :: [List0] >>= [List0]
mapsucc[t0] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b105[t0]

-----------------------------------------
-- recursive
b107 :: [List0] >>= [List0]
b107[t0] =
  t1 <- Cons1 0 t0
  t2 <- Cons1 1 t0
  t3 <- mul((t1, 2))
  t4 <- mapdouble[t2]
  Cons1(t3, t4)
entrypoint mapdouble :: [List0] >>= [List0]
mapdouble[t0] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b107[t0]

-----------------------------------------
-- recursive
b108 :: forall (a :: *). [List0, [Word] ->> [a], [a] ->> [Word]] >>= [List0]
b108[t0, t1, t2] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b109[t0, t1, t2]
b109 :: forall (a :: *). [List0, [Word] ->> [a], [a] ->> [Word]] >>= [List0]
b109[t0, t1, t2] =
  t3 <- Cons1 0 t0
  t4 <- Cons1 1 t0
  t5 <- t1 @ t3
  t6 <- t2 @ t5
  t7 <- b108[t4, t1, t2]
  Cons1(t6, t7)

-----------------------------------------
-- not recursive
entrypoint mapcomp :: [[Word] ->> [Word], [Word] ->> [Word], List0] >>= [List0]
mapcomp[t0, t1, t2] =
  case t2 of
    Nil0 -> b79[]
    Cons1 -> b109[t2, t1, t0]

-----------------------------------------
-- recursive
b111 :: [List0] >>= [List0]
b111[t0] =
  t1 <- Cons1 0 t0
  t2 <- Cons1 1 t0
  t3 <- mul((t1, 2))
  t4 <- add((t3, 1))
  t5 <- maptoodd[t2]
  Cons1(t4, t5)
entrypoint maptoodd :: [List0] >>= [List0]
maptoodd[t0] =
  case t0 of
    Nil0 -> b79[]
    Cons1 -> b111[t0]

-----------------------------------------
-- Entrypoints: mapsucc mapdouble mapcomp maptoodd
