data Unit
  = Unit

-----------------------------------------
-- not recursive
b998 :: [] >>= [Word]
b998[] =
  return 0

-----------------------------------------
-- recursive
b1600 :: [Word, Word, Word] >>= [Word]
b1600[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1599[t2, t1, t0]
    else b1423[t2, t0]
b1599 :: [Word, Word, Word] >>= [Word]
b1599[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b1596[t3, t1, t0]
    else b1423[t0, t3]
b1596 :: [Word, Word, Word] >>= [Word]
b1596[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1423[t2, t0]
    else b1600[t0, t1, t2]
b1429 :: [Word, Word, Word] >>= [Word]
b1429[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b1596[t3, t0, t2]
    else b1423[t2, t3]
b1428 :: [Word, Word, Word] >>= [Word]
b1428[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1429[t1, t0, t2]
    else b1423[t2, t0]
b1426 :: [Word, Word, Word] >>= [Word]
b1426[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1423[t2, t0]
    else b1428[t0, t1, t2]
b1425 :: [Word, Word, Word] >>= [Word]
b1425[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b1426[t3, t1, t0]
    else b1423[t0, t3]
b1424 :: [Word, Word, Word] >>= [Word]
b1424[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1425[t2, t1, t0]
    else b1423[t2, t0]
b1422 :: [Word, Word, Word] >>= [Word]
b1422[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1423[t2, t0]
    else b1424[t0, t1, t2]
b1421 :: [Word, Word] >>= [Word]
b1421[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b1422[1, t1, t0]
    else b1423[t0, 1]
b1423 :: [Word, Word] >>= [Word]
b1423[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b1420[t3]
  add((t1, t4))
b1420 :: [Word] >>= [Word]
b1420[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b998[]
    else b1421[t0, 10000000]

-----------------------------------------
-- not recursive
Proxy$je5 :: Unit
Proxy$je5 <-
  Unit()

-----------------------------------------
-- not recursive
b1315 :: [Word] >>= [Unit]
b1315[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$je5

-----------------------------------------
-- recursive
b1454 :: [Word] >>= [Unit]
b1454[t0] =
  t1 <- b1459[0]
  t2 <- rem((t0, 10))
  t3 <- primUlt((t2, 10))
  if t3
    then b1315[t2]
    else b1475[t2]
b1459 :: [Word] >>= [Unit]
b1459[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b1315[t0]
    else b1475[t0]
b2109 :: [Word, Word, Word] >>= [Unit]
b2109[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b2111[t2, t1, t0]
    else b1727[t2, t0]
b2111 :: [Word, Word, Word] >>= [Unit]
b2111[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b2106[t3, t1, t0]
    else b1727[t0, t3]
b2106 :: [Word, Word, Word] >>= [Unit]
b2106[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1727[t2, t0]
    else b2109[t0, t1, t2]
b2102 :: [Word, Word, Word] >>= [Unit]
b2102[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b2104[t1, t0, t2]
    else b2101[t0, t2]
b2104 :: [Word, Word, Word] >>= [Unit]
b2104[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b2106[t3, t0, t2]
    else b1727[t2, t3]
b2113 :: [Word, Word, Word] >>= [Unit]
b2113[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b2114[t2, t1, t0]
    else b1727[t2, t0]
b2114 :: [Word, Word, Word] >>= [Unit]
b2114[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b2112[t3, t1, t0]
    else b1727[t0, t3]
b2112 :: [Word, Word, Word] >>= [Unit]
b2112[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1727[t2, t0]
    else b2113[t0, t1, t2]
b2110 :: [Word, Word, Word] >>= [Unit]
b2110[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b2112[t3, t0, t2]
    else b1727[t2, t3]
b2108 :: [Word, Word, Word] >>= [Unit]
b2108[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b2110[t1, t0, t2]
    else b1727[t2, t0]
b2103 :: [Word, Word, Word] >>= [Unit]
b2103[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1727[t2, t0]
    else b2108[t0, t1, t2]
b2100 :: [Word, Word, Word] >>= [Unit]
b2100[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b2103[t3, t1, t0]
    else b1727[t0, t3]
b2068 :: [Word, Word, Word] >>= [Unit]
b2068[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b2100[t2, t1, t0]
    else b1727[t2, t0]
b1915 :: [Word, Word, Word] >>= [Unit]
b1915[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1727[t2, t0]
    else b2068[t0, t1, t2]
b1845 :: [Word, Word] >>= [Unit]
b1845[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b1915[1, t1, t0]
    else b1727[t0, 1]
b1727 :: [Word, Word] >>= [Unit]
b1727[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b1420[t3]
  t5 <- add((t1, t4))
  t6 <- b1459[t5]
  t7 <- rem((t0, 10))
  t8 <- primUlt((t7, 10))
  if t8
    then b1315[t7]
    else b1475[t7]
b1743 :: [Word] >>= [Unit]
b1743[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b1731[0, t0]
    else b1845[t0, 10000000]
b1731 :: [Word, Word] >>= [Unit]
b1731[t0, t1] =
  t2 <- b1459[t0]
  t3 <- rem((t1, 10))
  t4 <- primUlt((t3, 10))
  if t4
    then b1315[t3]
    else b1475[t3]
b1475 :: [Word] >>= [Unit]
b1475[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b1454[t0]
    else b1605[t0, 10000000]
b1605 :: [Word, Word] >>= [Unit]
b1605[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b1726[1, t1, t0]
    else b1727[t0, 1]
b1726 :: [Word, Word, Word] >>= [Unit]
b1726[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1727[t2, t0]
    else b1844[t0, t1, t2]
b1844 :: [Word, Word, Word] >>= [Unit]
b1844[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1917[t2, t1, t0]
    else b1727[t2, t0]
b1917 :: [Word, Word, Word] >>= [Unit]
b1917[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b2069[t3, t1, t0]
    else b1727[t0, t3]
b2069 :: [Word, Word, Word] >>= [Unit]
b2069[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b2101[t0, t2]
    else b2102[t0, t1, t2]
b2101 :: [Word, Word] >>= [Unit]
b2101[t0, t1] =
  t2 <- mul((t0, 10))
  t3 <- sub((t1, t2))
  t4 <- b1420[t3]
  t5 <- add((t0, t4))
  t6 <- b1094[t5]
  t7 <- rem((t1, 10))
  t8 <- primUlt((t7, 10))
  if t8
    then b1315[t7]
    else b1475[t7]
b1094 :: [Word] >>= [Unit]
b1094[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b1315[t0]
    else b1743[t0]

-----------------------------------------
-- not recursive
b911 :: [] >>= [Unit]
b911[] =
  t0 <- b1094[3]
  t1 <- b1094[7]
  t2 <- b1094[7]
  t3 <- putchar((53))
  return Proxy$je5

-----------------------------------------
-- not recursive
main :: [] >>= [Unit]
main[] =
  b911[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b1420(i32 %r0) {
  br label %b1420

b1420:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b998, label %b1421

b998:
  ret i32 0

b1421:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b1422, label %b1423

b1422:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b1423, label %b1424

b1423:
  %r8 = phi i32 [%r0, %b1421], [%r0, %b1422], [%r0, %b1424], [%r0, %b1425], [%r0, %b1426], [%r0, %b1428], [%r0, %b1429], [%r14, %b1596], [%r14, %b1600], [%r14, %b1599]
  %r5 = phi i32 [1, %b1421], [1, %b1422], [1, %b1424], [%r13, %b1425], [%r13, %b1426], [%r13, %b1428], [%r12, %b1429], [%r11, %b1596], [%r11, %b1600], [%r10, %b1599]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b1420(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b1424:
  %r15 = icmp ule i32 1, 10000000
  br i1 %r15, label %b1425, label %b1423

b1425:
  %r13 = mul i32 1, 10
  %r17 = mul i32 1, 1000
  %r16 = icmp uge i32 %r0, %r17
  br i1 %r16, label %b1426, label %b1423

b1426:
  %r18 = icmp eq i32 %r13, 10000000
  br i1 %r18, label %b1423, label %b1428

b1428:
  %r19 = icmp ule i32 %r13, 10000000
  br i1 %r19, label %b1429, label %b1423

b1429:
  %r12 = mul i32 %r13, 10
  %r21 = mul i32 %r13, 1000
  %r20 = icmp uge i32 %r0, %r21
  br i1 %r20, label %b1596, label %b1423

b1596:
  %r11 = phi i32 [%r12, %b1429], [%r10, %b1599]
  %r23 = phi i32 [10000000, %b1429], [%r23, %b1599]
  %r14 = phi i32 [%r0, %b1429], [%r14, %b1599]
  %r22 = icmp eq i32 %r11, %r23
  br i1 %r22, label %b1423, label %b1600

b1600:
  %r24 = icmp ule i32 %r11, %r23
  br i1 %r24, label %b1599, label %b1423

b1599:
  %r10 = mul i32 %r11, 10
  %r26 = mul i32 %r11, 1000
  %r25 = icmp uge i32 %r14, %r26
  br i1 %r25, label %b1596, label %b1423
}

declare i32 @putchar(i32)

define internal void @func_b1459(i32 %r0) {
  br label %b1459

b1459:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b1315, label %b1475

b1315:
  %r4 = phi i32 [%r0, %b1459], [%r7, %b1454], [%r6, %b1727], [%r5, %b2101]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b1475:
  %r9 = phi i32 [%r0, %b1459], [%r7, %b1454], [%r6, %b1727], [%r5, %b2101]
  %r8 = icmp ult i32 %r9, 10
  br i1 %r8, label %b1454, label %b1605

b1454:
  call void @func_b1459(i32 0)
  %r7 = srem i32 %r9, 10
  %r10 = icmp ult i32 %r7, 10
  br i1 %r10, label %b1315, label %b1475

b1605:
  %r11 = icmp uge i32 %r9, 100
  br i1 %r11, label %b1726, label %b1727

b1726:
  %r12 = icmp eq i32 1, 10000000
  br i1 %r12, label %b1727, label %b1844

b1727:
  %r14 = phi i32 [%r9, %b1605], [%r9, %b1726], [%r9, %b1844], [%r9, %b1917], [%r9, %b2104], [%r24, %b2106], [%r24, %b2109], [%r24, %b2111]
  %r16 = phi i32 [1, %b1605], [1, %b1726], [1, %b1844], [%r23, %b1917], [%r22, %b2104], [%r21, %b2106], [%r21, %b2109], [%r20, %b2111]
  %r19 = mul i32 %r16, 10
  %r18 = sub i32 %r14, %r19
  %r17 = call i32 @func_b1420(i32 %r18)
  %r15 = add i32 %r16, %r17
  call void @func_b1459(i32 %r15)
  %r6 = srem i32 %r14, 10
  %r13 = icmp ult i32 %r6, 10
  br i1 %r13, label %b1315, label %b1475

b1844:
  %r25 = icmp ule i32 1, 10000000
  br i1 %r25, label %b1917, label %b1727

b1917:
  %r23 = mul i32 1, 10
  %r27 = mul i32 1, 1000
  %r26 = icmp uge i32 %r9, %r27
  br i1 %r26, label %b2069, label %b1727

b2069:
  %r28 = icmp eq i32 %r23, 10000000
  br i1 %r28, label %b2101, label %b2102

b2101:
  %r32 = phi i32 [%r23, %b2069], [%r23, %b2102]
  %r30 = phi i32 [%r9, %b2069], [%r9, %b2102]
  %r35 = mul i32 %r32, 10
  %r34 = sub i32 %r30, %r35
  %r33 = call i32 @func_b1420(i32 %r34)
  %r31 = add i32 %r32, %r33
  call void @func_b1094(i32 %r31)
  %r5 = srem i32 %r30, 10
  %r29 = icmp ult i32 %r5, 10
  br i1 %r29, label %b1315, label %b1475

b2102:
  %r36 = icmp ule i32 %r23, 10000000
  br i1 %r36, label %b2104, label %b2101

b2104:
  %r22 = mul i32 %r23, 10
  %r38 = mul i32 %r23, 1000
  %r37 = icmp uge i32 %r9, %r38
  br i1 %r37, label %b2106, label %b1727

b2106:
  %r21 = phi i32 [%r22, %b2104], [%r20, %b2111]
  %r40 = phi i32 [10000000, %b2104], [%r40, %b2111]
  %r24 = phi i32 [%r9, %b2104], [%r24, %b2111]
  %r39 = icmp eq i32 %r21, %r40
  br i1 %r39, label %b1727, label %b2109

b2109:
  %r41 = icmp ule i32 %r21, %r40
  br i1 %r41, label %b2111, label %b1727

b2111:
  %r20 = mul i32 %r21, 10
  %r43 = mul i32 %r21, 1000
  %r42 = icmp uge i32 %r24, %r43
  br i1 %r42, label %b2106, label %b1727
}

define internal void @func_b1094(i32 %r0) {
  br label %b1094

b1094:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b1315, label %b1743

b1315:
  %r4 = phi i32 [%r0, %b1094], [%r8, %b1731], [%r7, %b1727], [%r6, %b1454], [%r5, %b2101]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b1743:
  %r9 = icmp ult i32 %r0, 10
  br i1 %r9, label %b1731, label %b1845

b1731:
  call void @func_b1459(i32 0)
  %r8 = srem i32 %r0, 10
  %r10 = icmp ult i32 %r8, 10
  br i1 %r10, label %b1315, label %b1475

b1845:
  %r11 = icmp uge i32 %r0, 100
  br i1 %r11, label %b1915, label %b1727

b1475:
  %r13 = phi i32 [%r8, %b1731], [%r7, %b1727], [%r6, %b1454], [%r5, %b2101]
  %r12 = icmp ult i32 %r13, 10
  br i1 %r12, label %b1454, label %b1605

b1915:
  %r14 = icmp eq i32 1, 10000000
  br i1 %r14, label %b1727, label %b2068

b1727:
  %r16 = phi i32 [%r0, %b1845], [%r0, %b1915], [%r13, %b1605], [%r0, %b2068], [%r13, %b1726], [%r0, %b2100], [%r13, %b1844], [%r0, %b2103], [%r13, %b1917], [%r0, %b2108], [%r0, %b2110], [%r31, %b2112], [%r13, %b2104], [%r31, %b2113], [%r30, %b2106], [%r31, %b2114], [%r30, %b2109], [%r30, %b2111]
  %r18 = phi i32 [1, %b1845], [1, %b1915], [1, %b1605], [1, %b2068], [1, %b1726], [%r28, %b2100], [1, %b1844], [%r28, %b2103], [%r29, %b1917], [%r28, %b2108], [%r27, %b2110], [%r25, %b2112], [%r26, %b2104], [%r25, %b2113], [%r23, %b2106], [%r24, %b2114], [%r23, %b2109], [%r22, %b2111]
  %r21 = mul i32 %r18, 10
  %r20 = sub i32 %r16, %r21
  %r19 = call i32 @func_b1420(i32 %r20)
  %r17 = add i32 %r18, %r19
  call void @func_b1459(i32 %r17)
  %r7 = srem i32 %r16, 10
  %r15 = icmp ult i32 %r7, 10
  br i1 %r15, label %b1315, label %b1475

b1454:
  call void @func_b1459(i32 0)
  %r6 = srem i32 %r13, 10
  %r32 = icmp ult i32 %r6, 10
  br i1 %r32, label %b1315, label %b1475

b1605:
  %r33 = icmp uge i32 %r13, 100
  br i1 %r33, label %b1726, label %b1727

b2068:
  %r34 = icmp ule i32 1, 10000000
  br i1 %r34, label %b2100, label %b1727

b1726:
  %r35 = icmp eq i32 1, 10000000
  br i1 %r35, label %b1727, label %b1844

b2100:
  %r28 = mul i32 1, 10
  %r37 = mul i32 1, 1000
  %r36 = icmp uge i32 %r0, %r37
  br i1 %r36, label %b2103, label %b1727

b1844:
  %r38 = icmp ule i32 1, 10000000
  br i1 %r38, label %b1917, label %b1727

b2103:
  %r39 = icmp eq i32 %r28, 10000000
  br i1 %r39, label %b1727, label %b2108

b1917:
  %r29 = mul i32 1, 10
  %r41 = mul i32 1, 1000
  %r40 = icmp uge i32 %r13, %r41
  br i1 %r40, label %b2069, label %b1727

b2108:
  %r42 = icmp ule i32 %r28, 10000000
  br i1 %r42, label %b2110, label %b1727

b2069:
  %r43 = icmp eq i32 %r29, 10000000
  br i1 %r43, label %b2101, label %b2102

b2110:
  %r27 = mul i32 %r28, 10
  %r45 = mul i32 %r28, 1000
  %r44 = icmp uge i32 %r0, %r45
  br i1 %r44, label %b2112, label %b1727

b2101:
  %r49 = phi i32 [%r29, %b2069], [%r29, %b2102]
  %r47 = phi i32 [%r13, %b2069], [%r13, %b2102]
  %r52 = mul i32 %r49, 10
  %r51 = sub i32 %r47, %r52
  %r50 = call i32 @func_b1420(i32 %r51)
  %r48 = add i32 %r49, %r50
  call void @func_b1094(i32 %r48)
  %r5 = srem i32 %r47, 10
  %r46 = icmp ult i32 %r5, 10
  br i1 %r46, label %b1315, label %b1475

b2102:
  %r53 = icmp ule i32 %r29, 10000000
  br i1 %r53, label %b2104, label %b2101

b2112:
  %r25 = phi i32 [%r27, %b2110], [%r24, %b2114]
  %r55 = phi i32 [10000000, %b2110], [%r55, %b2114]
  %r31 = phi i32 [%r0, %b2110], [%r31, %b2114]
  %r54 = icmp eq i32 %r25, %r55
  br i1 %r54, label %b1727, label %b2113

b2104:
  %r26 = mul i32 %r29, 10
  %r57 = mul i32 %r29, 1000
  %r56 = icmp uge i32 %r13, %r57
  br i1 %r56, label %b2106, label %b1727

b2113:
  %r58 = icmp ule i32 %r25, %r55
  br i1 %r58, label %b2114, label %b1727

b2106:
  %r23 = phi i32 [%r26, %b2104], [%r22, %b2111]
  %r60 = phi i32 [10000000, %b2104], [%r60, %b2111]
  %r30 = phi i32 [%r13, %b2104], [%r30, %b2111]
  %r59 = icmp eq i32 %r23, %r60
  br i1 %r59, label %b1727, label %b2109

b2114:
  %r24 = mul i32 %r25, 10
  %r62 = mul i32 %r25, 1000
  %r61 = icmp uge i32 %r31, %r62
  br i1 %r61, label %b2112, label %b1727

b2109:
  %r63 = icmp ule i32 %r23, %r60
  br i1 %r63, label %b2111, label %b1727

b2111:
  %r22 = mul i32 %r23, 10
  %r65 = mul i32 %r23, 1000
  %r64 = icmp uge i32 %r30, %r65
  br i1 %r64, label %b2106, label %b1727
}

define void @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b911

b911:
  call void @func_b1094(i32 3)
  call void @func_b1094(i32 7)
  call void @func_b1094(i32 7)
  %r0 = call i32 @putchar(i32 53)
  ret void
}

