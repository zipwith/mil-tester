data Unit
  = Unit

-----------------------------------------
-- not recursive
b998 :: [] >>= [Word]
b998[] =
  return 0

-----------------------------------------
-- recursive
b1462 :: [Word, Word, Word] >>= [Word]
b1462[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1461[t2, t1, t0]
    else b1406[t2, t0]
b1461 :: [Word, Word, Word] >>= [Word]
b1461[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b1458[t3, t1, t0]
    else b1406[t0, t3]
b1458 :: [Word, Word, Word] >>= [Word]
b1458[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1406[t2, t0]
    else b1462[t0, t1, t2]
b1412 :: [Word, Word, Word] >>= [Word]
b1412[t0, t1, t2] =
  t3 <- mul((t1, 10))
  t4 <- mul((t1, 1000))
  t5 <- primUge((t2, t4))
  if t5
    then b1458[t3, t0, t2]
    else b1406[t2, t3]
b1411 :: [Word, Word, Word] >>= [Word]
b1411[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1412[t1, t0, t2]
    else b1406[t2, t0]
b1409 :: [Word, Word, Word] >>= [Word]
b1409[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1406[t2, t0]
    else b1411[t0, t1, t2]
b1408 :: [Word, Word, Word] >>= [Word]
b1408[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b1409[t3, t1, t0]
    else b1406[t0, t3]
b1407 :: [Word, Word, Word] >>= [Word]
b1407[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1408[t2, t1, t0]
    else b1406[t2, t0]
b1405 :: [Word, Word, Word] >>= [Word]
b1405[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1406[t2, t0]
    else b1407[t0, t1, t2]
b1404 :: [Word, Word] >>= [Word]
b1404[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b1405[1, t1, t0]
    else b1406[t0, 1]
b1406 :: [Word, Word] >>= [Word]
b1406[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b1403[t3]
  add((t1, t4))
b1403 :: [Word] >>= [Word]
b1403[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b998[]
    else b1404[t0, 10000000]

-----------------------------------------
-- not recursive
b1583 :: [Word] >>= [Word]
b1583[t0] =
  t1 <- add((t0, -10))
  t2 <- b1403[t1]
  add((t2, 1))

-----------------------------------------
-- not recursive
b1591 :: [Word] >>= [Word]
b1591[t0] =
  t1 <- add((t0, -100))
  t2 <- b1403[t1]
  add((t2, 10))

-----------------------------------------
-- not recursive
b1596 :: [Word] >>= [Word]
b1596[t0] =
  t1 <- add((t0, -1000))
  t2 <- b1403[t1]
  add((t2, 100))

-----------------------------------------
-- recursive
b1466 :: [Word, Word, Word] >>= [Word]
b1466[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b1465[t2, t1, t0]
    else b1406[t2, t0]
b1465 :: [Word, Word, Word] >>= [Word]
b1465[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- mul((t2, 1000))
  t5 <- primUge((t0, t4))
  if t5
    then b1463[t3, t1, t0]
    else b1406[t0, t3]
b1463 :: [Word, Word, Word] >>= [Word]
b1463[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1406[t2, t0]
    else b1466[t0, t1, t2]

-----------------------------------------
-- not recursive
b1619 :: [Word] >>= [Word]
b1619[t0] =
  t1 <- primUge((t0, 10000))
  if t1
    then b1463[100, 10000000, t0]
    else b1596[t0]

-----------------------------------------
-- not recursive
b1616 :: [Word] >>= [Word]
b1616[t0] =
  t1 <- primUge((t0, 1000))
  if t1
    then b1619[t0]
    else b1591[t0]

-----------------------------------------
-- not recursive
b1598 :: [Word] >>= [Word]
b1598[t0] =
  t1 <- primUge((t0, 100))
  if t1
    then b1616[t0]
    else b1583[t0]

-----------------------------------------
-- not recursive
b146 :: [Word] >>= [Word]
b146[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b998[]
    else b1598[t0]

-----------------------------------------
-- not recursive
Proxy$je5 :: Unit
Proxy$je5 <-
  Unit()

-----------------------------------------
-- not recursive
b1315 :: [Word] >>= [Unit]
b1315[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$je5

-----------------------------------------
-- recursive
b1430 :: [Word] >>= [Unit]
b1430[t0] =
  t1 <- b1403[t0]
  t2 <- b1094[t1]
  t3 <- rem((t0, 10))
  t4 <- primUlt((t3, 10))
  if t4
    then b1315[t3]
    else b1430[t3]
b1003 :: [Word] >>= [Unit]
b1003[t0] =
  t1 <- b146[t0]
  t2 <- b1094[t1]
  t3 <- rem((t0, 10))
  t4 <- primUlt((t3, 10))
  if t4
    then b1315[t3]
    else b1430[t3]
b1094 :: [Word] >>= [Unit]
b1094[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b1315[t0]
    else b1003[t0]

-----------------------------------------
-- not recursive
b911 :: [] >>= [Unit]
b911[] =
  t0 <- b1094[3]
  t1 <- b1094[7]
  t2 <- b1094[7]
  t3 <- putchar((53))
  return Proxy$je5

-----------------------------------------
-- not recursive
main :: [] >>= [Unit]
main[] =
  b911[]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  main[]

-----------------------------------------
-- Entrypoints:
define internal i32 @func_b1403(i32 %r0) {
  br label %b1403

b1403:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b998, label %b1404

b998:
  ret i32 0

b1404:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b1405, label %b1406

b1405:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b1406, label %b1407

b1406:
  %r8 = phi i32 [%r0, %b1404], [%r0, %b1405], [%r0, %b1407], [%r0, %b1408], [%r0, %b1409], [%r0, %b1411], [%r0, %b1412], [%r14, %b1458], [%r14, %b1462], [%r14, %b1461]
  %r5 = phi i32 [1, %b1404], [1, %b1405], [1, %b1407], [%r13, %b1408], [%r13, %b1409], [%r13, %b1411], [%r12, %b1412], [%r11, %b1458], [%r11, %b1462], [%r10, %b1461]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b1403(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b1407:
  %r15 = icmp ule i32 1, 10000000
  br i1 %r15, label %b1408, label %b1406

b1408:
  %r13 = mul i32 1, 10
  %r17 = mul i32 1, 1000
  %r16 = icmp uge i32 %r0, %r17
  br i1 %r16, label %b1409, label %b1406

b1409:
  %r18 = icmp eq i32 %r13, 10000000
  br i1 %r18, label %b1406, label %b1411

b1411:
  %r19 = icmp ule i32 %r13, 10000000
  br i1 %r19, label %b1412, label %b1406

b1412:
  %r12 = mul i32 %r13, 10
  %r21 = mul i32 %r13, 1000
  %r20 = icmp uge i32 %r0, %r21
  br i1 %r20, label %b1458, label %b1406

b1458:
  %r11 = phi i32 [%r12, %b1412], [%r10, %b1461]
  %r23 = phi i32 [10000000, %b1412], [%r23, %b1461]
  %r14 = phi i32 [%r0, %b1412], [%r14, %b1461]
  %r22 = icmp eq i32 %r11, %r23
  br i1 %r22, label %b1406, label %b1462

b1462:
  %r24 = icmp ule i32 %r11, %r23
  br i1 %r24, label %b1461, label %b1406

b1461:
  %r10 = mul i32 %r11, 10
  %r26 = mul i32 %r11, 1000
  %r25 = icmp uge i32 %r14, %r26
  br i1 %r25, label %b1458, label %b1406
}

define internal i32 @func_b146(i32 %r0) {
  br label %b146

b146:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b998, label %b1598

b998:
  ret i32 0

b1598:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b1616, label %b1583

b1616:
  %r3 = icmp uge i32 %r0, 1000
  br i1 %r3, label %b1619, label %b1591

b1583:
  %r6 = add i32 %r0, -10
  %r5 = call i32 @func_b1403(i32 %r6)
  %r4 = add i32 %r5, 1
  ret i32 %r4

b1619:
  %r7 = icmp uge i32 %r0, 10000
  br i1 %r7, label %b1463, label %b1596

b1591:
  %r10 = add i32 %r0, -100
  %r9 = call i32 @func_b1403(i32 %r10)
  %r8 = add i32 %r9, 10
  ret i32 %r8

b1463:
  %r12 = phi i32 [100, %b1619], [%r15, %b1465]
  %r13 = phi i32 [10000000, %b1619], [%r13, %b1465]
  %r14 = phi i32 [%r0, %b1619], [%r14, %b1465]
  %r11 = icmp eq i32 %r12, %r13
  br i1 %r11, label %b1406, label %b1466

b1596:
  %r18 = add i32 %r0, -1000
  %r17 = call i32 @func_b1403(i32 %r18)
  %r16 = add i32 %r17, 100
  ret i32 %r16

b1406:
  %r23 = phi i32 [%r14, %b1463], [%r14, %b1466], [%r14, %b1465]
  %r20 = phi i32 [%r12, %b1463], [%r12, %b1466], [%r15, %b1465]
  %r24 = mul i32 %r20, 10
  %r22 = sub i32 %r23, %r24
  %r21 = call i32 @func_b1403(i32 %r22)
  %r19 = add i32 %r20, %r21
  ret i32 %r19

b1466:
  %r25 = icmp ule i32 %r12, %r13
  br i1 %r25, label %b1465, label %b1406

b1465:
  %r15 = mul i32 %r12, 10
  %r27 = mul i32 %r12, 1000
  %r26 = icmp uge i32 %r14, %r27
  br i1 %r26, label %b1463, label %b1406
}

declare i32 @putchar(i32)

define internal void @func_b1094(i32 %r0) {
  br label %b1094

b1094:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b1315, label %b1003

b1315:
  %r4 = phi i32 [%r0, %b1094], [%r6, %b1003], [%r5, %b1430]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b1003:
  %r8 = call i32 @func_b146(i32 %r0)
  call void @func_b1094(i32 %r8)
  %r6 = srem i32 %r0, 10
  %r7 = icmp ult i32 %r6, 10
  br i1 %r7, label %b1315, label %b1430

b1430:
  %r10 = phi i32 [%r6, %b1003], [%r5, %b1430]
  %r11 = call i32 @func_b1403(i32 %r10)
  call void @func_b1094(i32 %r11)
  %r5 = srem i32 %r10, 10
  %r9 = icmp ult i32 %r5, 10
  br i1 %r9, label %b1315, label %b1430
}

define void @main() {
  br label %initialize

initialize:
  br label %main

main:
  br label %b911

b911:
  call void @func_b1094(i32 3)
  call void @func_b1094(i32 7)
  call void @func_b1094(i32 7)
  %r0 = call i32 @putchar(i32 53)
  ret void
}

