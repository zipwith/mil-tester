struct S / 5
  [ y :: Stored Unsigned  {- offset=0 -}
  | x :: Stored (Bit 8)  {- offset=4 -} ]
  aligned 4

data Unit
  = Unit

bitdata Unsigned /32
  = Unsigned [ bits :: Bit 32 ]
    -- predUnsigned(x :: Bit 32) = true

-- bit pattern:
--  ________________________________

-----------------------------------------
-- not recursive
a :: Bit 32
a <- area S aligned 4

-----------------------------------------
-- not recursive
b349 :: [] >>= [Bit 32]
b349[] =
  return 0

-----------------------------------------
-- recursive
b494 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b494[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b489[t2, t0]
    else b496[t0, t1, t2]
b496 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b496[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b498[t1, t0, t2]
    else b489[t2, t0]
b498 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b498[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b493[t3, t0, t2]
b492 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b492[t0, t1, t2] =
  t3 <- mul((t2, 10))
  b493[t3, t1, t0]
b493 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b493[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b494[t0, t1, t2]
    else b489[t2, t0]
b490 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b490[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b492[t2, t1, t0]
    else b489[t2, t0]
b488 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b488[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b489[t2, t1]
    else b490[t1, t0, t2]
b487 :: [Bit 32, Bit 32] >>= [Bit 32]
b487[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b488[t1, 1, t0]
    else b489[t0, 1]
b489 :: [Bit 32, Bit 32] >>= [Bit 32]
b489[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b486[t3]
  add((t1, t4))
b486 :: [Bit 32] >>= [Bit 32]
b486[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b349[]
    else b487[t0, 10000000]

-----------------------------------------
-- not recursive
Proxy$fqc :: Unit
Proxy$fqc <-
  Unit()

-----------------------------------------
-- not recursive
b477 :: [Bit 32] >>= [Unit]
b477[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$fqc

-----------------------------------------
-- recursive
b440 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b440[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b489[t2, t0]
    else b504[t0, t1, t2]
b504 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b504[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b445[t1, t0, t2]
    else b489[t2, t0]
b445 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b445[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b439[t3, t0, t2]
b439 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b439[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b440[t0, t1, t2]
    else b489[t2, t0]

-----------------------------------------
-- recursive
b545 :: [Bit 32, Bit 32] >>= [Unit]
b545[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b486[t3]
  t5 <- add((t1, t4))
  b518[t0, t5]
b518 :: [Bit 32, Bit 32] >>= [Unit]
b518[t0, t1] =
  t2 <- b476[t1]
  t3 <- nzrem((t0, 10))
  b476[t3]
b560 :: [Bit 32, Bit 32] >>= [Unit]
b560[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b486[t3]
  t5 <- add((t1, t4))
  b549[t5, t0]
b549 :: [Bit 32, Bit 32] >>= [Unit]
b549[t0, t1] =
  t2 <- b476[t0]
  t3 <- nzrem((t1, 10))
  b476[t3]
b476 :: [Bit 32] >>= [Unit]
b476[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b477[t0]
    else b525[t0]
b525 :: [Bit 32] >>= [Unit]
b525[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b518[t0, 0]
    else b536[t0, 10000000]
b536 :: [Bit 32, Bit 32] >>= [Unit]
b536[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b544[t1, 1, t0]
    else b545[t0, 1]
b544 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b544[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b545[t2, t1]
    else b556[t1, t0, t2]
b556 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b556[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b558[t2, t1, t0]
    else b545[t2, t0]
b558 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b558[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b493[t3, t1, t0]
  t5 <- b363[t4]
  t6 <- nzrem((t0, 10))
  b476[t6]
b555 :: [Bit 32] >>= [Unit]
b555[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b549[0, t0]
    else b557[t0, 10000000]
b557 :: [Bit 32, Bit 32] >>= [Unit]
b557[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b559[t1, 1, t0]
    else b560[t0, 1]
b559 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b559[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b560[t2, t1]
    else b561[t1, t0, t2]
b561 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b561[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b562[t2, t1, t0]
    else b560[t2, t0]
b562 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b562[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b439[t3, t1, t0]
  t5 <- b363[t4]
  t6 <- nzrem((t0, 10))
  b476[t6]
b363 :: [Bit 32] >>= [Unit]
b363[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b477[t0]
    else b555[t0]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store32((a, 2))
  t1 <- add((a, 4))
  t2 <- store8((t1, 1))
  t3 <- load32((a))
  b363[t3]

-----------------------------------------
-- Entrypoints:
@raw.0 = internal global [5 x i8] zeroinitializer, align 4

@a = internal alias i8, i8* bitcast([5 x i8]* @raw.0 to i8*)

define internal i32 @func_b493(i32 %r0, i32 %r1, i32 %r2) {
  br label %b493

b493:
  %r6 = phi i32 [%r0, %0], [%r8, %b498]
  %r7 = phi i32 [%r1, %0], [%r7, %b498]
  %r4 = phi i32 [%r2, %0], [%r4, %b498]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b494, label %b489

b494:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b489, label %b496

b489:
  %r14 = phi i32 [%r4, %b493], [%r4, %b494], [%r4, %b496]
  %r11 = phi i32 [%r6, %b493], [%r6, %b494], [%r6, %b496]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b486(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b496:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b498, label %b489

b498:
  %r8 = mul i32 %r6, 10
  br label %b493
}

define internal i32 @func_b486(i32 %r0) {
  br label %b486

b486:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b349, label %b487

b349:
  ret i32 0

b487:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b488, label %b489

b488:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b489, label %b490

b489:
  %r8 = phi i32 [%r0, %b487], [%r0, %b488], [%r0, %b490], [%r11, %b493], [%r11, %b494], [%r11, %b496]
  %r5 = phi i32 [1, %b487], [1, %b488], [1, %b490], [%r10, %b493], [%r10, %b494], [%r10, %b496]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b486(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b490:
  %r12 = icmp ule i32 1, 10000000
  br i1 %r12, label %b492, label %b489

b492:
  %r13 = mul i32 1, 10
  br label %b493

b493:
  %r10 = phi i32 [%r13, %b492], [%r17, %b498]
  %r16 = phi i32 [10000000, %b492], [%r16, %b498]
  %r11 = phi i32 [%r0, %b492], [%r11, %b498]
  %r15 = mul i32 %r10, 100
  %r14 = icmp uge i32 %r11, %r15
  br i1 %r14, label %b494, label %b489

b494:
  %r18 = icmp eq i32 %r10, %r16
  br i1 %r18, label %b489, label %b496

b496:
  %r19 = icmp ule i32 %r10, %r16
  br i1 %r19, label %b498, label %b489

b498:
  %r17 = mul i32 %r10, 10
  br label %b493
}

define internal i32 @func_b439(i32 %r0, i32 %r1, i32 %r2) {
  br label %b439

b439:
  %r6 = phi i32 [%r0, %0], [%r8, %b445]
  %r7 = phi i32 [%r1, %0], [%r7, %b445]
  %r4 = phi i32 [%r2, %0], [%r4, %b445]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b440, label %b489

b440:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b489, label %b504

b489:
  %r14 = phi i32 [%r4, %b439], [%r4, %b440], [%r4, %b504]
  %r11 = phi i32 [%r6, %b439], [%r6, %b440], [%r6, %b504]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b486(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b504:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b445, label %b489

b445:
  %r8 = mul i32 %r6, 10
  br label %b439
}

declare i32 @putchar(i32)

define internal void @func_b476(i32 %r0) {
  br label %b476

b476:
  %r2 = phi i32 [%r0, %0], [%r4, %b518], [%r3, %b558]
  %r1 = icmp ult i32 %r2, 10
  br i1 %r1, label %b477, label %b525

b477:
  %r6 = add i32 %r2, 48
  %r5 = call i32 @putchar(i32 %r6)
  ret void

b525:
  %r7 = icmp ult i32 %r2, 10
  br i1 %r7, label %b518, label %b536

b518:
  %r8 = phi i32 [%r2, %b525], [%r11, %b545]
  %r9 = phi i32 [0, %b525], [%r10, %b545]
  call void @func_b476(i32 %r9)
  %r4 = urem i32 %r8, 10
  br label %b476

b536:
  %r12 = icmp uge i32 %r2, 100
  br i1 %r12, label %b544, label %b545

b544:
  %r13 = icmp eq i32 1, 10000000
  br i1 %r13, label %b545, label %b556

b545:
  %r11 = phi i32 [%r2, %b536], [%r2, %b544], [%r2, %b556]
  %r14 = phi i32 [1, %b536], [1, %b544], [1, %b556]
  %r17 = mul i32 %r14, 10
  %r16 = sub i32 %r11, %r17
  %r15 = call i32 @func_b486(i32 %r16)
  %r10 = add i32 %r14, %r15
  br label %b518

b556:
  %r18 = icmp ule i32 1, 10000000
  br i1 %r18, label %b558, label %b545

b558:
  %r20 = mul i32 1, 10
  %r19 = call i32 @func_b493(i32 %r20, i32 10000000, i32 %r2)
  call void @func_b363(i32 %r19)
  %r3 = urem i32 %r2, 10
  br label %b476
}

define internal void @func_b363(i32 %r0) {
  br label %b363

b363:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b477, label %b555

b477:
  %r4 = phi i32 [%r0, %b363], [%r5, %b476]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b555:
  %r6 = icmp ult i32 %r0, 10
  br i1 %r6, label %b549, label %b557

b549:
  %r9 = phi i32 [0, %b555], [%r11, %b560]
  %r8 = phi i32 [%r0, %b555], [%r10, %b560]
  call void @func_b476(i32 %r9)
  %r7 = urem i32 %r8, 10
  br label %b476

b557:
  %r12 = icmp uge i32 %r0, 100
  br i1 %r12, label %b559, label %b560

b476:
  %r5 = phi i32 [%r7, %b549], [%r16, %b518], [%r15, %b562], [%r14, %b558]
  %r13 = icmp ult i32 %r5, 10
  br i1 %r13, label %b477, label %b525

b559:
  %r17 = icmp eq i32 1, 10000000
  br i1 %r17, label %b560, label %b561

b560:
  %r10 = phi i32 [%r0, %b557], [%r0, %b559], [%r0, %b561]
  %r18 = phi i32 [1, %b557], [1, %b559], [1, %b561]
  %r21 = mul i32 %r18, 10
  %r20 = sub i32 %r10, %r21
  %r19 = call i32 @func_b486(i32 %r20)
  %r11 = add i32 %r18, %r19
  br label %b549

b525:
  %r22 = icmp ult i32 %r5, 10
  br i1 %r22, label %b518, label %b536

b561:
  %r23 = icmp ule i32 1, 10000000
  br i1 %r23, label %b562, label %b560

b518:
  %r24 = phi i32 [%r5, %b525], [%r27, %b545]
  %r25 = phi i32 [0, %b525], [%r26, %b545]
  call void @func_b476(i32 %r25)
  %r16 = urem i32 %r24, 10
  br label %b476

b536:
  %r28 = icmp uge i32 %r5, 100
  br i1 %r28, label %b544, label %b545

b562:
  %r30 = mul i32 1, 10
  %r29 = call i32 @func_b439(i32 %r30, i32 10000000, i32 %r0)
  call void @func_b363(i32 %r29)
  %r15 = urem i32 %r0, 10
  br label %b476

b544:
  %r31 = icmp eq i32 1, 10000000
  br i1 %r31, label %b545, label %b556

b545:
  %r27 = phi i32 [%r5, %b536], [%r5, %b544], [%r5, %b556]
  %r32 = phi i32 [1, %b536], [1, %b544], [1, %b556]
  %r35 = mul i32 %r32, 10
  %r34 = sub i32 %r27, %r35
  %r33 = call i32 @func_b486(i32 %r34)
  %r26 = add i32 %r32, %r33
  br label %b518

b556:
  %r36 = icmp ule i32 1, 10000000
  br i1 %r36, label %b558, label %b545

b558:
  %r38 = mul i32 1, 10
  %r37 = call i32 @func_b493(i32 %r38, i32 10000000, i32 %r5)
  call void @func_b363(i32 %r37)
  %r14 = urem i32 %r5, 10
  br label %b476
}

define void @main() {
  br label %initialize

initialize:
  %r5 = inttoptr i32 ptrtoint(i8* @a to i32) to i32*
  store i32 2, i32* %r5
  %r4 = add i32 ptrtoint(i8* @a to i32), 4
  %r2 = inttoptr i32 %r4 to i8*
  %r3 = trunc i32 1 to i8
  store i8 %r3, i8* %r2
  %r1 = inttoptr i32 ptrtoint(i8* @a to i32) to i32*
  %r0 = load i32, i32* %r1
  br label %c54

c54:
  tail call void @func_b363(i32 %r0)
  ret void
}

