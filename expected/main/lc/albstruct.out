struct S / 5
  [ y :: Stored Unsigned  {- offset=0 -}
  | x :: Stored (Bit 8)  {- offset=4 -} ]
  aligned 4

data Unit
  = Unit

bitdata Unsigned /32
  = Unsigned [ bits :: Bit 32 ]
    -- predUnsigned(x :: Bit 32) = true

-- bit pattern:
--  ________________________________

-----------------------------------------
-- not recursive
a :: Word
a <- area S aligned 4

-----------------------------------------
-- not recursive
b349 :: [] >>= [Word]
b349[] =
  return 0

-----------------------------------------
-- recursive
b496 :: [Word, Word, Word] >>= [Word]
b496[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b491[t2, t0]
    else b498[t0, t1, t2]
b498 :: [Word, Word, Word] >>= [Word]
b498[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b500[t1, t0, t2]
    else b491[t2, t0]
b500 :: [Word, Word, Word] >>= [Word]
b500[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b495[t3, t0, t2]
b494 :: [Word, Word, Word] >>= [Word]
b494[t0, t1, t2] =
  t3 <- mul((t2, 10))
  b495[t3, t1, t0]
b495 :: [Word, Word, Word] >>= [Word]
b495[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b496[t0, t1, t2]
    else b491[t2, t0]
b492 :: [Word, Word, Word] >>= [Word]
b492[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b494[t2, t1, t0]
    else b491[t2, t0]
b490 :: [Word, Word, Word] >>= [Word]
b490[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b491[t2, t1]
    else b492[t1, t0, t2]
b489 :: [Word, Word] >>= [Word]
b489[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b490[t1, 1, t0]
    else b491[t0, 1]
b491 :: [Word, Word] >>= [Word]
b491[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b488[t3]
  add((t1, t4))
b488 :: [Word] >>= [Word]
b488[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b349[]
    else b489[t0, 10000000]

-----------------------------------------
-- not recursive
Proxy$fqc :: Unit
Proxy$fqc <-
  Unit()

-----------------------------------------
-- not recursive
b479 :: [Word] >>= [Unit]
b479[t0] =
  t1 <- add((t0, 48))
  t2 <- putchar((t1))
  return Proxy$fqc

-----------------------------------------
-- recursive
b442 :: [Word, Word, Word] >>= [Word]
b442[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b491[t2, t0]
    else b506[t0, t1, t2]
b506 :: [Word, Word, Word] >>= [Word]
b506[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b447[t1, t0, t2]
    else b491[t2, t0]
b447 :: [Word, Word, Word] >>= [Word]
b447[t0, t1, t2] =
  t3 <- mul((t1, 10))
  b441[t3, t0, t2]
b441 :: [Word, Word, Word] >>= [Word]
b441[t0, t1, t2] =
  t3 <- mul((t0, 100))
  t4 <- primUge((t2, t3))
  if t4
    then b442[t0, t1, t2]
    else b491[t2, t0]

-----------------------------------------
-- recursive
b547 :: [Word, Word] >>= [Unit]
b547[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b488[t3]
  t5 <- add((t1, t4))
  b520[t0, t5]
b520 :: [Word, Word] >>= [Unit]
b520[t0, t1] =
  t2 <- b478[t1]
  t3 <- rem((t0, 10))
  b478[t3]
b562 :: [Word, Word] >>= [Unit]
b562[t0, t1] =
  t2 <- mul((t1, 10))
  t3 <- sub((t0, t2))
  t4 <- b488[t3]
  t5 <- add((t1, t4))
  b551[t5, t0]
b551 :: [Word, Word] >>= [Unit]
b551[t0, t1] =
  t2 <- b478[t0]
  t3 <- rem((t1, 10))
  b478[t3]
b478 :: [Word] >>= [Unit]
b478[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b479[t0]
    else b527[t0]
b527 :: [Word] >>= [Unit]
b527[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b520[t0, 0]
    else b538[t0, 10000000]
b538 :: [Word, Word] >>= [Unit]
b538[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b546[t1, 1, t0]
    else b547[t0, 1]
b546 :: [Word, Word, Word] >>= [Unit]
b546[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b547[t2, t1]
    else b558[t1, t0, t2]
b558 :: [Word, Word, Word] >>= [Unit]
b558[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b560[t2, t1, t0]
    else b547[t2, t0]
b560 :: [Word, Word, Word] >>= [Unit]
b560[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b495[t3, t1, t0]
  t5 <- b365[t4]
  t6 <- rem((t0, 10))
  b478[t6]
b557 :: [Word] >>= [Unit]
b557[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b551[0, t0]
    else b559[t0, 10000000]
b559 :: [Word, Word] >>= [Unit]
b559[t0, t1] =
  t2 <- primUge((t0, 100))
  if t2
    then b561[t1, 1, t0]
    else b562[t0, 1]
b561 :: [Word, Word, Word] >>= [Unit]
b561[t0, t1, t2] =
  t3 <- primEq((t1, t0))
  if t3
    then b562[t2, t1]
    else b563[t1, t0, t2]
b563 :: [Word, Word, Word] >>= [Unit]
b563[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b564[t2, t1, t0]
    else b562[t2, t0]
b564 :: [Word, Word, Word] >>= [Unit]
b564[t0, t1, t2] =
  t3 <- mul((t2, 10))
  t4 <- b441[t3, t1, t0]
  t5 <- b365[t4]
  t6 <- rem((t0, 10))
  b478[t6]
b365 :: [Word] >>= [Unit]
b365[t0] =
  t1 <- primUlt((t0, 10))
  if t1
    then b479[t0]
    else b557[t0]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store32((a, 2))
  t1 <- add((a, 4))
  t2 <- store8((t1, 1))
  t3 <- load32((a))
  b365[t3]

-----------------------------------------
-- Entrypoints:
@raw.0 = internal global [5 x i8] zeroinitializer, align 4

@a = internal alias i8, i8* bitcast([5 x i8]* @raw.0 to i8*)

define internal i32 @func_b495(i32 %r0, i32 %r1, i32 %r2) {
  br label %b495

b495:
  %r6 = phi i32 [%r0, %0], [%r8, %b500]
  %r7 = phi i32 [%r1, %0], [%r7, %b500]
  %r4 = phi i32 [%r2, %0], [%r4, %b500]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b496, label %b491

b496:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b491, label %b498

b491:
  %r14 = phi i32 [%r4, %b495], [%r4, %b496], [%r4, %b498]
  %r11 = phi i32 [%r6, %b495], [%r6, %b496], [%r6, %b498]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b488(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b498:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b500, label %b491

b500:
  %r8 = mul i32 %r6, 10
  br label %b495
}

define internal i32 @func_b488(i32 %r0) {
  br label %b488

b488:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b349, label %b489

b349:
  ret i32 0

b489:
  %r2 = icmp uge i32 %r0, 100
  br i1 %r2, label %b490, label %b491

b490:
  %r3 = icmp eq i32 1, 10000000
  br i1 %r3, label %b491, label %b492

b491:
  %r8 = phi i32 [%r0, %b489], [%r0, %b490], [%r0, %b492], [%r11, %b495], [%r11, %b496], [%r11, %b498]
  %r5 = phi i32 [1, %b489], [1, %b490], [1, %b492], [%r10, %b495], [%r10, %b496], [%r10, %b498]
  %r9 = mul i32 %r5, 10
  %r7 = sub i32 %r8, %r9
  %r6 = call i32 @func_b488(i32 %r7)
  %r4 = add i32 %r5, %r6
  ret i32 %r4

b492:
  %r12 = icmp ule i32 1, 10000000
  br i1 %r12, label %b494, label %b491

b494:
  %r13 = mul i32 1, 10
  br label %b495

b495:
  %r10 = phi i32 [%r13, %b494], [%r17, %b500]
  %r16 = phi i32 [10000000, %b494], [%r16, %b500]
  %r11 = phi i32 [%r0, %b494], [%r11, %b500]
  %r15 = mul i32 %r10, 100
  %r14 = icmp uge i32 %r11, %r15
  br i1 %r14, label %b496, label %b491

b496:
  %r18 = icmp eq i32 %r10, %r16
  br i1 %r18, label %b491, label %b498

b498:
  %r19 = icmp ule i32 %r10, %r16
  br i1 %r19, label %b500, label %b491

b500:
  %r17 = mul i32 %r10, 10
  br label %b495
}

define internal i32 @func_b441(i32 %r0, i32 %r1, i32 %r2) {
  br label %b441

b441:
  %r6 = phi i32 [%r0, %0], [%r8, %b447]
  %r7 = phi i32 [%r1, %0], [%r7, %b447]
  %r4 = phi i32 [%r2, %0], [%r4, %b447]
  %r5 = mul i32 %r6, 100
  %r3 = icmp uge i32 %r4, %r5
  br i1 %r3, label %b442, label %b491

b442:
  %r9 = icmp eq i32 %r6, %r7
  br i1 %r9, label %b491, label %b506

b491:
  %r14 = phi i32 [%r4, %b441], [%r4, %b442], [%r4, %b506]
  %r11 = phi i32 [%r6, %b441], [%r6, %b442], [%r6, %b506]
  %r15 = mul i32 %r11, 10
  %r13 = sub i32 %r14, %r15
  %r12 = call i32 @func_b488(i32 %r13)
  %r10 = add i32 %r11, %r12
  ret i32 %r10

b506:
  %r16 = icmp ule i32 %r6, %r7
  br i1 %r16, label %b447, label %b491

b447:
  %r8 = mul i32 %r6, 10
  br label %b441
}

declare i32 @putchar(i32)

define internal void @func_b478(i32 %r0) {
  br label %b478

b478:
  %r2 = phi i32 [%r0, %0], [%r4, %b520], [%r3, %b560]
  %r1 = icmp ult i32 %r2, 10
  br i1 %r1, label %b479, label %b527

b479:
  %r6 = add i32 %r2, 48
  %r5 = call i32 @putchar(i32 %r6)
  ret void

b527:
  %r7 = icmp ult i32 %r2, 10
  br i1 %r7, label %b520, label %b538

b520:
  %r8 = phi i32 [%r2, %b527], [%r11, %b547]
  %r9 = phi i32 [0, %b527], [%r10, %b547]
  call void @func_b478(i32 %r9)
  %r4 = srem i32 %r8, 10
  br label %b478

b538:
  %r12 = icmp uge i32 %r2, 100
  br i1 %r12, label %b546, label %b547

b546:
  %r13 = icmp eq i32 1, 10000000
  br i1 %r13, label %b547, label %b558

b547:
  %r11 = phi i32 [%r2, %b538], [%r2, %b546], [%r2, %b558]
  %r14 = phi i32 [1, %b538], [1, %b546], [1, %b558]
  %r17 = mul i32 %r14, 10
  %r16 = sub i32 %r11, %r17
  %r15 = call i32 @func_b488(i32 %r16)
  %r10 = add i32 %r14, %r15
  br label %b520

b558:
  %r18 = icmp ule i32 1, 10000000
  br i1 %r18, label %b560, label %b547

b560:
  %r20 = mul i32 1, 10
  %r19 = call i32 @func_b495(i32 %r20, i32 10000000, i32 %r2)
  call void @func_b365(i32 %r19)
  %r3 = srem i32 %r2, 10
  br label %b478
}

define internal void @func_b365(i32 %r0) {
  br label %b365

b365:
  %r1 = icmp ult i32 %r0, 10
  br i1 %r1, label %b479, label %b557

b479:
  %r4 = phi i32 [%r0, %b365], [%r5, %b478]
  %r3 = add i32 %r4, 48
  %r2 = call i32 @putchar(i32 %r3)
  ret void

b557:
  %r6 = icmp ult i32 %r0, 10
  br i1 %r6, label %b551, label %b559

b551:
  %r9 = phi i32 [0, %b557], [%r11, %b562]
  %r8 = phi i32 [%r0, %b557], [%r10, %b562]
  call void @func_b478(i32 %r9)
  %r7 = srem i32 %r8, 10
  br label %b478

b559:
  %r12 = icmp uge i32 %r0, 100
  br i1 %r12, label %b561, label %b562

b478:
  %r5 = phi i32 [%r7, %b551], [%r16, %b520], [%r15, %b564], [%r14, %b560]
  %r13 = icmp ult i32 %r5, 10
  br i1 %r13, label %b479, label %b527

b561:
  %r17 = icmp eq i32 1, 10000000
  br i1 %r17, label %b562, label %b563

b562:
  %r10 = phi i32 [%r0, %b559], [%r0, %b561], [%r0, %b563]
  %r18 = phi i32 [1, %b559], [1, %b561], [1, %b563]
  %r21 = mul i32 %r18, 10
  %r20 = sub i32 %r10, %r21
  %r19 = call i32 @func_b488(i32 %r20)
  %r11 = add i32 %r18, %r19
  br label %b551

b527:
  %r22 = icmp ult i32 %r5, 10
  br i1 %r22, label %b520, label %b538

b563:
  %r23 = icmp ule i32 1, 10000000
  br i1 %r23, label %b564, label %b562

b520:
  %r24 = phi i32 [%r5, %b527], [%r27, %b547]
  %r25 = phi i32 [0, %b527], [%r26, %b547]
  call void @func_b478(i32 %r25)
  %r16 = srem i32 %r24, 10
  br label %b478

b538:
  %r28 = icmp uge i32 %r5, 100
  br i1 %r28, label %b546, label %b547

b564:
  %r30 = mul i32 1, 10
  %r29 = call i32 @func_b441(i32 %r30, i32 10000000, i32 %r0)
  call void @func_b365(i32 %r29)
  %r15 = srem i32 %r0, 10
  br label %b478

b546:
  %r31 = icmp eq i32 1, 10000000
  br i1 %r31, label %b547, label %b558

b547:
  %r27 = phi i32 [%r5, %b538], [%r5, %b546], [%r5, %b558]
  %r32 = phi i32 [1, %b538], [1, %b546], [1, %b558]
  %r35 = mul i32 %r32, 10
  %r34 = sub i32 %r27, %r35
  %r33 = call i32 @func_b488(i32 %r34)
  %r26 = add i32 %r32, %r33
  br label %b520

b558:
  %r36 = icmp ule i32 1, 10000000
  br i1 %r36, label %b560, label %b547

b560:
  %r38 = mul i32 1, 10
  %r37 = call i32 @func_b495(i32 %r38, i32 10000000, i32 %r5)
  call void @func_b365(i32 %r37)
  %r14 = srem i32 %r5, 10
  br label %b478
}

define void @main() {
  br label %initialize

initialize:
  %r5 = inttoptr i32 ptrtoint(i8* @a to i32) to i32*
  store i32 2, i32* %r5
  %r4 = add i32 ptrtoint(i8* @a to i32), 4
  %r2 = inttoptr i32 %r4 to i8*
  %r3 = trunc i32 1 to i8
  store i8 %r3, i8* %r2
  %r1 = inttoptr i32 ptrtoint(i8* @a to i32) to i32*
  %r0 = load i32, i32* %r1
  br label %c54

c54:
  tail call void @func_b365(i32 %r0)
  ret void
}

