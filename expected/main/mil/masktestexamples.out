-----------------------------------------
-- not recursive
b68 :: [] >>= [Word]
b68[] =
  return 2

-----------------------------------------
-- not recursive
bret :: [Word] >>= [Word]
bret[t0] =
  return t0

-----------------------------------------
-- not recursive
b66 :: [Word, Word, Word] >>= [Word]
b66[t0, t1, t2] =
  t3 <- and((t2, t0))
  t4 <- primEq((t3, t1))
  if t4
    then bret[1]
    else bret[2]

-----------------------------------------
-- not recursive
fooD :: [Word, Word] >>= [Word]
fooD[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 1))
  if t3
    then b66[1, 0, t1]
    else b68[]

-----------------------------------------
-- not recursive
b80 :: [Word, Word, Word, Word] >>= [Word]
b80[t0, t1, t2, t3] =
  t4 <- and((t2, t0))
  t5 <- primEq((t4, t1))
  if t5
    then bret[0]
    else fooD[t3, t2]

-----------------------------------------
-- not recursive
entrypoint foo :: [Word, Word] >>= [Word]
foo[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 2))
  if t3
    then b80[1, 1, t1, t0]
    else fooD[t0, t1]

-----------------------------------------
-- not recursive
b59 :: [Word, Word, Word] >>= [Word]
b59[t0, t1, t2] =
  t3 <- and((t2, t0))
  t4 <- primNeq((t3, t1))
  if t4
    then bret[11]
    else bret[12]

-----------------------------------------
-- not recursive
b58 :: [] >>= [Word]
b58[] =
  return 11

-----------------------------------------
-- not recursive
barF :: [Word, Word] >>= [Word]
barF[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 1))
  if t3
    then b58[]
    else b59[1, 0, t1]

-----------------------------------------
-- not recursive
b79 :: [Word, Word, Word, Word] >>= [Word]
b79[t0, t1, t2, t3] =
  t4 <- and((t2, t0))
  t5 <- primNeq((t4, t1))
  if t5
    then bret[10]
    else barF[t3, t2]

-----------------------------------------
-- not recursive
entrypoint bar :: [Word, Word] >>= [Word]
bar[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 2))
  if t3
    then bret[10]
    else b79[1, 1, t1, t0]

-----------------------------------------
-- not recursive
b40 :: [Word, Word, Word] >>= [Word]
b40[t0, t1, t2] =
  t3 <- and((t2, t0))
  t4 <- primNeq((t3, t1))
  if t4
    then bret[23]
    else bret[24]

-----------------------------------------
-- not recursive
b39 :: [] >>= [Word]
b39[] =
  return 23

-----------------------------------------
-- not recursive
bazF :: [Word, Word] >>= [Word]
bazF[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 1))
  if t3
    then b39[]
    else b40[1, 0, t1]

-----------------------------------------
-- not recursive
b76 :: [Word, Word, Word, Word] >>= [Word]
b76[t0, t1, t2, t3] =
  t4 <- and((t2, t0))
  t5 <- primEq((t4, t1))
  if t5
    then bret[22]
    else bazF[t3, t2]

-----------------------------------------
-- not recursive
bazD :: [Word, Word] >>= [Word]
bazD[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 1))
  if t3
    then b76[1, 0, t1, t0]
    else bazF[t0, t1]

-----------------------------------------
-- not recursive
b77 :: [Word, Word, Word, Word] >>= [Word]
b77[t0, t1, t2, t3] =
  t4 <- and((t2, t0))
  t5 <- primNeq((t4, t1))
  if t5
    then bret[21]
    else bazD[t3, t2]

-----------------------------------------
-- not recursive
bazE :: [Word, Word] >>= [Word]
bazE[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 2))
  if t3
    then bret[21]
    else b77[1, 1, t1, t0]

-----------------------------------------
-- not recursive
b78 :: [Word, Word, Word, Word] >>= [Word]
b78[t0, t1, t2, t3] =
  t4 <- and((t2, t0))
  t5 <- primEq((t4, t1))
  if t5
    then bret[20]
    else bazE[t3, t2]

-----------------------------------------
-- not recursive
entrypoint baz :: [Word, Word] >>= [Word]
baz[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 2))
  if t3
    then b78[1, 1, t1, t0]
    else bazE[t0, t1]

-----------------------------------------
-- not recursive
quuxH :: [Word] >>= [Word]
quuxH[t0] =
  t1 <- and((t0, 7))
  t2 <- primEq((t1, 3))
  if t2
    then bret[31]
    else bret[32]

-----------------------------------------
-- not recursive
b75 :: [Word, Word, Word] >>= [Word]
b75[t0, t1, t2] =
  t3 <- and((t2, t0))
  t4 <- primEq((t3, t1))
  if t4
    then bret[30]
    else quuxH[t2]

-----------------------------------------
-- not recursive
entrypoint quux :: [Word, Word] >>= [Word]
quux[t0, t1] =
  t2 <- and((t0, 7))
  t3 <- primEq((t2, 3))
  if t3
    then b75[0, 0, t1]
    else quuxH[t1]

-----------------------------------------
-- Entrypoints: foo bar baz quux
