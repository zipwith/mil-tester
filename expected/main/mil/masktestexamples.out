-----------------------------------------
-- not recursive
b32 :: [] >>= [Word]
b32[] =
  return 2

-----------------------------------------
-- not recursive
b31 :: [] >>= [Word]
b31[] =
  return 1

-----------------------------------------
-- not recursive
b90 :: [Word] >>= [Word]
b90[t0] =
  t1 <- and((t0, 1))
  t2 <- primEq((t1, 0))
  if t2
    then b31[]
    else b32[]

-----------------------------------------
-- not recursive
fooD :: [Word, Word] >>= [Word]
fooD[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 1))
  if t3
    then b90[t1]
    else b32[]

-----------------------------------------
-- not recursive
b33 :: [] >>= [Word]
b33[] =
  return 0

-----------------------------------------
-- not recursive
b102 :: [Word, Word] >>= [Word]
b102[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primEq((t2, 1))
  if t3
    then b33[]
    else fooD[t1, t0]

-----------------------------------------
-- not recursive
entrypoint foo :: [Word, Word] >>= [Word]
foo[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 2))
  if t3
    then b102[t1, t0]
    else fooD[t0, t1]

-----------------------------------------
-- not recursive
b29 :: [] >>= [Word]
b29[] =
  return 12

-----------------------------------------
-- not recursive
b28 :: [] >>= [Word]
b28[] =
  return 11

-----------------------------------------
-- not recursive
b83 :: [Word] >>= [Word]
b83[t0] =
  t1 <- and((t0, 1))
  t2 <- primNeq((t1, 0))
  if t2
    then b28[]
    else b29[]

-----------------------------------------
-- not recursive
barF :: [Word, Word] >>= [Word]
barF[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 1))
  if t3
    then b28[]
    else b83[t1]

-----------------------------------------
-- not recursive
b30 :: [] >>= [Word]
b30[] =
  return 10

-----------------------------------------
-- not recursive
b101 :: [Word, Word] >>= [Word]
b101[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primNeq((t2, 1))
  if t3
    then b30[]
    else barF[t1, t0]

-----------------------------------------
-- not recursive
entrypoint bar :: [Word, Word] >>= [Word]
bar[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 2))
  if t3
    then b30[]
    else b101[t1, t0]

-----------------------------------------
-- not recursive
b18 :: [] >>= [Word]
b18[] =
  return 24

-----------------------------------------
-- not recursive
b17 :: [] >>= [Word]
b17[] =
  return 23

-----------------------------------------
-- not recursive
b64 :: [Word] >>= [Word]
b64[t0] =
  t1 <- and((t0, 1))
  t2 <- primNeq((t1, 0))
  if t2
    then b17[]
    else b18[]

-----------------------------------------
-- not recursive
bazF :: [Word, Word] >>= [Word]
bazF[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 1))
  if t3
    then b17[]
    else b64[t1]

-----------------------------------------
-- not recursive
b21 :: [] >>= [Word]
b21[] =
  return 22

-----------------------------------------
-- not recursive
b98 :: [Word, Word] >>= [Word]
b98[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primEq((t2, 0))
  if t3
    then b21[]
    else bazF[t1, t0]

-----------------------------------------
-- not recursive
bazD :: [Word, Word] >>= [Word]
bazD[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 1))
  if t3
    then b98[t1, t0]
    else bazF[t0, t1]

-----------------------------------------
-- not recursive
b24 :: [] >>= [Word]
b24[] =
  return 21

-----------------------------------------
-- not recursive
b99 :: [Word, Word] >>= [Word]
b99[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primNeq((t2, 1))
  if t3
    then b24[]
    else bazD[t1, t0]

-----------------------------------------
-- not recursive
bazE :: [Word, Word] >>= [Word]
bazE[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primNeq((t2, 2))
  if t3
    then b24[]
    else b99[t1, t0]

-----------------------------------------
-- not recursive
b27 :: [] >>= [Word]
b27[] =
  return 20

-----------------------------------------
-- not recursive
b100 :: [Word, Word] >>= [Word]
b100[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primEq((t2, 1))
  if t3
    then b27[]
    else bazE[t1, t0]

-----------------------------------------
-- not recursive
entrypoint baz :: [Word, Word] >>= [Word]
baz[t0, t1] =
  t2 <- and((t0, 3))
  t3 <- primEq((t2, 2))
  if t3
    then b100[t1, t0]
    else bazE[t0, t1]

-----------------------------------------
-- not recursive
quuxI :: [] >>= [Word]
quuxI[] =
  return 32

-----------------------------------------
-- not recursive
b11 :: [] >>= [Word]
b11[] =
  return 31

-----------------------------------------
-- not recursive
quuxH :: [Word] >>= [Word]
quuxH[t0] =
  t1 <- and((t0, 7))
  t2 <- primEq((t1, 3))
  if t2
    then b11[]
    else quuxI[]

-----------------------------------------
-- not recursive
b13 :: [] >>= [Word]
b13[] =
  return 30

-----------------------------------------
-- not recursive
entrypoint quux :: [Word, Word] >>= [Word]
quux[t0, t1] =
  t2 <- and((t0, 7))
  t3 <- primEq((t2, 3))
  if t3
    then b13[]
    else quuxH[t1]

-----------------------------------------
-- Entrypoints: foo bar baz quux
