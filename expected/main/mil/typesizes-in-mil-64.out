bitdata CNode /32
  = CNode [ ptr :: Bit 27 | radix :: Bit 5 ]
    -- predCNode(x :: Bit 32) = true

-- bit pattern:
--  ________________________________

bitdata Cap /64
  = NullCap [ X0000_0000_0000_0000 ]
    -- predNullCap(x :: Bit 64) = x == 0x0
  | CNodeCap [ cnode :: CNode | guard :: Guard | B0_0000_0001 ]
    -- predCNodeCap(x :: Bit 64) = (x & 0x1) == 0x1
  | OtherCap [ various :: Bit 62 | B10 ]
    -- predOtherCap(x :: Bit 64) = (x & 0x3) == 0x2

-- bit pattern:
--  000000000000000000000000000000000000000000000000000000000000000_
--  0000000000000000000000000000000000000000000000000000000000000010
--  0000000000000000000000000000000000000000000000000000000000000110
--  0000000000000000000000000000000000000000000000000000000000001_10
--  000000000000000000000000000000000000000000000000000000000001__10
--  00000000000000000000000000000000000000000000000000000000001___10
--  0000000000000000000000000000000000000000000000000000000001____10
--  000000000000000000000000000000000000000000000000000000001_____10
--  00000000000000000000000000000000000000000000000000000001______10
--  etc... (495 more lines)

struct CapSlot / 16
  [ cap :: Stored Cap  {- offset=0 -}
  | other :: Stored (Bit 64)  {- offset=8 -} ]
  aligned 8

bitdata Guard /23
  = Guard [ bits :: Bit 18 | size :: Bit 5 ]
    -- predGuard(x :: Bit 23) = true

-- bit pattern:
--  _______________________

-----------------------------------------
-- not recursive
entrypoint bt :: [] >>= [Bit 1]
bt[] =
  return B1

-----------------------------------------
-- not recursive
entrypoint bf :: [] >>= [Bit 1]
bf[] =
  return B0

-----------------------------------------
-- not recursive
entrypoint isNull :: [Cap] >>= [Bit 1]
isNull[t0] =
  case t0 of
    NullCap -> bt[]
    _ -> bf[]

-----------------------------------------
-- not recursive
export external a {b} :: Ref CapSlot

-----------------------------------------
-- Entrypoints: isNull a
