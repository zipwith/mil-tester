data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint rem2 :: [Word, Word] >>= [Word]
rem2[t0, t1] =
  rem((t0, t1))

-----------------------------------------
-- not recursive
entrypoint rem12 :: [Word, Word] >>= [Word]
rem12[t0, t1] =
  rem((t0, t1))

-----------------------------------------
-- not recursive
entrypoint rem32 :: [Word, Word] >>= [Word]
rem32[t0, t1] =
  rem((t0, t1))

-----------------------------------------
-- not recursive
entrypoint bit59 :: [Unit] >>= [Word]
bit59[t0] =
  return 59

-----------------------------------------
-- not recursive
entrypoint nz3 :: [Unit] >>= [Word]
nz3[t0] =
  return 3

-----------------------------------------
-- not recursive
entrypoint val :: Word
val <-
  return 2

-----------------------------------------
-- not recursive
entrypoint mod :: [Word] >>= [Word]
mod[t0] =
  and((t0, 15))

-----------------------------------------
-- Entrypoints: rem2 rem12 rem32 bit59 nz3 val mod
