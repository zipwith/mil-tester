data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint bitBit1 :: [Unit] >>= [Bit 1]
bitBit1[t0] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitBit2 :: [Bit 1] >>= [Bit 32]
bitBit2[t0] =
  t1 <- flagToWord((t0))
  shl((1, t1))

-----------------------------------------
-- not recursive
entrypoint bitBit12 :: [Bit 32] >>= [Bit 32]
bitBit12[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
b7 :: [Bit 32] >>= [Bit 32, Bit 32]
b7[t0] =
  t1 <- add((t0, -32))
  t2 <- shl((1, t1))
  return [0, t2]

-----------------------------------------
-- not recursive
b6 :: [Bit 32] >>= [Bit 32, Bit 32]
b6[t0] =
  t1 <- shl((1, t0))
  return [t1, 0]

-----------------------------------------
-- not recursive
entrypoint bitBit48 :: [Bit 32] >>= [Bit 32, Bit 32]
bitBit48[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b6[t0]
    else b7[t0]

-----------------------------------------
-- not recursive
entrypoint bitBit64 :: [Bit 32] >>= [Bit 32, Bit 32]
bitBit64[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b6[t0]
    else b7[t0]

-----------------------------------------
-- not recursive
b16 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b16[t0] =
  t1 <- add((t0, -96))
  t2 <- shl((1, t1))
  return [0, 0, 0, t2]

-----------------------------------------
-- not recursive
b15 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b15[t0] =
  t1 <- add((t0, -64))
  t2 <- shl((1, t1))
  return [0, 0, t2, 0]

-----------------------------------------
-- not recursive
b17 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b17[t0] =
  t1 <- primUlt((t0, 96))
  if t1
    then b15[t0]
    else b16[t0]

-----------------------------------------
-- not recursive
b13 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b13[t0] =
  t1 <- add((t0, -32))
  t2 <- shl((1, t1))
  return [0, t2, 0, 0]

-----------------------------------------
-- not recursive
b12 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b12[t0] =
  t1 <- shl((1, t0))
  return [t1, 0, 0, 0]

-----------------------------------------
-- not recursive
b14 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
b14[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b12[t0]
    else b13[t0]

-----------------------------------------
-- not recursive
entrypoint bitBit128 :: [Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
bitBit128[t0] =
  t1 <- primUlt((t0, 64))
  if t1
    then b14[t0]
    else b17[t0]

-----------------------------------------
-- not recursive
entrypoint bitSetBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitSetBit1[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitSetBit2 :: [Bit 32, Bit 1] >>= [Bit 32]
bitSetBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  or((t0, t3))

-----------------------------------------
-- not recursive
entrypoint bitSetBit12 :: [Bit 32, Bit 32] >>= [Bit 32]
bitSetBit12[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
b22 :: forall (a :: *). [a, Bit 32, Bit 32] >>= [a, Bit 32]
b22[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- or((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b21 :: forall (a :: *). [Bit 32, a, Bit 32] >>= [Bit 32, a]
b21[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- or((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitSetBit48 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitSetBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b21[t0, t1, t2]
    else b22[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitSetBit64 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitSetBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b21[t0, t1, t2]
    else b22[t0, t1, t2]

-----------------------------------------
-- not recursive
b31 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Bit 32, Bit 32] >>= [a, b, c, Bit 32]
b31[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- or((t6, t3))
  return [t0, t1, t2, t7]

-----------------------------------------
-- not recursive
b30 :: forall (a :: *) (b :: *) (c :: *). [a, b, Bit 32, c, Bit 32] >>= [a, b, Bit 32, c]
b30[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- or((t6, t2))
  return [t0, t1, t7, t3]

-----------------------------------------
-- not recursive
b32 :: forall (a :: *) (b :: *). [a, b, Bit 32, Bit 32, Bit 32] >>= [a, b, Bit 32, Bit 32]
b32[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b30[t0, t1, t2, t3, t4]
    else b31[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b28 :: forall (a :: *) (b :: *) (c :: *). [a, Bit 32, b, c, Bit 32] >>= [a, Bit 32, b, c]
b28[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- or((t6, t1))
  return [t0, t7, t2, t3]

-----------------------------------------
-- not recursive
b27 :: forall (a :: *) (b :: *) (c :: *). [Bit 32, a, b, c, Bit 32] >>= [Bit 32, a, b, c]
b27[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- or((t5, t0))
  return [t6, t1, t2, t3]

-----------------------------------------
-- not recursive
b29 :: forall (a :: *) (b :: *). [Bit 32, Bit 32, a, b, Bit 32] >>= [Bit 32, Bit 32, a, b]
b29[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b27[t0, t1, t2, t3, t4]
    else b28[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitSetBit128 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
bitSetBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b29[t0, t1, t2, t3, t4]
    else b32[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitClearBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitClearBit1[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint bitClearBit2 :: [Bit 32, Bit 1] >>= [Bit 32]
bitClearBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  t4 <- not((t3))
  and((t0, t4))

-----------------------------------------
-- not recursive
entrypoint bitClearBit12 :: [Bit 32, Bit 32] >>= [Bit 32]
bitClearBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
b37 :: forall (a :: *). [a, Bit 32, Bit 32] >>= [a, Bit 32]
b37[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- not((t4))
  t6 <- and((t5, t1))
  return [t0, t6]

-----------------------------------------
-- not recursive
b36 :: forall (a :: *). [Bit 32, a, Bit 32] >>= [Bit 32, a]
b36[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- not((t3))
  t5 <- and((t4, t0))
  return [t5, t1]

-----------------------------------------
-- not recursive
entrypoint bitClearBit48 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitClearBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b36[t0, t1, t2]
    else b37[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitClearBit64 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitClearBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b36[t0, t1, t2]
    else b37[t0, t1, t2]

-----------------------------------------
-- not recursive
b46 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Bit 32, Bit 32] >>= [a, b, c, Bit 32]
b46[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t3))
  return [t0, t1, t2, t8]

-----------------------------------------
-- not recursive
b45 :: forall (a :: *) (b :: *) (c :: *). [a, b, Bit 32, c, Bit 32] >>= [a, b, Bit 32, c]
b45[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t2))
  return [t0, t1, t8, t3]

-----------------------------------------
-- not recursive
b47 :: forall (a :: *) (b :: *). [a, b, Bit 32, Bit 32, Bit 32] >>= [a, b, Bit 32, Bit 32]
b47[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b45[t0, t1, t2, t3, t4]
    else b46[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b43 :: forall (a :: *) (b :: *) (c :: *). [a, Bit 32, b, c, Bit 32] >>= [a, Bit 32, b, c]
b43[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t1))
  return [t0, t8, t2, t3]

-----------------------------------------
-- not recursive
b42 :: forall (a :: *) (b :: *) (c :: *). [Bit 32, a, b, c, Bit 32] >>= [Bit 32, a, b, c]
b42[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- not((t5))
  t7 <- and((t6, t0))
  return [t7, t1, t2, t3]

-----------------------------------------
-- not recursive
b44 :: forall (a :: *) (b :: *). [Bit 32, Bit 32, a, b, Bit 32] >>= [Bit 32, Bit 32, a, b]
b44[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b42[t0, t1, t2, t3, t4]
    else b43[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitClearBit128 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
bitClearBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b44[t0, t1, t2, t3, t4]
    else b47[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitFlipBit1[t0, t1] =
  bnot((t0))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit2 :: [Bit 32, Bit 1] >>= [Bit 32]
bitFlipBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  xor((t0, t3))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit12 :: [Bit 32, Bit 32] >>= [Bit 32]
bitFlipBit12[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
b53 :: forall (a :: *). [a, Bit 32, Bit 32] >>= [a, Bit 32]
b53[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- xor((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b52 :: forall (a :: *). [Bit 32, a, Bit 32] >>= [Bit 32, a]
b52[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- xor((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit48 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitFlipBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b52[t0, t1, t2]
    else b53[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit64 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32]
bitFlipBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b52[t0, t1, t2]
    else b53[t0, t1, t2]

-----------------------------------------
-- not recursive
b62 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Bit 32, Bit 32] >>= [a, b, c, Bit 32]
b62[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t3))
  return [t0, t1, t2, t7]

-----------------------------------------
-- not recursive
b61 :: forall (a :: *) (b :: *) (c :: *). [a, b, Bit 32, c, Bit 32] >>= [a, b, Bit 32, c]
b61[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t2))
  return [t0, t1, t7, t3]

-----------------------------------------
-- not recursive
b63 :: forall (a :: *) (b :: *). [a, b, Bit 32, Bit 32, Bit 32] >>= [a, b, Bit 32, Bit 32]
b63[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b61[t0, t1, t2, t3, t4]
    else b62[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b59 :: forall (a :: *) (b :: *) (c :: *). [a, Bit 32, b, c, Bit 32] >>= [a, Bit 32, b, c]
b59[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t1))
  return [t0, t7, t2, t3]

-----------------------------------------
-- not recursive
b58 :: forall (a :: *) (b :: *) (c :: *). [Bit 32, a, b, c, Bit 32] >>= [Bit 32, a, b, c]
b58[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- xor((t5, t0))
  return [t6, t1, t2, t3]

-----------------------------------------
-- not recursive
b60 :: forall (a :: *) (b :: *). [Bit 32, Bit 32, a, b, Bit 32] >>= [Bit 32, Bit 32, a, b]
b60[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b58[t0, t1, t2, t3, t4]
    else b59[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit128 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32, Bit 32, Bit 32, Bit 32]
bitFlipBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b60[t0, t1, t2, t3, t4]
    else b63[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitTestBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitTestBit1[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
entrypoint bitTestBit2 :: [Bit 32, Bit 1] >>= [Bit 1]
bitTestBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  t4 <- and((t0, t3))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit12 :: [Bit 32, Bit 32] >>= [Bit 1]
bitTestBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
b69 :: [Bit 32, Bit 32] >>= [Bit 1]
b69[t0, t1] =
  t2 <- add((t1, -32))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit48 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 1]
bitTestBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then bitTestBit12[t0, t2]
    else b69[t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitTestBit64 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 1]
bitTestBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then bitTestBit12[t0, t2]
    else b69[t1, t2]

-----------------------------------------
-- not recursive
b78 :: [Bit 32, Bit 32] >>= [Bit 1]
b78[t0, t1] =
  t2 <- add((t1, -96))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
b77 :: [Bit 32, Bit 32] >>= [Bit 1]
b77[t0, t1] =
  t2 <- add((t1, -64))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
b79 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 1]
b79[t0, t1, t2] =
  t3 <- primUlt((t2, 96))
  if t3
    then b77[t0, t2]
    else b78[t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitTestBit128 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 1]
bitTestBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then bitTestBit48[t0, t1, t4]
    else b79[t2, t3, t4]

-----------------------------------------
-- not recursive
s3 :: Unit
s3 <-
  Unit()

-----------------------------------------
-- not recursive
entrypoint bitBitSize1 :: [Bit 1] >>= [Unit]
bitBitSize1[t0] =
  return s3

-----------------------------------------
-- not recursive
entrypoint bitBitSize2 :: [Bit 32] >>= [Bit 1]
bitBitSize2[t0] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitBitSize12 :: [Bit 32] >>= [Bit 32]
bitBitSize12[t0] =
  return 11

-----------------------------------------
-- not recursive
entrypoint bitBitSize48 :: [Bit 32, Bit 32] >>= [Bit 32]
bitBitSize48[t0, t1] =
  return 47

-----------------------------------------
-- not recursive
entrypoint bitBitSize64 :: [Bit 32, Bit 32] >>= [Bit 32]
bitBitSize64[t0, t1] =
  return 63

-----------------------------------------
-- not recursive
entrypoint bitBitSize128 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
bitBitSize128[t0, t1, t2, t3] =
  return 127

-----------------------------------------
-- Entrypoints: bitBit1 bitBit2 bitBit12 bitBit48 bitBit64 bitBit128 bitSetBit1 bitSetBit2 bitSetBit12 bitSetBit48 bitSetBit64 bitSetBit128 bitClearBit1 bitClearBit2 bitClearBit12 bitClearBit48 bitClearBit64 bitClearBit128 bitFlipBit1 bitFlipBit2 bitFlipBit12 bitFlipBit48 bitFlipBit64 bitFlipBit128 bitTestBit1 bitTestBit2 bitTestBit12 bitTestBit48 bitTestBit64 bitTestBit128 bitBitSize1 bitBitSize2 bitBitSize12 bitBitSize48 bitBitSize64 bitBitSize128
