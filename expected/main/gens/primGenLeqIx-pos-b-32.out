data Maybe0
  = Nothing0
  | Just1 Word

-----------------------------------------
-- not recursive
b9 :: forall (a :: *). [a] >>= [a]
b9[t0] =
  return t0

-----------------------------------------
-- not recursive
b8 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
b8[t0, t1] =
  t0 @ t1

-----------------------------------------
-- not recursive
entrypoint genLeqIxM1 :: [Maybe0, [Word] ->> [Maybe0], Word, Word] >>= [Maybe0]
genLeqIxM1[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxM7 :: [Maybe0, [Word] ->> [Maybe0], Word, Word] >>= [Maybe0]
genLeqIxM7[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxM64 :: [Maybe0, [Word] ->> [Maybe0], Word, Word] >>= [Maybe0]
genLeqIxM64[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
b33 :: [] >>= [Maybe0]
b33[] =
  return Nothing

-----------------------------------------
-- not recursive
b32 :: [Word] >>= [Maybe0]
b32[t0] =
  Just1(t0)

-----------------------------------------
-- not recursive
entrypoint leqIx1 :: [Word, Word] >>= [Maybe0]
leqIx1[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b32[t0]
    else b33[]

-----------------------------------------
-- not recursive
entrypoint leqIx7 :: [Word, Word] >>= [Maybe0]
leqIx7[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b32[t0]
    else b33[]

-----------------------------------------
-- not recursive
entrypoint leqIx64 :: [Word, Word] >>= [Maybe0]
leqIx64[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b32[t0]
    else b33[]

-----------------------------------------
-- Entrypoints: genLeqIxM1 genLeqIxM7 genLeqIxM64 leqIx1 leqIx7 leqIx64
