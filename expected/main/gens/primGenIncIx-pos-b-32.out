data Maybe0
  = Nothing0
  | Just1 Word

-----------------------------------------
-- not recursive
b9 :: forall (a :: *). [a] >>= [a]
b9[t0] =
  return t0

-----------------------------------------
-- not recursive
b8 :: forall (a :: tuple). [[Word] ->> a, Word] >>= a
b8[t0, t1] =
  t2 <- add((t1, 1))
  t0 @ t2

-----------------------------------------
-- not recursive
entrypoint genIncM1 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genIncM1[t0, t1, t2] =
  t3 <- primUlt((t2, 0))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genIncM7 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genIncM7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genIncM64 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genIncM64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
b30 :: [] >>= [Maybe0]
b30[] =
  return Nothing

-----------------------------------------
-- not recursive
b29 :: [Word] >>= [Maybe0]
b29[t0] =
  t1 <- add((t0, 1))
  Just1(t1)

-----------------------------------------
-- not recursive
entrypoint incIx1 :: [Word] >>= [Maybe0]
incIx1[t0] =
  t1 <- primUlt((t0, 0))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint incIx7 :: [Word] >>= [Maybe0]
incIx7[t0] =
  t1 <- primUlt((t0, 6))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint incIx64 :: [Word] >>= [Maybe0]
incIx64[t0] =
  t1 <- primUlt((t0, 63))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- Entrypoints: genIncM1 genIncM7 genIncM64 incIx1 incIx7 incIx64
