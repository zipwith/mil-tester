data Maybe0
  = Nothing0
  | Just1 Unit

data Maybe1
  = Nothing2
  | Just3 (Bit 32)

data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint genIncM1 :: [Maybe0, [Unit] ->> [Maybe0], Unit] >>= [Maybe0]
genIncM1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
b10 :: forall (a :: *). [a] >>= [a]
b10[t0] =
  return t0

-----------------------------------------
-- not recursive
b9 :: forall (a :: tuple). [[Bit 32] ->> a, Bit 32] >>= a
b9[t0, t1] =
  t2 <- add((t1, 1))
  t0 @ t2

-----------------------------------------
-- not recursive
entrypoint genIncM7 :: [Maybe1, [Bit 32] ->> [Maybe1], Bit 32] >>= [Maybe1]
genIncM7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b9[t1, t2]
    else b10[t0]

-----------------------------------------
-- not recursive
entrypoint genIncM64 :: [Maybe1, [Bit 32] ->> [Maybe1], Bit 32] >>= [Maybe1]
genIncM64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b9[t1, t2]
    else b10[t0]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
entrypoint incIx1 :: [Unit] >>= [Maybe0]
incIx1[t0] =
  return Nothing

-----------------------------------------
-- not recursive
s1 :: Maybe1
s1 <-
  Nothing2()

-----------------------------------------
-- not recursive
b28 :: [] >>= [Maybe1]
b28[] =
  return s1

-----------------------------------------
-- not recursive
b27 :: [Bit 32] >>= [Maybe1]
b27[t0] =
  t1 <- add((t0, 1))
  Just3(t1)

-----------------------------------------
-- not recursive
entrypoint incIx7 :: [Bit 32] >>= [Maybe1]
incIx7[t0] =
  t1 <- primUlt((t0, 6))
  if t1
    then b27[t0]
    else b28[]

-----------------------------------------
-- not recursive
entrypoint incIx64 :: [Bit 32] >>= [Maybe1]
incIx64[t0] =
  t1 <- primUlt((t0, 63))
  if t1
    then b27[t0]
    else b28[]

-----------------------------------------
-- Entrypoints: genIncM1 genIncM7 genIncM64 incIx1 incIx7 incIx64
