data Unit
  = Unit

-----------------------------------------
-- not recursive
s6 :: Unit
s6 <-
  Unit()

-----------------------------------------
-- not recursive
entrypoint ia1SW :: [[Unit] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia1SW[t0, t1] =
  t2 <- t0 @ s6
  t3 <- t2 @ t1
  return s6

-----------------------------------------
-- not recursive
entrypoint ia2SW :: [[Bit 1] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia2SW[t0, t1] =
  t2 <- t0 @ flag0
  t3 <- t2 @ t1
  t4 <- add((t1, 4))
  t5 <- t0 @ flag1
  t6 <- t5 @ t4
  return s6

-----------------------------------------
-- not recursive
entrypoint ia4SW :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia4SW[t0, t1] =
  t2 <- t0 @ 0
  t3 <- t2 @ t1
  t4 <- add((t1, 4))
  t5 <- t0 @ 1
  t6 <- t5 @ t4
  t7 <- add((t1, 8))
  t8 <- t0 @ 2
  t9 <- t8 @ t7
  t10 <- add((t1, 12))
  t11 <- t0 @ 3
  t12 <- t11 @ t10
  return s6

-----------------------------------------
-- not recursive
b30 :: [] >>= [Unit]
b30[] =
  return s6

-----------------------------------------
-- recursive
b32 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b32[t0, t1, t2] =
  t3 <- t0 @ t2
  t4 <- t3 @ t1
  t5 <- add((t2, 1))
  t6 <- add((t1, 4))
  b31[t0, t6, t5]
b31 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b31[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b32[t0, t1, t2]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint ia6SW :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia6SW[t0, t1] =
  b31[t0, t1, 0]

-----------------------------------------
-- recursive
b35 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b35[t0, t1, t2] =
  t3 <- t0 @ t2
  t4 <- t3 @ t1
  t5 <- add((t2, 1))
  t6 <- add((t1, 4))
  b34[t0, t6, t5]
b34 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b34[t0, t1, t2] =
  t3 <- primUlt((t2, 16))
  if t3
    then b35[t0, t1, t2]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint ia16SW :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia16SW[t0, t1] =
  b34[t0, t1, 0]

-----------------------------------------
-- not recursive
entrypoint cia1SW :: [Bit 32] >>= [Unit]
cia1SW[t0] =
  t1 <- store32((t0, 101))
  return s6

-----------------------------------------
-- not recursive
entrypoint cia2SW :: [Bit 32] >>= [Unit]
cia2SW[t0] =
  t1 <- store32((t0, 102))
  t2 <- add((t0, 4))
  t3 <- store32((t2, 102))
  return s6

-----------------------------------------
-- not recursive
entrypoint cia4SW :: [Bit 32] >>= [Unit]
cia4SW[t0] =
  t1 <- store32((t0, 104))
  t2 <- add((t0, 4))
  t3 <- store32((t2, 104))
  t4 <- add((t0, 8))
  t5 <- store32((t4, 104))
  t6 <- add((t0, 12))
  t7 <- store32((t6, 104))
  return s6

-----------------------------------------
-- recursive
b44 :: [Bit 32, Bit 32] >>= [Unit]
b44[t0, t1] =
  t2 <- store32((t0, 106))
  t3 <- add((t1, 1))
  t4 <- add((t0, 4))
  b43[t4, t3]
b43 :: [Bit 32, Bit 32] >>= [Unit]
b43[t0, t1] =
  t2 <- primUlt((t1, 6))
  if t2
    then b44[t0, t1]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint cia6SW :: [Bit 32] >>= [Unit]
cia6SW[t0] =
  b43[t0, 0]

-----------------------------------------
-- recursive
b46 :: [Bit 32, Bit 32] >>= [Unit]
b46[t0, t1] =
  t2 <- store32((t0, 116))
  t3 <- add((t1, 1))
  t4 <- add((t0, 4))
  b45[t4, t3]
b45 :: [Bit 32, Bit 32] >>= [Unit]
b45[t0, t1] =
  t2 <- primUlt((t1, 16))
  if t2
    then b46[t0, t1]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint cia16SW :: [Bit 32] >>= [Unit]
cia16SW[t0] =
  b45[t0, 0]

-----------------------------------------
-- not recursive
entrypoint ia3T :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia3T[t0, t1] =
  t2 <- t0 @ 0
  t3 <- t2 @ t1
  t4 <- add((t1, 12))
  t5 <- t0 @ 1
  t6 <- t5 @ t4
  t7 <- add((t1, 24))
  t8 <- t0 @ 2
  t9 <- t8 @ t7
  return s6

-----------------------------------------
-- recursive
b39 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b39[t0, t1, t2] =
  t3 <- t0 @ t2
  t4 <- t3 @ t1
  t5 <- add((t2, 1))
  t6 <- add((t1, 12))
  b38[t0, t6, t5]
b38 :: forall (a :: *). [[Bit 32] ->> [[Bit 32] ->> [a]], Bit 32, Bit 32] >>= [Unit]
b38[t0, t1, t2] =
  t3 <- primUlt((t2, 7))
  if t3
    then b39[t0, t1, t2]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint ia7T :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32] >>= [Unit]
ia7T[t0, t1] =
  b38[t0, t1, 0]

-----------------------------------------
-- Entrypoints: ia1SW ia2SW ia4SW ia6SW ia16SW cia1SW cia2SW cia4SW cia6SW cia16SW ia3T ia7T
