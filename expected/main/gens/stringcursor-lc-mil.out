data Unit
  = Unit

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b173 :: [] >>= [Unit]
b173[] =
  return Unit

-----------------------------------------
-- recursive
b214 :: [Word, Word] >>= [Unit]
b214[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- putchar((t0))
  t4 <- load8((t2))
  t5 <- primEq((t4, 0))
  if t5
    then b173[]
    else b214[t4, t2]

-----------------------------------------
-- not recursive
entrypoint puts :: [Word] >>= [Unit]
puts[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b173[]
    else b214[t1, t0]

-----------------------------------------
-- not recursive
b108 :: [Word] >>= [Word]
b108[t0] =
  return t0

-----------------------------------------
-- recursive
b222 :: [Word, Word, Word] >>= [Word]
b222[t0, t1, t2] =
  t3 <- add((t1, 1))
  b224[t0, t3, t2]
b224 :: [Word, Word, Word] >>= [Word]
b224[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b108[t3]
    else b222[t4, t1, t3]

-----------------------------------------
-- not recursive
b227 :: [Word, Word] >>= [Word]
b227[t0, t1] =
  t2 <- add((t1, 1))
  b224[t0, t2, 0]

-----------------------------------------
-- not recursive
b226 :: [] >>= [Word]
b226[] =
  return 0

-----------------------------------------
-- not recursive
entrypoint length :: [Word] >>= [Word]
length[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b226[]
    else b227[t1, t0]

-----------------------------------------
-- recursive
b230 :: [Word, Word, Word] >>= [Word]
b230[t0, t1, t2] =
  t3 <- add((t1, 1))
  b232[t0, t3, t2]
b232 :: [Word, Word, Word] >>= [Word]
b232[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b108[t3]
    else b230[t4, t1, t3]

-----------------------------------------
-- not recursive
b235 :: [Word, Word] >>= [Word]
b235[t0, t1] =
  t2 <- add((t1, 1))
  b232[t0, t2, 0]

-----------------------------------------
-- not recursive
entrypoint len2 :: [Word] >>= [Word]
len2[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b226[]
    else b235[t1, t0]

-----------------------------------------
-- not recursive
b961 :: [Unit] >>= [Unit]
b961[t0] =
  return t0

-----------------------------------------
-- recursive
b238 :: [Word, Word, Unit] >>= [Unit]
b238[t0, t1, t2] =
  t3 <- add((t1, 1))
  b240[t0, t3]
b240 :: [Word, Word] >>= [Unit]
b240[t0, t1] =
  t2 <- putchar((t0))
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b961[t2]
    else b238[t3, t1, t2]

-----------------------------------------
-- not recursive
b243 :: [Word, Word] >>= [Unit]
b243[t0, t1] =
  t2 <- add((t1, 1))
  b240[t0, t2]

-----------------------------------------
-- not recursive
entrypoint puts2 :: [Word] >>= [Unit]
puts2[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b173[]
    else b243[t1, t0]

-----------------------------------------
-- recursive
b246 :: [Word, Word, Word] >>= [Word]
b246[t0, t1, t2] =
  t3 <- add((t1, 1))
  b248[t0, t3, t2]
b248 :: [Word, Word, Word] >>= [Word]
b248[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b108[t3]
    else b246[t4, t1, t3]

-----------------------------------------
-- not recursive
b251 :: [Word, Word] >>= [Word]
b251[t0, t1] =
  t2 <- add((t1, 1))
  b248[t0, t2, 0]

-----------------------------------------
-- not recursive
entrypoint length1 :: [Word] >>= [Word]
length1[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b226[]
    else b251[t1, t0]

-----------------------------------------
-- Entrypoints: puts length len2 puts2 length1
