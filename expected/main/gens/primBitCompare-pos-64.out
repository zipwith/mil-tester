data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint eq32 :: [Bit 64, Bit 64] >>= [Bit 1]
eq32[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq48 :: [Bit 64, Bit 64] >>= [Bit 1]
eq48[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq64 :: [Bit 64, Bit 64] >>= [Bit 1]
eq64[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
returnFalse :: [] >>= [Bit 1]
returnFalse[] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint eq98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
eq98[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then eq32[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ne32 :: [Bit 64, Bit 64] >>= [Bit 1]
ne32[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne48 :: [Bit 64, Bit 64] >>= [Bit 1]
ne48[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne64 :: [Bit 64, Bit 64] >>= [Bit 1]
ne64[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
returnTrue :: [] >>= [Bit 1]
returnTrue[] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint ne98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
ne98[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ne32[t0, t2]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint gt32 :: [Bit 64, Bit 64] >>= [Bit 1]
gt32[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt48 :: [Bit 64, Bit 64] >>= [Bit 1]
gt48[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt64 :: [Bit 64, Bit 64] >>= [Bit 1]
gt64[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
b18 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
b18[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then gt32[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint gt98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
gt98[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b18[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint ge32 :: [Bit 64, Bit 64] >>= [Bit 1]
ge32[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge48 :: [Bit 64, Bit 64] >>= [Bit 1]
ge48[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge64 :: [Bit 64, Bit 64] >>= [Bit 1]
ge64[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
b24 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
b24[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ge32[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ge98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
ge98[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b24[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint lt32 :: [Bit 64, Bit 64] >>= [Bit 1]
lt32[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt48 :: [Bit 64, Bit 64] >>= [Bit 1]
lt48[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt64 :: [Bit 64, Bit 64] >>= [Bit 1]
lt64[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
b30 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
b30[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then lt32[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint lt98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
lt98[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b30[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint le32 :: [Bit 64, Bit 64] >>= [Bit 1]
le32[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le48 :: [Bit 64, Bit 64] >>= [Bit 1]
le48[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le64 :: [Bit 64, Bit 64] >>= [Bit 1]
le64[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
b36 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
b36[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then le32[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint le98 :: [Bit 64, Bit 64, Bit 64, Bit 64] >>= [Bit 1]
le98[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b36[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint sgt0 :: [Unit, Unit] >>= [Bit 1]
sgt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint sgt1 :: [Bit 1, Bit 1] >>= [Bit 1]
sgt1[t0, t1] =
  bgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sgt2 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt2[t0, t1] =
  t2 <- shl((t0, 62))
  t3 <- shl((t1, 62))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt15 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt15[t0, t1] =
  t2 <- shl((t0, 49))
  t3 <- shl((t1, 49))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt31 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt31[t0, t1] =
  t2 <- shl((t0, 33))
  t3 <- shl((t1, 33))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt32 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt32[t0, t1] =
  t2 <- shl((t0, 32))
  t3 <- shl((t1, 32))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt33 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt33[t0, t1] =
  t2 <- shl((t0, 31))
  t3 <- shl((t1, 31))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt48 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt48[t0, t1] =
  t2 <- shl((t0, 16))
  t3 <- shl((t1, 16))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt64 :: [Bit 64, Bit 64] >>= [Bit 1]
sgt64[t0, t1] =
  primSgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sge0 :: [Unit, Unit] >>= [Bit 1]
sge0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint sge1 :: [Bit 1, Bit 1] >>= [Bit 1]
sge1[t0, t1] =
  bge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sge2 :: [Bit 64, Bit 64] >>= [Bit 1]
sge2[t0, t1] =
  t2 <- shl((t0, 62))
  t3 <- shl((t1, 62))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge15 :: [Bit 64, Bit 64] >>= [Bit 1]
sge15[t0, t1] =
  t2 <- shl((t0, 49))
  t3 <- shl((t1, 49))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge31 :: [Bit 64, Bit 64] >>= [Bit 1]
sge31[t0, t1] =
  t2 <- shl((t0, 33))
  t3 <- shl((t1, 33))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge32 :: [Bit 64, Bit 64] >>= [Bit 1]
sge32[t0, t1] =
  t2 <- shl((t0, 32))
  t3 <- shl((t1, 32))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge33 :: [Bit 64, Bit 64] >>= [Bit 1]
sge33[t0, t1] =
  t2 <- shl((t0, 31))
  t3 <- shl((t1, 31))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge48 :: [Bit 64, Bit 64] >>= [Bit 1]
sge48[t0, t1] =
  t2 <- shl((t0, 16))
  t3 <- shl((t1, 16))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge64 :: [Bit 64, Bit 64] >>= [Bit 1]
sge64[t0, t1] =
  primSge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint slt0 :: [Unit, Unit] >>= [Bit 1]
slt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint slt1 :: [Bit 1, Bit 1] >>= [Bit 1]
slt1[t0, t1] =
  blt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint slt2 :: [Bit 64, Bit 64] >>= [Bit 1]
slt2[t0, t1] =
  t2 <- shl((t0, 62))
  t3 <- shl((t1, 62))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt15 :: [Bit 64, Bit 64] >>= [Bit 1]
slt15[t0, t1] =
  t2 <- shl((t0, 49))
  t3 <- shl((t1, 49))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt31 :: [Bit 64, Bit 64] >>= [Bit 1]
slt31[t0, t1] =
  t2 <- shl((t0, 33))
  t3 <- shl((t1, 33))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt32 :: [Bit 64, Bit 64] >>= [Bit 1]
slt32[t0, t1] =
  t2 <- shl((t0, 32))
  t3 <- shl((t1, 32))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt33 :: [Bit 64, Bit 64] >>= [Bit 1]
slt33[t0, t1] =
  t2 <- shl((t0, 31))
  t3 <- shl((t1, 31))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt48 :: [Bit 64, Bit 64] >>= [Bit 1]
slt48[t0, t1] =
  t2 <- shl((t0, 16))
  t3 <- shl((t1, 16))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt64 :: [Bit 64, Bit 64] >>= [Bit 1]
slt64[t0, t1] =
  primSlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sle0 :: [Unit, Unit] >>= [Bit 1]
sle0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint sle1 :: [Bit 1, Bit 1] >>= [Bit 1]
sle1[t0, t1] =
  ble((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sle2 :: [Bit 64, Bit 64] >>= [Bit 1]
sle2[t0, t1] =
  t2 <- shl((t0, 62))
  t3 <- shl((t1, 62))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle15 :: [Bit 64, Bit 64] >>= [Bit 1]
sle15[t0, t1] =
  t2 <- shl((t0, 49))
  t3 <- shl((t1, 49))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle31 :: [Bit 64, Bit 64] >>= [Bit 1]
sle31[t0, t1] =
  t2 <- shl((t0, 33))
  t3 <- shl((t1, 33))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle32 :: [Bit 64, Bit 64] >>= [Bit 1]
sle32[t0, t1] =
  t2 <- shl((t0, 32))
  t3 <- shl((t1, 32))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle33 :: [Bit 64, Bit 64] >>= [Bit 1]
sle33[t0, t1] =
  t2 <- shl((t0, 31))
  t3 <- shl((t1, 31))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle48 :: [Bit 64, Bit 64] >>= [Bit 1]
sle48[t0, t1] =
  t2 <- shl((t0, 16))
  t3 <- shl((t1, 16))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle64 :: [Bit 64, Bit 64] >>= [Bit 1]
sle64[t0, t1] =
  primSle((t0, t1))

-----------------------------------------
-- Entrypoints: eq32 eq48 eq64 eq98 ne32 ne48 ne64 ne98 gt32 gt48 gt64 gt98 ge32 ge48 ge64 ge98 lt32 lt48 lt64 lt98 le32 le48 le64 le98 sgt0 sgt1 sgt2 sgt15 sgt31 sgt32 sgt33 sgt48 sgt64 sge0 sge1 sge2 sge15 sge31 sge32 sge33 sge48 sge64 slt0 slt1 slt2 slt15 slt31 slt32 slt33 slt48 slt64 sle0 sle1 sle2 sle15 sle31 sle32 sle33 sle48 sle64
