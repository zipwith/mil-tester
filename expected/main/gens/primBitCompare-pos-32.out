data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint eq0 :: [Unit, Unit] >>= [Bit 1]
eq0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint eq1 :: [Bit 1, Bit 1] >>= [Bit 1]
eq1[t0, t1] =
  beq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq2 :: [Word, Word] >>= [Bit 1]
eq2[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq15 :: [Word, Word] >>= [Bit 1]
eq15[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq31 :: [Word, Word] >>= [Bit 1]
eq31[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint eq32 :: [Word, Word] >>= [Bit 1]
eq32[t0, t1] =
  primEq((t0, t1))

-----------------------------------------
-- not recursive
returnFalse :: [] >>= [Bit 1]
returnFalse[] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint eq33 :: [Word, Word, Word, Word] >>= [Bit 1]
eq33[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then eq2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint eq48 :: [Word, Word, Word, Word] >>= [Bit 1]
eq48[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then eq2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint eq64 :: [Word, Word, Word, Word] >>= [Bit 1]
eq64[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then eq2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint eq72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
eq72[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then eq33[t0, t1, t3, t4]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint eq98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
eq98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then eq72[t0, t1, t2, t4, t5, t6]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ne0 :: [Unit, Unit] >>= [Bit 1]
ne0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint ne1 :: [Bit 1, Bit 1] >>= [Bit 1]
ne1[t0, t1] =
  bxor((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne2 :: [Word, Word] >>= [Bit 1]
ne2[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne15 :: [Word, Word] >>= [Bit 1]
ne15[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne31 :: [Word, Word] >>= [Bit 1]
ne31[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ne32 :: [Word, Word] >>= [Bit 1]
ne32[t0, t1] =
  primNeq((t0, t1))

-----------------------------------------
-- not recursive
returnTrue :: [] >>= [Bit 1]
returnTrue[] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint ne33 :: [Word, Word, Word, Word] >>= [Bit 1]
ne33[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ne2[t0, t2]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint ne48 :: [Word, Word, Word, Word] >>= [Bit 1]
ne48[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ne2[t0, t2]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint ne64 :: [Word, Word, Word, Word] >>= [Bit 1]
ne64[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ne2[t0, t2]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint ne72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
ne72[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then ne33[t0, t1, t3, t4]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint ne98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
ne98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then ne72[t0, t1, t2, t4, t5, t6]
    else returnTrue[]

-----------------------------------------
-- not recursive
entrypoint gt0 :: [Unit, Unit] >>= [Bit 1]
gt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint gt1 :: [Bit 1, Bit 1] >>= [Bit 1]
gt1[t0, t1] =
  bgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt2 :: [Word, Word] >>= [Bit 1]
gt2[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt15 :: [Word, Word] >>= [Bit 1]
gt15[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt31 :: [Word, Word] >>= [Bit 1]
gt31[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint gt32 :: [Word, Word] >>= [Bit 1]
gt32[t0, t1] =
  primUgt((t0, t1))

-----------------------------------------
-- not recursive
b43 :: [Word, Word, Word, Word] >>= [Bit 1]
b43[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then gt2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint gt33 :: [Word, Word, Word, Word] >>= [Bit 1]
gt33[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b43[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint gt48 :: [Word, Word, Word, Word] >>= [Bit 1]
gt48[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b43[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint gt64 :: [Word, Word, Word, Word] >>= [Bit 1]
gt64[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b43[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b54 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b54[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then gt33[t0, t1, t3, t4]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint gt72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
gt72[t0, t1, t2, t3, t4, t5] =
  t6 <- primUgt((t2, t5))
  if t6
    then returnTrue[]
    else b54[t0, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b61 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b61[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then gt72[t0, t1, t2, t4, t5, t6]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint gt98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
gt98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUgt((t3, t7))
  if t8
    then returnTrue[]
    else b61[t0, t1, t2, t3, t4, t5, t6, t7]

-----------------------------------------
-- not recursive
entrypoint ge0 :: [Unit, Unit] >>= [Bit 1]
ge0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint ge1 :: [Bit 1, Bit 1] >>= [Bit 1]
ge1[t0, t1] =
  bge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge2 :: [Word, Word] >>= [Bit 1]
ge2[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge15 :: [Word, Word] >>= [Bit 1]
ge15[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge31 :: [Word, Word] >>= [Bit 1]
ge31[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint ge32 :: [Word, Word] >>= [Bit 1]
ge32[t0, t1] =
  primUge((t0, t1))

-----------------------------------------
-- not recursive
b68 :: [Word, Word, Word, Word] >>= [Bit 1]
b68[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then ge2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ge33 :: [Word, Word, Word, Word] >>= [Bit 1]
ge33[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b68[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint ge48 :: [Word, Word, Word, Word] >>= [Bit 1]
ge48[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b68[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint ge64 :: [Word, Word, Word, Word] >>= [Bit 1]
ge64[t0, t1, t2, t3] =
  t4 <- primUgt((t1, t3))
  if t4
    then returnTrue[]
    else b68[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b79 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b79[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then ge33[t0, t1, t3, t4]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ge72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
ge72[t0, t1, t2, t3, t4, t5] =
  t6 <- primUgt((t2, t5))
  if t6
    then returnTrue[]
    else b79[t0, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b86 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b86[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then ge72[t0, t1, t2, t4, t5, t6]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint ge98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
ge98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUgt((t3, t7))
  if t8
    then returnTrue[]
    else b86[t0, t1, t2, t3, t4, t5, t6, t7]

-----------------------------------------
-- not recursive
entrypoint lt0 :: [Unit, Unit] >>= [Bit 1]
lt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint lt1 :: [Bit 1, Bit 1] >>= [Bit 1]
lt1[t0, t1] =
  blt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt2 :: [Word, Word] >>= [Bit 1]
lt2[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt15 :: [Word, Word] >>= [Bit 1]
lt15[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt31 :: [Word, Word] >>= [Bit 1]
lt31[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint lt32 :: [Word, Word] >>= [Bit 1]
lt32[t0, t1] =
  primUlt((t0, t1))

-----------------------------------------
-- not recursive
b93 :: [Word, Word, Word, Word] >>= [Bit 1]
b93[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then lt2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint lt33 :: [Word, Word, Word, Word] >>= [Bit 1]
lt33[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b93[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint lt48 :: [Word, Word, Word, Word] >>= [Bit 1]
lt48[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b93[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint lt64 :: [Word, Word, Word, Word] >>= [Bit 1]
lt64[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b93[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b104 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b104[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then lt33[t0, t1, t3, t4]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint lt72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
lt72[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t2, t5))
  if t6
    then returnTrue[]
    else b104[t0, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b111 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b111[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then lt72[t0, t1, t2, t4, t5, t6]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint lt98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
lt98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t3, t7))
  if t8
    then returnTrue[]
    else b111[t0, t1, t2, t3, t4, t5, t6, t7]

-----------------------------------------
-- not recursive
entrypoint le0 :: [Unit, Unit] >>= [Bit 1]
le0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint le1 :: [Bit 1, Bit 1] >>= [Bit 1]
le1[t0, t1] =
  ble((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le2 :: [Word, Word] >>= [Bit 1]
le2[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le15 :: [Word, Word] >>= [Bit 1]
le15[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le31 :: [Word, Word] >>= [Bit 1]
le31[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
entrypoint le32 :: [Word, Word] >>= [Bit 1]
le32[t0, t1] =
  primUle((t0, t1))

-----------------------------------------
-- not recursive
b118 :: [Word, Word, Word, Word] >>= [Bit 1]
b118[t0, t1, t2, t3] =
  t4 <- primEq((t1, t3))
  if t4
    then le2[t0, t2]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint le33 :: [Word, Word, Word, Word] >>= [Bit 1]
le33[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b118[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint le48 :: [Word, Word, Word, Word] >>= [Bit 1]
le48[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b118[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
entrypoint le64 :: [Word, Word, Word, Word] >>= [Bit 1]
le64[t0, t1, t2, t3] =
  t4 <- primUlt((t1, t3))
  if t4
    then returnTrue[]
    else b118[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b129 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b129[t0, t1, t2, t3, t4, t5] =
  t6 <- primEq((t2, t5))
  if t6
    then le33[t0, t1, t3, t4]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint le72 :: [Word, Word, Word, Word, Word, Word] >>= [Bit 1]
le72[t0, t1, t2, t3, t4, t5] =
  t6 <- primUlt((t2, t5))
  if t6
    then returnTrue[]
    else b129[t0, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b136 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
b136[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primEq((t3, t7))
  if t8
    then le72[t0, t1, t2, t4, t5, t6]
    else returnFalse[]

-----------------------------------------
-- not recursive
entrypoint le98 :: [Word, Word, Word, Word, Word, Word, Word, Word] >>= [Bit 1]
le98[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- primUlt((t3, t7))
  if t8
    then returnTrue[]
    else b136[t0, t1, t2, t3, t4, t5, t6, t7]

-----------------------------------------
-- not recursive
entrypoint sgt0 :: [Unit, Unit] >>= [Bit 1]
sgt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint sgt1 :: [Bit 1, Bit 1] >>= [Bit 1]
sgt1[t0, t1] =
  bgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sgt2 :: [Word, Word] >>= [Bit 1]
sgt2[t0, t1] =
  t2 <- shl((t0, 30))
  t3 <- shl((t1, 30))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt15 :: [Word, Word] >>= [Bit 1]
sgt15[t0, t1] =
  t2 <- shl((t0, 17))
  t3 <- shl((t1, 17))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt31 :: [Word, Word] >>= [Bit 1]
sgt31[t0, t1] =
  t2 <- shl((t0, 1))
  t3 <- shl((t1, 1))
  primSgt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sgt32 :: [Word, Word] >>= [Bit 1]
sgt32[t0, t1] =
  primSgt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sge0 :: [Unit, Unit] >>= [Bit 1]
sge0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint sge1 :: [Bit 1, Bit 1] >>= [Bit 1]
sge1[t0, t1] =
  bge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sge2 :: [Word, Word] >>= [Bit 1]
sge2[t0, t1] =
  t2 <- shl((t0, 30))
  t3 <- shl((t1, 30))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge15 :: [Word, Word] >>= [Bit 1]
sge15[t0, t1] =
  t2 <- shl((t0, 17))
  t3 <- shl((t1, 17))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge31 :: [Word, Word] >>= [Bit 1]
sge31[t0, t1] =
  t2 <- shl((t0, 1))
  t3 <- shl((t1, 1))
  primSge((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sge32 :: [Word, Word] >>= [Bit 1]
sge32[t0, t1] =
  primSge((t0, t1))

-----------------------------------------
-- not recursive
entrypoint slt0 :: [Unit, Unit] >>= [Bit 1]
slt0[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint slt1 :: [Bit 1, Bit 1] >>= [Bit 1]
slt1[t0, t1] =
  blt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint slt2 :: [Word, Word] >>= [Bit 1]
slt2[t0, t1] =
  t2 <- shl((t0, 30))
  t3 <- shl((t1, 30))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt15 :: [Word, Word] >>= [Bit 1]
slt15[t0, t1] =
  t2 <- shl((t0, 17))
  t3 <- shl((t1, 17))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt31 :: [Word, Word] >>= [Bit 1]
slt31[t0, t1] =
  t2 <- shl((t0, 1))
  t3 <- shl((t1, 1))
  primSlt((t2, t3))

-----------------------------------------
-- not recursive
entrypoint slt32 :: [Word, Word] >>= [Bit 1]
slt32[t0, t1] =
  primSlt((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sle0 :: [Unit, Unit] >>= [Bit 1]
sle0[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint sle1 :: [Bit 1, Bit 1] >>= [Bit 1]
sle1[t0, t1] =
  ble((t0, t1))

-----------------------------------------
-- not recursive
entrypoint sle2 :: [Word, Word] >>= [Bit 1]
sle2[t0, t1] =
  t2 <- shl((t0, 30))
  t3 <- shl((t1, 30))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle15 :: [Word, Word] >>= [Bit 1]
sle15[t0, t1] =
  t2 <- shl((t0, 17))
  t3 <- shl((t1, 17))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle31 :: [Word, Word] >>= [Bit 1]
sle31[t0, t1] =
  t2 <- shl((t0, 1))
  t3 <- shl((t1, 1))
  primSle((t2, t3))

-----------------------------------------
-- not recursive
entrypoint sle32 :: [Word, Word] >>= [Bit 1]
sle32[t0, t1] =
  primSle((t0, t1))

-----------------------------------------
-- Entrypoints: eq0 eq1 eq2 eq15 eq31 eq32 eq33 eq48 eq64 eq72 eq98 ne0 ne1 ne2 ne15 ne31 ne32 ne33 ne48 ne64 ne72 ne98 gt0 gt1 gt2 gt15 gt31 gt32 gt33 gt48 gt64 gt72 gt98 ge0 ge1 ge2 ge15 ge31 ge32 ge33 ge48 ge64 ge72 ge98 lt0 lt1 lt2 lt15 lt31 lt32 lt33 lt48 lt64 lt72 lt98 le0 le1 le2 le15 le31 le32 le33 le48 le64 le72 le98 sgt0 sgt1 sgt2 sgt15 sgt31 sgt32 sge0 sge1 sge2 sge15 sge31 sge32 slt0 slt1 slt2 slt15 slt31 slt32 sle0 sle1 sle2 sle15 sle31 sle32
