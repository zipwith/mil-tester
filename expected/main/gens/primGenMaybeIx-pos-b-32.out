data Maybe0
  = Nothing0
  | Just1 Word

-----------------------------------------
-- not recursive
b9 :: forall (a :: *). [a] >>= [a]
b9[t0] =
  return t0

-----------------------------------------
-- not recursive
b8 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
b8[t0, t1] =
  t0 @ t1

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM1 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genMaybeIxM1[t0, t1, t2] =
  t3 <- primUle((t2, 0))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM7 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genMaybeIxM7[t0, t1, t2] =
  t3 <- primUle((t2, 6))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM64 :: [Maybe0, [Word] ->> [Maybe0], Word] >>= [Maybe0]
genMaybeIxM64[t0, t1, t2] =
  t3 <- primUle((t2, 63))
  if t3
    then b8[t1, t2]
    else b9[t0]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
b30 :: [] >>= [Maybe0]
b30[] =
  return Nothing

-----------------------------------------
-- not recursive
b29 :: [Word] >>= [Maybe0]
b29[t0] =
  Just1(t0)

-----------------------------------------
-- not recursive
entrypoint maybeIx1 :: [Word] >>= [Maybe0]
maybeIx1[t0] =
  t1 <- primUle((t0, 0))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint maybeIx7 :: [Word] >>= [Maybe0]
maybeIx7[t0] =
  t1 <- primUle((t0, 6))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- not recursive
entrypoint maybeIx64 :: [Word] >>= [Maybe0]
maybeIx64[t0] =
  t1 <- primUle((t0, 63))
  if t1
    then b29[t0]
    else b30[]

-----------------------------------------
-- Entrypoints: genMaybeIxM1 genMaybeIxM7 genMaybeIxM64 maybeIx1 maybeIx7 maybeIx64
