data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint genDecF1 :: [Bit 1, [Unit] ->> [Bit 1], Unit] >>= [Bit 1]
genDecF1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genDecW1 :: [Bit 32, [Unit] ->> [Bit 32], Unit] >>= [Bit 32]
genDecW1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genDecI1 :: [Unit, [Unit] ->> [Unit], Unit] >>= [Unit]
genDecI1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genDecB1 :: [Bit 32, Bit 32, [Unit] ->> [Bit 32, Bit 32], Unit] >>= [Bit 32, Bit 32]
genDecB1[t0, t1, t2, t3] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genDecM1 :: [Bit 1, [Unit] ->> [Bit 1], Unit] >>= [Bit 1]
genDecM1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
b31 :: forall (a :: *). [a] >>= [a]
b31[t0] =
  return t0

-----------------------------------------
-- not recursive
b30 :: forall (a :: tuple). [[Bit 1] ->> a] >>= a
b30[t0] =
  t0 @ flag0

-----------------------------------------
-- not recursive
entrypoint genDecF2 :: [Bit 1, [Bit 1] ->> [Bit 1], Bit 1] >>= [Bit 1]
genDecF2[t0, t1, t2] =
  if t2
    then b30[t1]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecW2 :: [Bit 32, [Bit 1] ->> [Bit 32], Bit 1] >>= [Bit 32]
genDecW2[t0, t1, t2] =
  if t2
    then b30[t1]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecI2 :: [Unit, [Bit 1] ->> [Unit], Bit 1] >>= [Unit]
genDecI2[t0, t1, t2] =
  if t2
    then b30[t1]
    else b31[t0]

-----------------------------------------
-- not recursive
b40 :: forall (a :: *) (b :: *). [a, b] >>= [a, b]
b40[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genDecB2 :: [Bit 32, Bit 32, [Bit 1] ->> [Bit 32, Bit 32], Bit 1] >>= [Bit 32, Bit 32]
genDecB2[t0, t1, t2, t3] =
  if t3
    then b30[t2]
    else b40[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genDecM2 :: [Bit 32, [Bit 1] ->> [Bit 32], Bit 1] >>= [Bit 32]
genDecM2[t0, t1, t2] =
  if t2
    then b30[t1]
    else b31[t0]

-----------------------------------------
-- not recursive
b45 :: forall (a :: tuple). [[Bit 32] ->> a, Bit 32] >>= a
b45[t0, t1] =
  t2 <- add((t1, -1))
  t0 @ t2

-----------------------------------------
-- not recursive
entrypoint genDecF7 :: [Bit 1, [Bit 32] ->> [Bit 1], Bit 32] >>= [Bit 1]
genDecF7[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecW7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecW7[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecI7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecI7[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecB7 :: [Bit 32, Bit 32, [Bit 32] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genDecB7[t0, t1, t2, t3] =
  t4 <- primUgt((t3, 0))
  if t4
    then b45[t2, t3]
    else b40[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genDecM7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecM7[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecF64 :: [Bit 1, [Bit 32] ->> [Bit 1], Bit 32] >>= [Bit 1]
genDecF64[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecW64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecW64[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecI64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecI64[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genDecB64 :: [Bit 32, Bit 32, [Bit 32] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genDecB64[t0, t1, t2, t3] =
  t4 <- primUgt((t3, 0))
  if t4
    then b45[t2, t3]
    else b40[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genDecM64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genDecM64[t0, t1, t2] =
  t3 <- primUgt((t2, 0))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint decIx1 :: [Unit] >>= [Bit 1]
decIx1[t0] =
  return flag0

-----------------------------------------
-- not recursive
b88 :: [] >>= [Bit 32]
b88[] =
  return 7

-----------------------------------------
-- not recursive
b87 :: [Bit 32] >>= [Bit 32]
b87[t0] =
  add((t0, -1))

-----------------------------------------
-- not recursive
entrypoint decIx7 :: [Bit 32] >>= [Bit 32]
decIx7[t0] =
  t1 <- primUgt((t0, 0))
  if t1
    then b87[t0]
    else b88[]

-----------------------------------------
-- not recursive
b90 :: [] >>= [Bit 32]
b90[] =
  return 0

-----------------------------------------
-- not recursive
b89 :: [Bit 32] >>= [Bit 32]
b89[t0] =
  t1 <- shl((t0, 1))
  t2 <- add((t1, -2))
  or((t2, 1))

-----------------------------------------
-- not recursive
entrypoint decIx64 :: [Bit 32] >>= [Bit 32]
decIx64[t0] =
  t1 <- primUgt((t0, 0))
  if t1
    then b89[t0]
    else b90[]

-----------------------------------------
-- Entrypoints: genDecF1 genDecW1 genDecI1 genDecB1 genDecM1 genDecF2 genDecW2 genDecI2 genDecB2 genDecM2 genDecF7 genDecW7 genDecI7 genDecB7 genDecM7 genDecF64 genDecW64 genDecI64 genDecB64 genDecM64 decIx1 decIx7 decIx64
