data Unit
  = Unit

-----------------------------------------
-- not recursive
s1 :: Unit
s1 <-
  Unit()

-----------------------------------------
-- not recursive
entrypoint nullLo0 :: [Unit] >>= [Unit]
nullLo0[t0] =
  return s1

-----------------------------------------
-- not recursive
entrypoint flagLo0 :: [Bit 1] >>= [Unit]
flagLo0[t0] =
  return s1

-----------------------------------------
-- not recursive
entrypoint flagLo1 :: [Bit 1] >>= [Bit 1]
flagLo1[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint byteLo0 :: [Bit 32] >>= [Unit]
byteLo0[t0] =
  return s1

-----------------------------------------
-- not recursive
entrypoint byteLo1 :: [Bit 32] >>= [Bit 1]
byteLo1[t0] =
  t1 <- and((t0, 1))
  primNeq((t1, 0))

-----------------------------------------
-- not recursive
entrypoint byteLo2 :: [Bit 32] >>= [Bit 32]
byteLo2[t0] =
  and((t0, 3))

-----------------------------------------
-- not recursive
entrypoint byteLo3 :: [Bit 32] >>= [Bit 32]
byteLo3[t0] =
  and((t0, 7))

-----------------------------------------
-- not recursive
entrypoint byteLo4 :: [Bit 32] >>= [Bit 32]
byteLo4[t0] =
  and((t0, 15))

-----------------------------------------
-- not recursive
entrypoint byteLo5 :: [Bit 32] >>= [Bit 32]
byteLo5[t0] =
  and((t0, 31))

-----------------------------------------
-- not recursive
entrypoint byteLo6 :: [Bit 32] >>= [Bit 32]
byteLo6[t0] =
  and((t0, 63))

-----------------------------------------
-- not recursive
entrypoint byteLo7 :: [Bit 32] >>= [Bit 32]
byteLo7[t0] =
  and((t0, 127))

-----------------------------------------
-- not recursive
entrypoint byteLo8 :: [Bit 32] >>= [Bit 32]
byteLo8[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint intLo0 :: [Bit 32] >>= [Unit]
intLo0[t0] =
  return s1

-----------------------------------------
-- not recursive
entrypoint intLo1 :: [Bit 32] >>= [Bit 1]
intLo1[t0] =
  t1 <- and((t0, 1))
  primNeq((t1, 0))

-----------------------------------------
-- not recursive
entrypoint intLo2 :: [Bit 32] >>= [Bit 32]
intLo2[t0] =
  and((t0, 3))

-----------------------------------------
-- not recursive
entrypoint intLo3 :: [Bit 32] >>= [Bit 32]
intLo3[t0] =
  and((t0, 7))

-----------------------------------------
-- not recursive
entrypoint intLo4 :: [Bit 32] >>= [Bit 32]
intLo4[t0] =
  and((t0, 15))

-----------------------------------------
-- not recursive
entrypoint intLo5 :: [Bit 32] >>= [Bit 32]
intLo5[t0] =
  and((t0, 31))

-----------------------------------------
-- not recursive
entrypoint intLo6 :: [Bit 32] >>= [Bit 32]
intLo6[t0] =
  and((t0, 63))

-----------------------------------------
-- not recursive
entrypoint intLo7 :: [Bit 32] >>= [Bit 32]
intLo7[t0] =
  and((t0, 127))

-----------------------------------------
-- not recursive
entrypoint intLo8 :: [Bit 32] >>= [Bit 32]
intLo8[t0] =
  and((t0, 255))

-----------------------------------------
-- not recursive
entrypoint intLo30 :: [Bit 32] >>= [Bit 32]
intLo30[t0] =
  and((t0, 1073741823))

-----------------------------------------
-- not recursive
entrypoint intLo31 :: [Bit 32] >>= [Bit 32]
intLo31[t0] =
  and((t0, 2147483647))

-----------------------------------------
-- not recursive
entrypoint intLo32 :: [Bit 32] >>= [Bit 32]
intLo32[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint midLo0 :: [Bit 32, Bit 32] >>= [Unit]
midLo0[t0, t1] =
  return s1

-----------------------------------------
-- not recursive
entrypoint midLo1 :: [Bit 32, Bit 32] >>= [Bit 1]
midLo1[t0, t1] =
  t2 <- and((t0, 1))
  primNeq((t2, 0))

-----------------------------------------
-- not recursive
entrypoint midLo2 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo2[t0, t1] =
  and((t0, 3))

-----------------------------------------
-- not recursive
entrypoint midLo4 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo4[t0, t1] =
  and((t0, 15))

-----------------------------------------
-- not recursive
entrypoint midLo9 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo9[t0, t1] =
  and((t0, 511))

-----------------------------------------
-- not recursive
entrypoint midLo16 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo16[t0, t1] =
  and((t0, 65535))

-----------------------------------------
-- not recursive
entrypoint midLo17 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo17[t0, t1] =
  and((t0, 131071))

-----------------------------------------
-- not recursive
entrypoint midLo18 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo18[t0, t1] =
  and((t0, 262143))

-----------------------------------------
-- not recursive
entrypoint midLo24 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo24[t0, t1] =
  and((t0, 16777215))

-----------------------------------------
-- not recursive
entrypoint midLo32 :: [Bit 32, Bit 32] >>= [Bit 32]
midLo32[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
entrypoint midLo40 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
midLo40[t0, t1] =
  t2 <- and((t1, 255))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint midLo47 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
midLo47[t0, t1] =
  t2 <- and((t1, 32767))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint midLo48 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
midLo48[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint longLo0 :: [Bit 32, Bit 32] >>= [Unit]
longLo0[t0, t1] =
  return s1

-----------------------------------------
-- not recursive
entrypoint longLo1 :: [Bit 32, Bit 32] >>= [Bit 1]
longLo1[t0, t1] =
  t2 <- and((t0, 1))
  primNeq((t2, 0))

-----------------------------------------
-- not recursive
entrypoint longLo2 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo2[t0, t1] =
  and((t0, 3))

-----------------------------------------
-- not recursive
entrypoint longLo4 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo4[t0, t1] =
  and((t0, 15))

-----------------------------------------
-- not recursive
entrypoint longLo9 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo9[t0, t1] =
  and((t0, 511))

-----------------------------------------
-- not recursive
entrypoint longLo16 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo16[t0, t1] =
  and((t0, 65535))

-----------------------------------------
-- not recursive
entrypoint longLo17 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo17[t0, t1] =
  and((t0, 131071))

-----------------------------------------
-- not recursive
entrypoint longLo18 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo18[t0, t1] =
  and((t0, 262143))

-----------------------------------------
-- not recursive
entrypoint longLo24 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo24[t0, t1] =
  and((t0, 16777215))

-----------------------------------------
-- not recursive
entrypoint longLo32 :: [Bit 32, Bit 32] >>= [Bit 32]
longLo32[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
entrypoint longLo40 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo40[t0, t1] =
  t2 <- and((t1, 255))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo47 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo47[t0, t1] =
  t2 <- and((t1, 32767))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo48 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo48[t0, t1] =
  t2 <- and((t1, 65535))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo54 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo54[t0, t1] =
  t2 <- and((t1, 4194303))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo60 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo60[t0, t1] =
  t2 <- and((t1, 268435455))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo62 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo62[t0, t1] =
  t2 <- and((t1, 1073741823))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo63 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo63[t0, t1] =
  t2 <- and((t1, 2147483647))
  return [t0, t2]

-----------------------------------------
-- not recursive
entrypoint longLo64 :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
longLo64[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- Entrypoints: nullLo0 flagLo0 flagLo1 byteLo0 byteLo1 byteLo2 byteLo3 byteLo4 byteLo5 byteLo6 byteLo7 byteLo8 intLo0 intLo1 intLo2 intLo3 intLo4 intLo5 intLo6 intLo7 intLo8 intLo30 intLo31 intLo32 midLo0 midLo1 midLo2 midLo4 midLo9 midLo16 midLo17 midLo18 midLo24 midLo32 midLo40 midLo47 midLo48 longLo0 longLo1 longLo2 longLo4 longLo9 longLo16 longLo17 longLo18 longLo24 longLo32 longLo40 longLo47 longLo48 longLo54 longLo60 longLo62 longLo63 longLo64
