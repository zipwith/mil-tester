data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint bitBit1 :: [Unit] >>= [Bit 1]
bitBit1[t0] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitBit2 :: [Bit 1] >>= [Bit 64]
bitBit2[t0] =
  t1 <- flagToWord((t0))
  shl((1, t1))

-----------------------------------------
-- not recursive
entrypoint bitBit12 :: [Bit 64] >>= [Bit 64]
bitBit12[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
entrypoint bitBit48 :: [Bit 64] >>= [Bit 64]
bitBit48[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
entrypoint bitBit64 :: [Bit 64] >>= [Bit 64]
bitBit64[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
b9 :: [Bit 64] >>= [Bit 64, Bit 64]
b9[t0] =
  t1 <- add((t0, -64))
  t2 <- shl((1, t1))
  return [0, t2]

-----------------------------------------
-- not recursive
b8 :: [Bit 64] >>= [Bit 64, Bit 64]
b8[t0] =
  t1 <- shl((1, t0))
  return [t1, 0]

-----------------------------------------
-- not recursive
entrypoint bitBit128 :: [Bit 64] >>= [Bit 64, Bit 64]
bitBit128[t0] =
  t1 <- primUlt((t0, 64))
  if t1
    then b8[t0]
    else b9[t0]

-----------------------------------------
-- not recursive
entrypoint bitSetBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitSetBit1[t0, t1] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitSetBit2 :: [Bit 64, Bit 1] >>= [Bit 64]
bitSetBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  or((t0, t3))

-----------------------------------------
-- not recursive
entrypoint bitSetBit12 :: [Bit 64, Bit 64] >>= [Bit 64]
bitSetBit12[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitSetBit48 :: [Bit 64, Bit 64] >>= [Bit 64]
bitSetBit48[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitSetBit64 :: [Bit 64, Bit 64] >>= [Bit 64]
bitSetBit64[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
b16 :: forall (a :: *). [a, Bit 64, Bit 64] >>= [a, Bit 64]
b16[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- shl((1, t3))
  t5 <- or((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b15 :: forall (a :: *). [Bit 64, a, Bit 64] >>= [Bit 64, a]
b15[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- or((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitSetBit128 :: [Bit 64, Bit 64, Bit 64] >>= [Bit 64, Bit 64]
bitSetBit128[t0, t1, t2] =
  t3 <- primUlt((t2, 64))
  if t3
    then b15[t0, t1, t2]
    else b16[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitClearBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitClearBit1[t0, t1] =
  return flag0

-----------------------------------------
-- not recursive
entrypoint bitClearBit2 :: [Bit 64, Bit 1] >>= [Bit 64]
bitClearBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  t4 <- not((t3))
  and((t0, t4))

-----------------------------------------
-- not recursive
entrypoint bitClearBit12 :: [Bit 64, Bit 64] >>= [Bit 64]
bitClearBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
entrypoint bitClearBit48 :: [Bit 64, Bit 64] >>= [Bit 64]
bitClearBit48[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
entrypoint bitClearBit64 :: [Bit 64, Bit 64] >>= [Bit 64]
bitClearBit64[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
b23 :: forall (a :: *). [a, Bit 64, Bit 64] >>= [a, Bit 64]
b23[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- shl((1, t3))
  t5 <- not((t4))
  t6 <- and((t5, t1))
  return [t0, t6]

-----------------------------------------
-- not recursive
b22 :: forall (a :: *). [Bit 64, a, Bit 64] >>= [Bit 64, a]
b22[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- not((t3))
  t5 <- and((t4, t0))
  return [t5, t1]

-----------------------------------------
-- not recursive
entrypoint bitClearBit128 :: [Bit 64, Bit 64, Bit 64] >>= [Bit 64, Bit 64]
bitClearBit128[t0, t1, t2] =
  t3 <- primUlt((t2, 64))
  if t3
    then b22[t0, t1, t2]
    else b23[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitFlipBit1[t0, t1] =
  bnot((t0))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit2 :: [Bit 64, Bit 1] >>= [Bit 64]
bitFlipBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  xor((t0, t3))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit12 :: [Bit 64, Bit 64] >>= [Bit 64]
bitFlipBit12[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit48 :: [Bit 64, Bit 64] >>= [Bit 64]
bitFlipBit48[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit64 :: [Bit 64, Bit 64] >>= [Bit 64]
bitFlipBit64[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
b31 :: forall (a :: *). [a, Bit 64, Bit 64] >>= [a, Bit 64]
b31[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- shl((1, t3))
  t5 <- xor((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b30 :: forall (a :: *). [Bit 64, a, Bit 64] >>= [Bit 64, a]
b30[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- xor((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit128 :: [Bit 64, Bit 64, Bit 64] >>= [Bit 64, Bit 64]
bitFlipBit128[t0, t1, t2] =
  t3 <- primUlt((t2, 64))
  if t3
    then b30[t0, t1, t2]
    else b31[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitTestBit1 :: [Bit 1, Unit] >>= [Bit 1]
bitTestBit1[t0, t1] =
  return t0

-----------------------------------------
-- not recursive
entrypoint bitTestBit2 :: [Bit 64, Bit 1] >>= [Bit 1]
bitTestBit2[t0, t1] =
  t2 <- flagToWord((t1))
  t3 <- shl((1, t2))
  t4 <- and((t0, t3))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit12 :: [Bit 64, Bit 64] >>= [Bit 1]
bitTestBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit48 :: [Bit 64, Bit 64] >>= [Bit 1]
bitTestBit48[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit64 :: [Bit 64, Bit 64] >>= [Bit 1]
bitTestBit64[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
b39 :: [Bit 64, Bit 64] >>= [Bit 1]
b39[t0, t1] =
  t2 <- add((t1, -64))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit128 :: [Bit 64, Bit 64, Bit 64] >>= [Bit 1]
bitTestBit128[t0, t1, t2] =
  t3 <- primUlt((t2, 64))
  if t3
    then bitTestBit12[t0, t2]
    else b39[t1, t2]

-----------------------------------------
-- not recursive
s3 :: Unit
s3 <-
  Unit()

-----------------------------------------
-- not recursive
entrypoint bitBitSize1 :: [Bit 1] >>= [Unit]
bitBitSize1[t0] =
  return s3

-----------------------------------------
-- not recursive
entrypoint bitBitSize2 :: [Bit 64] >>= [Bit 1]
bitBitSize2[t0] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint bitBitSize12 :: [Bit 64] >>= [Bit 64]
bitBitSize12[t0] =
  return 11

-----------------------------------------
-- not recursive
entrypoint bitBitSize48 :: [Bit 64] >>= [Bit 64]
bitBitSize48[t0] =
  return 47

-----------------------------------------
-- not recursive
entrypoint bitBitSize64 :: [Bit 64] >>= [Bit 64]
bitBitSize64[t0] =
  return 63

-----------------------------------------
-- not recursive
entrypoint bitBitSize128 :: [Bit 64, Bit 64] >>= [Bit 64]
bitBitSize128[t0, t1] =
  return 127

-----------------------------------------
-- Entrypoints: bitBit1 bitBit2 bitBit12 bitBit48 bitBit64 bitBit128 bitSetBit1 bitSetBit2 bitSetBit12 bitSetBit48 bitSetBit64 bitSetBit128 bitClearBit1 bitClearBit2 bitClearBit12 bitClearBit48 bitClearBit64 bitClearBit128 bitFlipBit1 bitFlipBit2 bitFlipBit12 bitFlipBit48 bitFlipBit64 bitFlipBit128 bitTestBit1 bitTestBit2 bitTestBit12 bitTestBit48 bitTestBit64 bitTestBit128 bitBitSize1 bitBitSize2 bitBitSize12 bitBitSize48 bitBitSize64 bitBitSize128
