data Unit
  = Unit

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b152 :: [] >>= [Unit]
b152[] =
  return Unit

-----------------------------------------
-- recursive
b193 :: [Word, Word] >>= [Unit]
b193[t0, t1] =
  t2 <- add((t1, 1))
  t3 <- putchar((t0))
  t4 <- load8((t2))
  t5 <- primEq((t4, 0))
  if t5
    then b152[]
    else b193[t4, t2]

-----------------------------------------
-- not recursive
entrypoint puts :: [Word] >>= [Unit]
puts[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b152[]
    else b193[t1, t0]

-----------------------------------------
-- not recursive
b101 :: [Word] >>= [Word]
b101[t0] =
  return t0

-----------------------------------------
-- recursive
b201 :: [Word, Word, Word] >>= [Word]
b201[t0, t1, t2] =
  t3 <- add((t1, 1))
  b203[t0, t3, t2]
b203 :: [Word, Word, Word] >>= [Word]
b203[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b101[t3]
    else b201[t4, t1, t3]

-----------------------------------------
-- not recursive
b206 :: [Word, Word] >>= [Word]
b206[t0, t1] =
  t2 <- add((t1, 1))
  b203[t0, t2, 0]

-----------------------------------------
-- not recursive
b205 :: [] >>= [Word]
b205[] =
  return 0

-----------------------------------------
-- not recursive
entrypoint length :: [Word] >>= [Word]
length[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b205[]
    else b206[t1, t0]

-----------------------------------------
-- recursive
b209 :: [Word, Word, Word] >>= [Word]
b209[t0, t1, t2] =
  t3 <- add((t1, 1))
  b211[t0, t3, t2]
b211 :: [Word, Word, Word] >>= [Word]
b211[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b101[t3]
    else b209[t4, t1, t3]

-----------------------------------------
-- not recursive
b214 :: [Word, Word] >>= [Word]
b214[t0, t1] =
  t2 <- add((t1, 1))
  b211[t0, t2, 0]

-----------------------------------------
-- not recursive
entrypoint len2 :: [Word] >>= [Word]
len2[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b205[]
    else b214[t1, t0]

-----------------------------------------
-- not recursive
b891 :: [Unit] >>= [Unit]
b891[t0] =
  return t0

-----------------------------------------
-- recursive
b217 :: [Word, Word, Unit] >>= [Unit]
b217[t0, t1, t2] =
  t3 <- add((t1, 1))
  b219[t0, t3]
b219 :: [Word, Word] >>= [Unit]
b219[t0, t1] =
  t2 <- putchar((t0))
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b891[t2]
    else b217[t3, t1, t2]

-----------------------------------------
-- not recursive
b222 :: [Word, Word] >>= [Unit]
b222[t0, t1] =
  t2 <- add((t1, 1))
  b219[t0, t2]

-----------------------------------------
-- not recursive
entrypoint puts2 :: [Word] >>= [Unit]
puts2[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b152[]
    else b222[t1, t0]

-----------------------------------------
-- recursive
b225 :: [Word, Word, Word] >>= [Word]
b225[t0, t1, t2] =
  t3 <- add((t1, 1))
  b227[t0, t3, t2]
b227 :: [Word, Word, Word] >>= [Word]
b227[t0, t1, t2] =
  t3 <- add((t2, 1))
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b101[t3]
    else b225[t4, t1, t3]

-----------------------------------------
-- not recursive
b230 :: [Word, Word] >>= [Word]
b230[t0, t1] =
  t2 <- add((t1, 1))
  b227[t0, t2, 0]

-----------------------------------------
-- not recursive
entrypoint length1 :: [Word] >>= [Word]
length1[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b205[]
    else b230[t1, t0]

-----------------------------------------
-- Entrypoints: puts length len2 puts2 length1
