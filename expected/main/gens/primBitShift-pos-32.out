-----------------------------------------
-- not recursive
entrypoint bitShiftL2 :: [Word, Word] >>= [Word]
bitShiftL2[t0, t1] =
  t2 <- shl((t0, t1))
  and((t2, 3))

-----------------------------------------
-- not recursive
entrypoint bitShiftL12 :: [Word, Word] >>= [Word]
bitShiftL12[t0, t1] =
  t2 <- shl((t0, t1))
  and((t2, 4095))

-----------------------------------------
-- not recursive
entrypoint bitShiftL32 :: [Word, Word] >>= [Word]
bitShiftL32[t0, t1] =
  shl((t0, t1))

-----------------------------------------
-- not recursive
b9 :: [Word, Word] >>= [Word, Word]
b9[t0, t1] =
  t2 <- add((t1, -32))
  t3 <- shl((t0, t2))
  t4 <- and((t3, 63))
  return [0, t4]

-----------------------------------------
-- not recursive
b8 :: [Word] >>= [Word, Word]
b8[t0] =
  t1 <- and((t0, 63))
  return [0, t1]

-----------------------------------------
-- not recursive
b10 :: [Word, Word] >>= [Word, Word]
b10[t0, t1] =
  t2 <- primEq((t1, 32))
  if t2
    then b8[t0]
    else b9[t0, t1]

-----------------------------------------
-- not recursive
b7 :: [Word, Word, Word] >>= [Word, Word]
b7[t0, t1, t2] =
  t3 <- sub((32, t2))
  t4 <- shl((t0, t2))
  t5 <- shl((t1, t2))
  t6 <- lshr((t0, t3))
  t7 <- or((t5, t6))
  t8 <- and((t7, 63))
  return [t4, t8]

-----------------------------------------
-- not recursive
entrypoint bitShiftL38 :: [Word, Word, Word] >>= [Word, Word]
bitShiftL38[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b7[t0, t1, t2]
    else b10[t0, t2]

-----------------------------------------
-- not recursive
b14 :: [Word, Word] >>= [Word, Word]
b14[t0, t1] =
  t2 <- add((t1, -32))
  t3 <- shl((t0, t2))
  return [0, t3]

-----------------------------------------
-- not recursive
b13 :: forall (a :: *). [a] >>= [Word, a]
b13[t0] =
  return [0, t0]

-----------------------------------------
-- not recursive
b15 :: [Word, Word] >>= [Word, Word]
b15[t0, t1] =
  t2 <- primEq((t1, 32))
  if t2
    then b13[t0]
    else b14[t0, t1]

-----------------------------------------
-- not recursive
b12 :: [Word, Word, Word] >>= [Word, Word]
b12[t0, t1, t2] =
  t3 <- sub((32, t2))
  t4 <- shl((t0, t2))
  t5 <- shl((t1, t2))
  t6 <- lshr((t0, t3))
  t7 <- or((t5, t6))
  return [t4, t7]

-----------------------------------------
-- not recursive
entrypoint bitShiftL64 :: [Word, Word, Word] >>= [Word, Word]
bitShiftL64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b12[t0, t1, t2]
    else b15[t0, t2]

-----------------------------------------
-- not recursive
b26 :: [Word, Word] >>= [Word, Word, Word, Word]
b26[t0, t1] =
  t2 <- add((t1, -96))
  t3 <- shl((t0, t2))
  t4 <- and((t3, 3))
  return [0, 0, 0, t4]

-----------------------------------------
-- not recursive
b25 :: [Word] >>= [Word, Word, Word, Word]
b25[t0] =
  t1 <- and((t0, 3))
  return [0, 0, 0, t1]

-----------------------------------------
-- not recursive
b27 :: [Word, Word] >>= [Word, Word, Word, Word]
b27[t0, t1] =
  t2 <- primEq((t1, 96))
  if t2
    then b25[t0]
    else b26[t0, t1]

-----------------------------------------
-- not recursive
b23 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b23[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- sub((96, t2))
  t5 <- shl((t0, t3))
  t6 <- shl((t1, t3))
  t7 <- lshr((t0, t4))
  t8 <- or((t6, t7))
  t9 <- and((t8, 3))
  return [0, 0, t5, t9]

-----------------------------------------
-- not recursive
b22 :: forall (a :: *). [a, Word] >>= [Word, Word, a, Word]
b22[t0, t1] =
  t2 <- and((t1, 3))
  return [0, 0, t0, t2]

-----------------------------------------
-- not recursive
b24 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b24[t0, t1, t2] =
  t3 <- primEq((t2, 64))
  if t3
    then b22[t0, t1]
    else b23[t0, t1, t2]

-----------------------------------------
-- not recursive
b28 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b28[t0, t1, t2] =
  t3 <- primUlt((t2, 96))
  if t3
    then b24[t0, t1, t2]
    else b27[t0, t2]

-----------------------------------------
-- not recursive
b19 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b19[t0, t1, t2, t3] =
  t4 <- add((t3, -32))
  t5 <- sub((64, t3))
  t6 <- shl((t0, t4))
  t7 <- shl((t2, t4))
  t8 <- lshr((t1, t5))
  t9 <- or((t7, t8))
  t10 <- shl((t1, t4))
  t11 <- lshr((t0, t5))
  t12 <- or((t10, t11))
  t13 <- and((t9, 3))
  return [0, t6, t12, t13]

-----------------------------------------
-- not recursive
b18 :: forall (a :: *) (b :: *). [a, b, Word] >>= [Word, a, b, Word]
b18[t0, t1, t2] =
  t3 <- and((t2, 3))
  return [0, t0, t1, t3]

-----------------------------------------
-- not recursive
b20 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b20[t0, t1, t2, t3] =
  t4 <- primEq((t3, 32))
  if t4
    then b18[t0, t1, t2]
    else b19[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b17 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b17[t0, t1, t2, t3, t4] =
  t5 <- sub((32, t4))
  t6 <- shl((t0, t4))
  t7 <- shl((t3, t4))
  t8 <- lshr((t2, t5))
  t9 <- or((t7, t8))
  t10 <- shl((t2, t4))
  t11 <- lshr((t1, t5))
  t12 <- or((t10, t11))
  t13 <- shl((t1, t4))
  t14 <- lshr((t0, t5))
  t15 <- or((t13, t14))
  t16 <- and((t9, 3))
  return [t6, t15, t12, t16]

-----------------------------------------
-- not recursive
b21 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b21[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b17[t0, t1, t2, t3, t4]
    else b20[t0, t1, t2, t4]

-----------------------------------------
-- not recursive
entrypoint bitShiftL98 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitShiftL98[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b21[t0, t1, t2, t3, t4]
    else b28[t0, t1, t4]

-----------------------------------------
-- not recursive
b39 :: [Word, Word] >>= [Word, Word, Word, Word]
b39[t0, t1] =
  t2 <- add((t1, -96))
  t3 <- shl((t0, t2))
  return [0, 0, 0, t3]

-----------------------------------------
-- not recursive
b38 :: forall (a :: *). [a] >>= [Word, Word, Word, a]
b38[t0] =
  return [0, 0, 0, t0]

-----------------------------------------
-- not recursive
b40 :: [Word, Word] >>= [Word, Word, Word, Word]
b40[t0, t1] =
  t2 <- primEq((t1, 96))
  if t2
    then b38[t0]
    else b39[t0, t1]

-----------------------------------------
-- not recursive
b36 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b36[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- sub((96, t2))
  t5 <- shl((t0, t3))
  t6 <- shl((t1, t3))
  t7 <- lshr((t0, t4))
  t8 <- or((t6, t7))
  return [0, 0, t5, t8]

-----------------------------------------
-- not recursive
b35 :: forall (a :: *) (b :: *). [a, b] >>= [Word, Word, a, b]
b35[t0, t1] =
  return [0, 0, t0, t1]

-----------------------------------------
-- not recursive
b37 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b37[t0, t1, t2] =
  t3 <- primEq((t2, 64))
  if t3
    then b35[t0, t1]
    else b36[t0, t1, t2]

-----------------------------------------
-- not recursive
b41 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b41[t0, t1, t2] =
  t3 <- primUlt((t2, 96))
  if t3
    then b37[t0, t1, t2]
    else b40[t0, t2]

-----------------------------------------
-- not recursive
b32 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b32[t0, t1, t2, t3] =
  t4 <- add((t3, -32))
  t5 <- sub((64, t3))
  t6 <- shl((t0, t4))
  t7 <- shl((t2, t4))
  t8 <- lshr((t1, t5))
  t9 <- or((t7, t8))
  t10 <- shl((t1, t4))
  t11 <- lshr((t0, t5))
  t12 <- or((t10, t11))
  return [0, t6, t12, t9]

-----------------------------------------
-- not recursive
b31 :: forall (a :: *) (b :: *) (c :: *). [a, b, c] >>= [Word, a, b, c]
b31[t0, t1, t2] =
  return [0, t0, t1, t2]

-----------------------------------------
-- not recursive
b33 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b33[t0, t1, t2, t3] =
  t4 <- primEq((t3, 32))
  if t4
    then b31[t0, t1, t2]
    else b32[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b30 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b30[t0, t1, t2, t3, t4] =
  t5 <- sub((32, t4))
  t6 <- shl((t0, t4))
  t7 <- shl((t3, t4))
  t8 <- lshr((t2, t5))
  t9 <- or((t7, t8))
  t10 <- shl((t2, t4))
  t11 <- lshr((t1, t5))
  t12 <- or((t10, t11))
  t13 <- shl((t1, t4))
  t14 <- lshr((t0, t5))
  t15 <- or((t13, t14))
  return [t6, t15, t12, t9]

-----------------------------------------
-- not recursive
b34 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b34[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b30[t0, t1, t2, t3, t4]
    else b33[t0, t1, t2, t4]

-----------------------------------------
-- not recursive
entrypoint bitShiftL128 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitShiftL128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b34[t0, t1, t2, t3, t4]
    else b41[t0, t1, t4]

-----------------------------------------
-- not recursive
entrypoint bitShiftRu2 :: [Word, Word] >>= [Word]
bitShiftRu2[t0, t1] =
  lshr((t0, t1))

-----------------------------------------
-- not recursive
entrypoint bitShiftRu12 :: [Word, Word] >>= [Word]
bitShiftRu12[t0, t1] =
  lshr((t0, t1))

-----------------------------------------
-- not recursive
entrypoint bitShiftRu32 :: [Word, Word] >>= [Word]
bitShiftRu32[t0, t1] =
  lshr((t0, t1))

-----------------------------------------
-- not recursive
b49 :: [Word, Word] >>= [Word, Word]
b49[t0, t1] =
  t2 <- add((t1, -32))
  t3 <- lshr((t0, t2))
  return [t3, 0]

-----------------------------------------
-- not recursive
b47 :: [Word, Word, Word] >>= [Word, Word]
b47[t0, t1, t2] =
  t3 <- sub((32, t2))
  t4 <- lshr((t1, t2))
  t5 <- shl((t1, t3))
  t6 <- lshr((t0, t2))
  t7 <- or((t5, t6))
  return [t7, t4]

-----------------------------------------
-- not recursive
b46 :: forall (a :: *) (b :: *). [a, b] >>= [a, b]
b46[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
b48 :: [Word, Word, Word] >>= [Word, Word]
b48[t0, t1, t2] =
  t3 <- primEq((t2, 0))
  if t3
    then b46[t0, t1]
    else b47[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitShiftRu38 :: [Word, Word, Word] >>= [Word, Word]
bitShiftRu38[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b48[t0, t1, t2]
    else b49[t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitShiftRu64 :: [Word, Word, Word] >>= [Word, Word]
bitShiftRu64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b48[t0, t1, t2]
    else b49[t1, t2]

-----------------------------------------
-- not recursive
b66 :: [Word, Word] >>= [Word, Word, Word, Word]
b66[t0, t1] =
  t2 <- add((t1, -96))
  t3 <- lshr((t0, t2))
  return [t3, 0, 0, 0]

-----------------------------------------
-- not recursive
b64 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b64[t0, t1, t2] =
  t3 <- add((t2, -64))
  t4 <- sub((96, t2))
  t5 <- lshr((t1, t3))
  t6 <- shl((t1, t4))
  t7 <- lshr((t0, t3))
  t8 <- or((t6, t7))
  return [t8, t5, 0, 0]

-----------------------------------------
-- not recursive
b63 :: forall (a :: *) (b :: *). [a, b] >>= [a, b, Word, Word]
b63[t0, t1] =
  return [t0, t1, 0, 0]

-----------------------------------------
-- not recursive
b65 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b65[t0, t1, t2] =
  t3 <- primEq((t2, 64))
  if t3
    then b63[t0, t1]
    else b64[t0, t1, t2]

-----------------------------------------
-- not recursive
b67 :: [Word, Word, Word] >>= [Word, Word, Word, Word]
b67[t0, t1, t2] =
  t3 <- primUlt((t2, 96))
  if t3
    then b65[t0, t1, t2]
    else b66[t1, t2]

-----------------------------------------
-- not recursive
b60 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b60[t0, t1, t2, t3] =
  t4 <- add((t3, -32))
  t5 <- sub((64, t3))
  t6 <- lshr((t2, t4))
  t7 <- shl((t2, t5))
  t8 <- lshr((t1, t4))
  t9 <- or((t7, t8))
  t10 <- shl((t1, t5))
  t11 <- lshr((t0, t4))
  t12 <- or((t10, t11))
  return [t12, t9, t6, 0]

-----------------------------------------
-- not recursive
b59 :: forall (a :: *) (b :: *) (c :: *). [a, b, c] >>= [a, b, c, Word]
b59[t0, t1, t2] =
  return [t0, t1, t2, 0]

-----------------------------------------
-- not recursive
b61 :: [Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b61[t0, t1, t2, t3] =
  t4 <- primEq((t3, 32))
  if t4
    then b59[t0, t1, t2]
    else b60[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b57 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b57[t0, t1, t2, t3, t4] =
  t5 <- sub((32, t4))
  t6 <- lshr((t3, t4))
  t7 <- shl((t3, t5))
  t8 <- lshr((t2, t4))
  t9 <- or((t7, t8))
  t10 <- shl((t2, t5))
  t11 <- lshr((t1, t4))
  t12 <- or((t10, t11))
  t13 <- shl((t1, t5))
  t14 <- lshr((t0, t4))
  t15 <- or((t13, t14))
  return [t15, t12, t9, t6]

-----------------------------------------
-- not recursive
b56 :: forall (a :: *) (b :: *) (c :: *) (d :: *). [a, b, c, d] >>= [a, b, c, d]
b56[t0, t1, t2, t3] =
  return [t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b58 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b58[t0, t1, t2, t3, t4] =
  t5 <- primEq((t4, 0))
  if t5
    then b56[t0, t1, t2, t3]
    else b57[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b62 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
b62[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b58[t0, t1, t2, t3, t4]
    else b61[t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitShiftRu98 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitShiftRu98[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b62[t0, t1, t2, t3, t4]
    else b67[t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitShiftRu128 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitShiftRu128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b62[t0, t1, t2, t3, t4]
    else b67[t2, t3, t4]

-----------------------------------------
-- Entrypoints: bitShiftL2 bitShiftL12 bitShiftL32 bitShiftL38 bitShiftL64 bitShiftL98 bitShiftL128 bitShiftRu2 bitShiftRu12 bitShiftRu32 bitShiftRu38 bitShiftRu64 bitShiftRu98 bitShiftRu128
