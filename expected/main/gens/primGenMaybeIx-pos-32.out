data Unit
  = Unit

-----------------------------------------
-- not recursive
b26 :: forall (a :: *). [a] >>= [a]
b26[t0] =
  return t0

-----------------------------------------
-- not recursive
s5 :: Unit
s5 <-
  Unit()

-----------------------------------------
-- not recursive
b25 :: forall (a :: tuple). [[Unit] ->> a] >>= a
b25[t0] =
  t0 @ s5

-----------------------------------------
-- not recursive
entrypoint genMaybeIxF1 :: [Bit 1, [Unit] ->> [Bit 1], Bit 32] >>= [Bit 1]
genMaybeIxF1[t0, t1, t2] =
  t3 <- primUle((t2, 1))
  if t3
    then b25[t1]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxW1 :: [Bit 32, [Unit] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxW1[t0, t1, t2] =
  t3 <- primUle((t2, 1))
  if t3
    then b25[t1]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxI1 :: [Unit, [Unit] ->> [Unit], Bit 32] >>= [Unit]
genMaybeIxI1[t0, t1, t2] =
  t3 <- primUle((t2, 1))
  if t3
    then b25[t1]
    else b26[t0]

-----------------------------------------
-- not recursive
b35 :: forall (a :: *) (b :: *). [a, b] >>= [a, b]
b35[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxB1 :: [Bit 32, Bit 32, [Unit] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genMaybeIxB1[t0, t1, t2, t3] =
  t4 <- primUle((t3, 1))
  if t4
    then b25[t2]
    else b35[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM1 :: [Bit 1, [Unit] ->> [Bit 1], Bit 32] >>= [Bit 1]
genMaybeIxM1[t0, t1, t2] =
  t3 <- primUle((t2, 1))
  if t3
    then b25[t1]
    else b26[t0]

-----------------------------------------
-- not recursive
b40 :: forall (a :: tuple). [[Bit 1] ->> a, Bit 32] >>= a
b40[t0, t1] =
  t2 <- wordToFlag((t1))
  t0 @ t2

-----------------------------------------
-- not recursive
entrypoint genMaybeIxF2 :: [Bit 1, [Bit 1] ->> [Bit 1], Bit 32] >>= [Bit 1]
genMaybeIxF2[t0, t1, t2] =
  t3 <- primUlt((t2, 2))
  if t3
    then b40[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxW2 :: [Bit 32, [Bit 1] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxW2[t0, t1, t2] =
  t3 <- primUlt((t2, 2))
  if t3
    then b40[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxI2 :: [Unit, [Bit 1] ->> [Unit], Bit 32] >>= [Unit]
genMaybeIxI2[t0, t1, t2] =
  t3 <- primUlt((t2, 2))
  if t3
    then b40[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxB2 :: [Bit 32, Bit 32, [Bit 1] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genMaybeIxB2[t0, t1, t2, t3] =
  t4 <- primUlt((t3, 2))
  if t4
    then b40[t2, t3]
    else b35[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM2 :: [Bit 32, [Bit 1] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxM2[t0, t1, t2] =
  t3 <- primUlt((t2, 2))
  if t3
    then b40[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
b55 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
b55[t0, t1] =
  t0 @ t1

-----------------------------------------
-- not recursive
entrypoint genMaybeIxF7 :: [Bit 1, [Bit 32] ->> [Bit 1], Bit 32] >>= [Bit 1]
genMaybeIxF7[t0, t1, t2] =
  t3 <- primUle((t2, 6))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxW7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxW7[t0, t1, t2] =
  t3 <- primUle((t2, 6))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxI7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxI7[t0, t1, t2] =
  t3 <- primUle((t2, 6))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxB7 :: [Bit 32, Bit 32, [Bit 32] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genMaybeIxB7[t0, t1, t2, t3] =
  t4 <- primUle((t3, 6))
  if t4
    then b55[t2, t3]
    else b35[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM7 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxM7[t0, t1, t2] =
  t3 <- primUle((t2, 6))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxF64 :: [Bit 1, [Bit 32] ->> [Bit 1], Bit 32] >>= [Bit 1]
genMaybeIxF64[t0, t1, t2] =
  t3 <- primUle((t2, 63))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxW64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxW64[t0, t1, t2] =
  t3 <- primUle((t2, 63))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxI64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxI64[t0, t1, t2] =
  t3 <- primUle((t2, 63))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxB64 :: [Bit 32, Bit 32, [Bit 32] ->> [Bit 32, Bit 32], Bit 32] >>= [Bit 32, Bit 32]
genMaybeIxB64[t0, t1, t2, t3] =
  t4 <- primUle((t3, 63))
  if t4
    then b55[t2, t3]
    else b35[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genMaybeIxM64 :: [Bit 32, [Bit 32] ->> [Bit 32], Bit 32] >>= [Bit 32]
genMaybeIxM64[t0, t1, t2] =
  t3 <- primUle((t2, 63))
  if t3
    then b55[t1, t2]
    else b26[t0]

-----------------------------------------
-- not recursive
entrypoint maybeIx1 :: [Bit 32] >>= [Bit 1]
maybeIx1[t0] =
  primUle((t0, 1))

-----------------------------------------
-- not recursive
b100 :: [] >>= [Bit 32]
b100[] =
  return 7

-----------------------------------------
-- not recursive
b99 :: forall (a :: *). [a] >>= [a]
b99[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint maybeIx7 :: [Bit 32] >>= [Bit 32]
maybeIx7[t0] =
  t1 <- primUle((t0, 6))
  if t1
    then b99[t0]
    else b100[]

-----------------------------------------
-- not recursive
b102 :: [] >>= [Bit 32]
b102[] =
  return 0

-----------------------------------------
-- not recursive
construct_Just7 :: [Bit 32] >>= [Bit 32]
construct_Just7[t0] =
  t1 <- shl((t0, 1))
  or((t1, 1))

-----------------------------------------
-- not recursive
entrypoint maybeIx64 :: [Bit 32] >>= [Bit 32]
maybeIx64[t0] =
  t1 <- primUle((t0, 63))
  if t1
    then construct_Just7[t0]
    else b102[]

-----------------------------------------
-- Entrypoints: genMaybeIxF1 genMaybeIxW1 genMaybeIxI1 genMaybeIxB1 genMaybeIxM1 genMaybeIxF2 genMaybeIxW2 genMaybeIxI2 genMaybeIxB2 genMaybeIxM2 genMaybeIxF7 genMaybeIxW7 genMaybeIxI7 genMaybeIxB7 genMaybeIxM7 genMaybeIxF64 genMaybeIxW64 genMaybeIxI64 genMaybeIxB64 genMaybeIxM64 maybeIx1 maybeIx7 maybeIx64
