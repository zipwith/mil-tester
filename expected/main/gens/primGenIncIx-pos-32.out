data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint genIncF1 :: [Flag, [Unit] ->> [Flag], Unit] >>= [Flag]
genIncF1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genIncW1 :: [Word, [Unit] ->> [Word], Unit] >>= [Word]
genIncW1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genIncI1 :: [Unit, [Unit] ->> [Unit], Unit] >>= [Unit]
genIncI1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genIncB1 :: [Word, Word, [Unit] ->> [Word, Word], Unit] >>= [Word, Word]
genIncB1[t0, t1, t2, t3] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genIncM1 :: [Flag, [Unit] ->> [Flag], Unit] >>= [Flag]
genIncM1[t0, t1, t2] =
  return t0

-----------------------------------------
-- not recursive
b30 :: forall (a :: tuple). [[Flag] ->> a] >>= a
b30[t0] =
  t0 @ flag1

-----------------------------------------
-- not recursive
b31 :: forall (a :: *). [a] >>= [a]
b31[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint genIncF2 :: [Flag, [Flag] ->> [Flag], Flag] >>= [Flag]
genIncF2[t0, t1, t2] =
  if t2
    then b31[t0]
    else b30[t1]

-----------------------------------------
-- not recursive
entrypoint genIncW2 :: [Word, [Flag] ->> [Word], Flag] >>= [Word]
genIncW2[t0, t1, t2] =
  if t2
    then b31[t0]
    else b30[t1]

-----------------------------------------
-- not recursive
entrypoint genIncI2 :: [Unit, [Flag] ->> [Unit], Flag] >>= [Unit]
genIncI2[t0, t1, t2] =
  if t2
    then b31[t0]
    else b30[t1]

-----------------------------------------
-- not recursive
b40 :: forall (a :: *) (b :: *). [a, b] >>= [a, b]
b40[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genIncB2 :: [Word, Word, [Flag] ->> [Word, Word], Flag] >>= [Word, Word]
genIncB2[t0, t1, t2, t3] =
  if t3
    then b40[t0, t1]
    else b30[t2]

-----------------------------------------
-- not recursive
entrypoint genIncM2 :: [Word, [Flag] ->> [Word], Flag] >>= [Word]
genIncM2[t0, t1, t2] =
  if t2
    then b31[t0]
    else b30[t1]

-----------------------------------------
-- not recursive
b45 :: forall (a :: tuple). [[Word] ->> a, Word] >>= a
b45[t0, t1] =
  t2 <- add((t1, 1))
  t0 @ t2

-----------------------------------------
-- not recursive
entrypoint genIncF7 :: [Flag, [Word] ->> [Flag], Word] >>= [Flag]
genIncF7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncW7 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncW7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncI7 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncI7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncB7 :: [Word, Word, [Word] ->> [Word, Word], Word] >>= [Word, Word]
genIncB7[t0, t1, t2, t3] =
  t4 <- primUlt((t3, 6))
  if t4
    then b45[t2, t3]
    else b40[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genIncM7 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncM7[t0, t1, t2] =
  t3 <- primUlt((t2, 6))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncF64 :: [Flag, [Word] ->> [Flag], Word] >>= [Flag]
genIncF64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncW64 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncW64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncI64 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncI64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint genIncB64 :: [Word, Word, [Word] ->> [Word, Word], Word] >>= [Word, Word]
genIncB64[t0, t1, t2, t3] =
  t4 <- primUlt((t3, 63))
  if t4
    then b45[t2, t3]
    else b40[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genIncM64 :: [Word, [Word] ->> [Word], Word] >>= [Word]
genIncM64[t0, t1, t2] =
  t3 <- primUlt((t2, 63))
  if t3
    then b45[t1, t2]
    else b31[t0]

-----------------------------------------
-- not recursive
entrypoint incIx1 :: [Unit] >>= [Flag]
incIx1[t0] =
  return flag0

-----------------------------------------
-- not recursive
b88 :: [] >>= [Word]
b88[] =
  return 7

-----------------------------------------
-- not recursive
b87 :: [Word] >>= [Word]
b87[t0] =
  add((t0, 1))

-----------------------------------------
-- not recursive
entrypoint incIx7 :: [Word] >>= [Word]
incIx7[t0] =
  t1 <- primUlt((t0, 6))
  if t1
    then b87[t0]
    else b88[]

-----------------------------------------
-- not recursive
b90 :: [] >>= [Word]
b90[] =
  return 0

-----------------------------------------
-- not recursive
b89 :: [Word] >>= [Word]
b89[t0] =
  t1 <- shl((t0, 1))
  t2 <- add((t1, 2))
  or((t2, 1))

-----------------------------------------
-- not recursive
entrypoint incIx64 :: [Word] >>= [Word]
incIx64[t0] =
  t1 <- primUlt((t0, 63))
  if t1
    then b89[t0]
    else b90[]

-----------------------------------------
-- Entrypoints: genIncF1 genIncW1 genIncI1 genIncB1 genIncM1 genIncF2 genIncW2 genIncI2 genIncB2 genIncM2 genIncF7 genIncW7 genIncI7 genIncB7 genIncM7 genIncF64 genIncW64 genIncI64 genIncB64 genIncM64 incIx1 incIx7 incIx64
