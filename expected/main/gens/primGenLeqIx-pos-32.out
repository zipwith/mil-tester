-----------------------------------------
-- not recursive
b22 :: forall (a :: *). [a] >>= [a]
b22[t0] =
  return t0

-----------------------------------------
-- not recursive
b21 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
b21[t0, t1] =
  t0 @ t1

-----------------------------------------
-- not recursive
entrypoint genLeqIxF1 :: [Flag, [Word] ->> [Flag], Word, Word] >>= [Flag]
genLeqIxF1[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxW1 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxW1[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxI1 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxI1[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
b31 :: forall (a :: *) (b :: *). [a, b] >>= [a, b]
b31[t0, t1] =
  return [t0, t1]

-----------------------------------------
-- not recursive
entrypoint genLeqIxB1 :: [Word, Word, [Word] ->> [Word, Word], Word, Word] >>= [Word, Word]
genLeqIxB1[t0, t1, t2, t3, t4] =
  t5 <- primUle((t3, t4))
  if t5
    then b21[t2, t3]
    else b31[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genLeqIxM1 :: [Flag, [Word] ->> [Flag], Word, Word] >>= [Flag]
genLeqIxM1[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxF7 :: [Flag, [Word] ->> [Flag], Word, Word] >>= [Flag]
genLeqIxF7[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxW7 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxW7[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxI7 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxI7[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxB7 :: [Word, Word, [Word] ->> [Word, Word], Word, Word] >>= [Word, Word]
genLeqIxB7[t0, t1, t2, t3, t4] =
  t5 <- primUle((t3, t4))
  if t5
    then b21[t2, t3]
    else b31[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genLeqIxM7 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxM7[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxF64 :: [Flag, [Word] ->> [Flag], Word, Word] >>= [Flag]
genLeqIxF64[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxW64 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxW64[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxI64 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxI64[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
entrypoint genLeqIxB64 :: [Word, Word, [Word] ->> [Word, Word], Word, Word] >>= [Word, Word]
genLeqIxB64[t0, t1, t2, t3, t4] =
  t5 <- primUle((t3, t4))
  if t5
    then b21[t2, t3]
    else b31[t0, t1]

-----------------------------------------
-- not recursive
entrypoint genLeqIxM64 :: [Word, [Word] ->> [Word], Word, Word] >>= [Word]
genLeqIxM64[t0, t1, t2, t3] =
  t4 <- primUle((t2, t3))
  if t4
    then b21[t1, t2]
    else b22[t0]

-----------------------------------------
-- not recursive
b82 :: [] >>= [Flag]
b82[] =
  return flag0

-----------------------------------------
-- not recursive
b81 :: forall (a :: *). [a] >>= [Flag]
b81[t0] =
  return flag1

-----------------------------------------
-- not recursive
entrypoint leqIx1 :: [Word, Word] >>= [Flag]
leqIx1[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b81[t0]
    else b82[]

-----------------------------------------
-- not recursive
b84 :: [] >>= [Word]
b84[] =
  return 7

-----------------------------------------
-- not recursive
b83 :: forall (a :: *). [a] >>= [a]
b83[t0] =
  return t0

-----------------------------------------
-- not recursive
entrypoint leqIx7 :: [Word, Word] >>= [Word]
leqIx7[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b83[t0]
    else b84[]

-----------------------------------------
-- not recursive
b86 :: [] >>= [Word]
b86[] =
  return 0

-----------------------------------------
-- not recursive
construct_Just5 :: [Word] >>= [Word]
construct_Just5[t0] =
  t1 <- shl((t0, 1))
  or((t1, 1))

-----------------------------------------
-- not recursive
entrypoint leqIx64 :: [Word, Word] >>= [Word]
leqIx64[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then construct_Just5[t0]
    else b86[]

-----------------------------------------
-- Entrypoints: genLeqIxF1 genLeqIxW1 genLeqIxI1 genLeqIxB1 genLeqIxM1 genLeqIxF7 genLeqIxW7 genLeqIxI7 genLeqIxB7 genLeqIxM7 genLeqIxF64 genLeqIxW64 genLeqIxI64 genLeqIxB64 genLeqIxM64 leqIx1 leqIx7 leqIx64
