bitdata ExB /64
  = ExB [ val :: Ptr (Stored (Bit 8)) ]
    -- predExB(x :: Bit 64) = true

-- bit pattern:
--  ________________________________________________________________

bitdata ExL /64
  = ExL [ val :: Ptr (Stored (Bit 64)) | B000 ]
    -- predExL(x :: Bit 64) = true

-- bit pattern:
--  _____________________________________________________________000

bitdata ExW /64
  = ExW [ val :: Ptr (Stored Word) | B000 ]
    -- predExW(x :: Bit 64) = true

-- bit pattern:
--  _____________________________________________________________000

-----------------------------------------
-- not recursive
b16 :: [ExL] >>= [Ptr (Stored (Bit 64))]
b16[t0] =
  t1 <- ExL 0 t0
  ExL.ExL 0 t1

-----------------------------------------
-- not recursive
k6 :: {} [ExL] ->> [Ptr (Stored (Bit 64))]
k6{} t0 = b16[t0]

-----------------------------------------
-- not recursive
entrypoint idexL :: [ExL] ->> [Ptr (Stored (Bit 64))]
idexL <-
  k6{}

-----------------------------------------
-- not recursive
b18 :: [ExB] >>= [Ptr (Stored (Bit 8))]
b18[t0] =
  t1 <- ExB 0 t0
  ExB.ExB 0 t1

-----------------------------------------
-- not recursive
k7 :: {} [ExB] ->> [Ptr (Stored (Bit 8))]
k7{} t0 = b18[t0]

-----------------------------------------
-- not recursive
entrypoint idexB :: [ExB] ->> [Ptr (Stored (Bit 8))]
idexB <-
  k7{}

-----------------------------------------
-- not recursive
b20 :: [ExW] >>= [Ptr (Stored Word)]
b20[t0] =
  t1 <- ExW 0 t0
  ExW.ExW 0 t1

-----------------------------------------
-- not recursive
k8 :: {} [ExW] ->> [Ptr (Stored Word)]
k8{} t0 = b20[t0]

-----------------------------------------
-- not recursive
entrypoint idexW :: [ExW] ->> [Ptr (Stored Word)]
idexW <-
  k8{}

-----------------------------------------
-- Entrypoints: idexL idexB idexW
