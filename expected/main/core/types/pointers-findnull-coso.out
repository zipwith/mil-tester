data Maybe0
  = Nothing0
  | Just1 (Ix 16)

data Unit
  = Unit

-----------------------------------------
-- not recursive
external zero16 {primIxFromLiteral 0 16} :: [Unit] ->> [Ix 16]

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
external at {primAt 16 (Stored (Ptr (Stored (Bit 32))))} :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] ->> [[Ix 16] ->> [Ref (Stored (Ptr (Stored (Bit 32))))]]

-----------------------------------------
-- not recursive
external get {primReadRefStored (Ptr (Stored (Bit 32)))} :: [Ref (Stored (Ptr (Stored (Bit 32))))] ->> [[] ->> [Ptr (Stored (Bit 32))]]

-----------------------------------------
-- not recursive
b82 :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32))))), Ix 16] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b82[t0, t1] =
  t2 <- at @ t0
  t3 <- t2 @ t1
  Ref(t3)

-----------------------------------------
-- not recursive
external genIncIx {primGenIncIx Maybe0 16} :: [Maybe0] ->> [[[Ix 16] ->> [Maybe0]] ->> [[Ix 16] ->> [Maybe0]]]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
k51 :: {} [Ix 16] ->> [Maybe0]
k51{} t0 = Just1(t0)

-----------------------------------------
-- not recursive
Just :: [Ix 16] ->> [Maybe0]
Just <-
  k51{}

-----------------------------------------
-- not recursive
Null :: Ptr (Stored (Ptr (Stored (Bit 32))))
Null <-
  Null()

-----------------------------------------
-- not recursive
b79 :: [] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b79[] =
  return Null

-----------------------------------------
-- recursive
b97 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b97[t0, t1] =
  t2 <- genIncIx @ Nothing
  t3 <- t2 @ Just
  t4 <- t3 @ t0
  case t4 of
    Just1 -> b100[t4, t1]
    Nothing0 -> b79[]
b100 :: [Maybe0, Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b100[t0, t1] =
  assert t0 Just1
  t2 <- Just1 0 t0
  b83[t2, t1]
b83 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b83[t0, t1] =
  t2 <- at @ t1
  t3 <- t2 @ t0
  t4 <- get @ t3
  t5 <- t4 @ []
  case t5 of
    Null -> b82[t1, t0]
    Ref -> b97[t0, t1]

-----------------------------------------
-- not recursive
k52 :: {Ref (Array 16 (Stored (Ptr (Stored (Bit 32))))), Ix 16} [] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]
k52{t0, t1} [] = b83[t1, t0]

-----------------------------------------
-- not recursive
b89 :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
b89[t0] =
  t1 <- zero16 @ Unit
  k52{t0, t1}

-----------------------------------------
-- not recursive
k55 :: {} [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
k55{} t0 = b89[t0]

-----------------------------------------
-- not recursive
entrypoint findNull :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
findNull <-
  k55{}

-----------------------------------------
-- Entrypoints: findNull
