data Maybe0
  = Nothing0
  | Just1 (Ix 16)

data Unit
  = Unit

-----------------------------------------
-- not recursive
external zero16 {primIxFromLiteral 0 16} :: [Unit] ->> [Ix 16]

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
external at {@ 16 (Stored (Ptr (Stored Word)))} :: [Ref (Array 16 (Stored (Ptr (Stored Word))))] ->> [[Ix 16] ->> [Ref (Stored (Ptr (Stored Word)))]]

-----------------------------------------
-- not recursive
external get {primReadRefStored (Ptr (Stored Word))} :: [Ref (Stored (Ptr (Stored Word)))] ->> [[] ->> [Ptr (Stored Word)]]

-----------------------------------------
-- not recursive
b70 :: [Ref (Array 16 (Stored (Ptr (Stored Word)))), Ix 16] >>= [Ptr (Stored (Ptr (Stored Word)))]
b70[t0, t1] =
  t2 <- at @ t0
  t3 <- t2 @ t1
  Ref(t3)

-----------------------------------------
-- not recursive
external genIncIx {primGenIncIx Maybe0 16} :: [Maybe0] ->> [[[Ix 16] ->> [Maybe0]] ->> [[Ix 16] ->> [Maybe0]]]

-----------------------------------------
-- not recursive
Nothing :: Maybe0
Nothing <-
  Nothing0()

-----------------------------------------
-- not recursive
k43 :: {} [Ix 16] ->> [Maybe0]
k43{} t0 = Just1(t0)

-----------------------------------------
-- not recursive
Just :: [Ix 16] ->> [Maybe0]
Just <-
  k43{}

-----------------------------------------
-- not recursive
Null :: Ptr (Stored (Ptr (Stored Word)))
Null <-
  Null()

-----------------------------------------
-- not recursive
b67 :: [] >>= [Ptr (Stored (Ptr (Stored Word)))]
b67[] =
  return Null

-----------------------------------------
-- recursive
b88 :: [Maybe0, Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b88[t0, t1] =
  assert t0 Just1
  t2 <- Just1 0 t0
  t3 <- at @ t1
  t4 <- t3 @ t2
  t5 <- get @ t4
  t6 <- t5 @ []
  case t6 of
    Null -> b70[t1, t2]
    Ref -> b85[t2, t1]
b85 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b85[t0, t1] =
  t2 <- genIncIx @ Nothing
  t3 <- t2 @ Just
  t4 <- t3 @ t0
  case t4 of
    Just1 -> b88[t4, t1]
    Nothing0 -> b67[]

-----------------------------------------
-- not recursive
b71 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b71[t0, t1] =
  t2 <- at @ t1
  t3 <- t2 @ t0
  t4 <- get @ t3
  t5 <- t4 @ []
  case t5 of
    Null -> b70[t1, t0]
    Ref -> b85[t0, t1]

-----------------------------------------
-- not recursive
k44 :: {Ref (Array 16 (Stored (Ptr (Stored Word)))), Ix 16} [] ->> [Ptr (Stored (Ptr (Stored Word)))]
k44{t0, t1} [] = b71[t1, t0]

-----------------------------------------
-- not recursive
b77 :: [Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
b77[t0] =
  t1 <- zero16 @ Unit
  k44{t0, t1}

-----------------------------------------
-- not recursive
k47 :: {} [Ref (Array 16 (Stored (Ptr (Stored Word))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
k47{} t0 = b77[t0]

-----------------------------------------
-- not recursive
entrypoint findNull :: [Ref (Array 16 (Stored (Ptr (Stored Word))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
findNull <-
  k47{}

-----------------------------------------
-- Entrypoints: findNull
