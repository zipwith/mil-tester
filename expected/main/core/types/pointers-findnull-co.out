data Maybe (a :: *)
  = Nothing
  | Just a

-----------------------------------------
-- not recursive
external zero16 {primIxFromLiteral 0 16} :: [ProxyNat 0] ->> [Ix 16]

-----------------------------------------
-- not recursive
external at {primAt n a} :: forall (n :: nat) (a :: area). [Ref (Array n a)] ->> [[Ix n] ->> [Ref a]]

-----------------------------------------
-- not recursive
external get {primReadRefStored a} :: forall (a :: *). [Ref (Stored a)] ->> [[] ->> [a]]

-----------------------------------------
-- not recursive
b82 :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32))))), Ix 16] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b82[t0, t1] =
  t2 <- at @ t0
  t3 <- t2 @ t1
  Ref(t3)

-----------------------------------------
-- not recursive
external genIncIx {primGenIncIx a b} :: forall (a :: *) (b :: nat). [a] ->> [[[Ix b] ->> [a]] ->> [[Ix b] ->> [a]]]

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
k51 :: forall (a :: *). {} [a] ->> [Maybe a]
k51{} t0 = Just(t0)

-----------------------------------------
-- not recursive
Just :: forall (a :: *). [a] ->> [Maybe a]
Just <-
  k51{}

-----------------------------------------
-- not recursive
Null :: forall (a :: area). Ptr a
Null <-
  Null()

-----------------------------------------
-- not recursive
b79 :: [] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b79[] =
  return Null

-----------------------------------------
-- recursive
b97 :: [Ptr (Stored (Bit 32)), Ix 16, Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b97[t0, t1, t2] =
  t3 <- genIncIx @ Nothing
  t4 <- t3 @ Just
  t5 <- t4 @ t1
  case t5 of
    Just -> b99[t5, t2]
    Nothing -> b79[]
b99 :: [Maybe (Ix 16), Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b99[t0, t1] =
  assert t0 Just
  t2 <- Just 0 t0
  b83[t2, t1]
b83 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [Ptr (Stored (Ptr (Stored (Bit 32))))]
b83[t0, t1] =
  t2 <- at @ t1
  t3 <- t2 @ t0
  t4 <- get @ t3
  t5 <- t4 @ []
  case t5 of
    Null -> b82[t1, t0]
    Ref -> b97[t5, t0, t1]

-----------------------------------------
-- not recursive
k52 :: {Ref (Array 16 (Stored (Ptr (Stored (Bit 32))))), Ix 16} [] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]
k52{t0, t1} [] = b83[t1, t0]

-----------------------------------------
-- not recursive
b89 :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] >>= [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
b89[t0] =
  t1 <- zero16 @ #0
  k52{t0, t1}

-----------------------------------------
-- not recursive
k55 :: {} [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
k55{} t0 = b89[t0]

-----------------------------------------
-- not recursive
entrypoint findNull :: [Ref (Array 16 (Stored (Ptr (Stored (Bit 32)))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored (Bit 32))))]]
findNull <-
  k55{}

-----------------------------------------
-- Entrypoints: findNull
