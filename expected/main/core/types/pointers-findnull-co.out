data Maybe (a :: *)
  = Nothing
  | Just a

data Unit
  = Unit

-----------------------------------------
-- not recursive
external zero16 {primIxFromLiteral 0 16} :: [Unit] ->> [Ix 16]

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
external at {@ n a} :: forall (n :: nat) (a :: area). [Ref (Array n a)] ->> [[Ix n] ->> [Ref a]]

-----------------------------------------
-- not recursive
external get {primReadRefStored a} :: forall (a :: *). [Ref (Stored a)] ->> [[] ->> [a]]

-----------------------------------------
-- not recursive
b82 :: [Ref (Array 16 (Stored (Ptr (Stored Word)))), Ix 16] >>= [Ptr (Stored (Ptr (Stored Word)))]
b82[t0, t1] =
  t2 <- at @ t0
  t3 <- t2 @ t1
  Ref(t3)

-----------------------------------------
-- not recursive
external genIncIx {primGenIncIx a b} :: forall (a :: *) (b :: nat). [a] ->> [[[Ix b] ->> [a]] ->> [[Ix b] ->> [a]]]

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
k51 :: forall (a :: *). {} [a] ->> [Maybe a]
k51{} t0 = Just(t0)

-----------------------------------------
-- not recursive
Just :: forall (a :: *). [a] ->> [Maybe a]
Just <-
  k51{}

-----------------------------------------
-- not recursive
Null :: forall (a :: area). Ptr a
Null <-
  Null()

-----------------------------------------
-- not recursive
b79 :: [] >>= [Ptr (Stored (Ptr (Stored Word)))]
b79[] =
  return Null

-----------------------------------------
-- recursive
b99 :: [Maybe (Ix 16), Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b99[t0, t1] =
  assert t0 Just
  t2 <- Just 0 t0
  t3 <- at @ t1
  t4 <- t3 @ t2
  t5 <- get @ t4
  t6 <- t5 @ []
  case t6 of
    Null -> b82[t1, t2]
    Ref -> b97[t2, t1]
b97 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b97[t0, t1] =
  t2 <- genIncIx @ Nothing
  t3 <- t2 @ Just
  t4 <- t3 @ t0
  case t4 of
    Just -> b99[t4, t1]
    Nothing -> b79[]

-----------------------------------------
-- not recursive
b83 :: [Ix 16, Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [Ptr (Stored (Ptr (Stored Word)))]
b83[t0, t1] =
  t2 <- at @ t1
  t3 <- t2 @ t0
  t4 <- get @ t3
  t5 <- t4 @ []
  case t5 of
    Null -> b82[t1, t0]
    Ref -> b97[t0, t1]

-----------------------------------------
-- not recursive
k52 :: {Ref (Array 16 (Stored (Ptr (Stored Word)))), Ix 16} [] ->> [Ptr (Stored (Ptr (Stored Word)))]
k52{t0, t1} [] = b83[t1, t0]

-----------------------------------------
-- not recursive
b89 :: [Ref (Array 16 (Stored (Ptr (Stored Word))))] >>= [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
b89[t0] =
  t1 <- zero16 @ Unit
  k52{t0, t1}

-----------------------------------------
-- not recursive
k55 :: {} [Ref (Array 16 (Stored (Ptr (Stored Word))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
k55{} t0 = b89[t0]

-----------------------------------------
-- not recursive
entrypoint findNull :: [Ref (Array 16 (Stored (Ptr (Stored Word))))] ->> [[] ->> [Ptr (Stored (Ptr (Stored Word)))]]
findNull <-
  k55{}

-----------------------------------------
-- Entrypoints: findNull
