data Maybe (a :: *)
  = Nothing
  | Just a

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
b79 :: forall (a :: area). [] >>= [Maybe (Ref a)]
b79[] =
  return Nothing

-----------------------------------------
-- not recursive
b82 :: forall (a :: area). [Ptr a] >>= [Maybe (Ref a)]
b82[t0] =
  assert t0 Ref
  t1 <- Ref 0 t0
  Just(t1)

-----------------------------------------
-- not recursive
b80 :: forall (a :: area). [Ptr a] >>= [Maybe (Ref a)]
b80[t0] =
  case t0 of
    Null -> b79[]
    Ref -> b82[t0]

-----------------------------------------
-- not recursive
k52 :: forall (a :: area). {} [Ptr a] ->> [Maybe (Ref a)]
k52{} t0 = b80[t0]

-----------------------------------------
-- not recursive
deref :: forall (a :: area). [Ptr a] ->> [Maybe (Ref a)]
deref <-
  k52{}

-----------------------------------------
-- not recursive
entrypoint derefSI :: [Ptr (Stored (Ix 256))] ->> [Maybe (Ref (Stored (Ix 256)))]
derefSI <-
  return deref

-----------------------------------------
-- not recursive
entrypoint derefSW :: [Ptr (Stored (Bit 32))] ->> [Maybe (Ref (Stored (Bit 32)))]
derefSW <-
  return deref

-----------------------------------------
-- Entrypoints: derefSI derefSW
