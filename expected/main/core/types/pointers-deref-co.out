data Maybe (a :: *)
  = Nothing
  | Just a

-----------------------------------------
-- not recursive
Nothing :: forall (a :: *). Maybe a
Nothing <-
  Nothing()

-----------------------------------------
-- not recursive
b67 :: forall (a :: area). [] >>= [Maybe (Ref a)]
b67[] =
  return Nothing

-----------------------------------------
-- not recursive
b70 :: forall (a :: area). [Ptr a] >>= [Maybe (Ref a)]
b70[t0] =
  assert t0 Ref
  t1 <- Ref 0 t0
  Just(t1)

-----------------------------------------
-- not recursive
b68 :: forall (a :: area). [Ptr a] >>= [Maybe (Ref a)]
b68[t0] =
  case t0 of
    Null -> b67[]
    Ref -> b70[t0]

-----------------------------------------
-- not recursive
k44 :: forall (a :: area). {} [Ptr a] ->> [Maybe (Ref a)]
k44{} t0 = b68[t0]

-----------------------------------------
-- not recursive
deref :: forall (a :: area). [Ptr a] ->> [Maybe (Ref a)]
deref <-
  k44{}

-----------------------------------------
-- not recursive
entrypoint derefSI :: [Ptr (Stored (Ix 256))] ->> [Maybe (Ref (Stored (Ix 256)))]
derefSI <-
  return deref

-----------------------------------------
-- not recursive
entrypoint derefSW :: [Ptr (Stored Word)] ->> [Maybe (Ref (Stored Word))]
derefSW <-
  return deref

-----------------------------------------
-- Entrypoints: derefSI derefSW
