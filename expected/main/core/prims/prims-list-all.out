Primitives: -----------------------------
primitive not pure :: [Word] >>= [Word]
primitive and pure :: [Word, Word] >>= [Word]
primitive or pure :: [Word, Word] >>= [Word]
primitive xor pure :: [Word, Word] >>= [Word]
primitive bnot pure :: [Flag] >>= [Flag]
primitive band pure :: [Flag, Flag] >>= [Flag]
primitive bor pure :: [Flag, Flag] >>= [Flag]
primitive bxor pure :: [Flag, Flag] >>= [Flag]
primitive beq pure :: [Flag, Flag] >>= [Flag]
primitive blt pure :: [Flag, Flag] >>= [Flag]
primitive ble pure :: [Flag, Flag] >>= [Flag]
primitive bgt pure :: [Flag, Flag] >>= [Flag]
primitive bge pure :: [Flag, Flag] >>= [Flag]
primitive shl pure :: [Word, Word] >>= [Word]
primitive lshr pure :: [Word, Word] >>= [Word]
primitive ashr pure :: [Word, Word] >>= [Word]
primitive neg pure :: [Word] >>= [Word]
primitive add pure :: [Word, Word] >>= [Word]
primitive sub pure :: [Word, Word] >>= [Word]
primitive mul pure :: [Word, Word] >>= [Word]
primitive div impure :: [Word, Word] >>= [Word]
primitive rem impure :: [Word, Word] >>= [Word]
primitive nzdiv pure :: [Word, NZWord] >>= [Word]
primitive nzrem pure :: [Word, NZWord] >>= [Word]
primitive primEq pure :: [Word, Word] >>= [Flag]
primitive primNeq pure :: [Word, Word] >>= [Flag]
primitive primSlt pure :: [Word, Word] >>= [Flag]
primitive primSle pure :: [Word, Word] >>= [Flag]
primitive primSgt pure :: [Word, Word] >>= [Flag]
primitive primSge pure :: [Word, Word] >>= [Flag]
primitive primUlt pure :: [Word, Word] >>= [Flag]
primitive primUle pure :: [Word, Word] >>= [Flag]
primitive primUgt pure :: [Word, Word] >>= [Flag]
primitive primUge pure :: [Word, Word] >>= [Flag]
primitive flagToWord pure :: [Flag] >>= [Word]
primitive wordToFlag pure :: [Word] >>= [Flag]
primitive halt doesntReturn :: forall (a :: tuple). [] >>= a
primitive loop doesntReturn :: forall (a :: tuple). [] >>= a
primitive printWord impure :: [Word] >>= []
primitive noinline impure :: [] >>= []
primitive load1 impure :: [Addr] >>= [Bit 1]
primitive load8 impure :: [Addr] >>= [Bit 8]
primitive load16 impure :: [Addr] >>= [Bit 16]
primitive load32 impure :: [Addr] >>= [Bit 32]
primitive load64 impure :: [Addr] >>= [Bit 64]
primitive store1 impure :: [Addr, Bit 1] >>= [Unit]
primitive store8 impure :: [Addr, Bit 8] >>= [Unit]
primitive store16 impure :: [Addr, Bit 16] >>= [Unit]
primitive store32 impure :: [Addr, Bit 32] >>= [Unit]
primitive store64 impure :: [Addr, Bit 64] >>= [Unit]
primitive primInitSeq pure :: forall (a :: area). [Init a, Init a] >>= [Init a]
primitive primInitSelf pure :: forall (a :: area). [[Ref a] ->> [Init a]] >>= [Init a]
primitive primReInit impure :: forall (a :: area). [Ref a, Init a] >>= []
53 primitives listed
-----------------------------------------
