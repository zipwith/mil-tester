data Unit
  = Unit

-----------------------------------------
-- not recursive
entrypoint aPDE :: Word
aPDE <-
  return 0

-----------------------------------------
-- not recursive
entrypoint isMapped :: [Word] >>= [Flag]
isMapped[t0] =
  t1 <- and((t0, 1))
  primNeq((t1, 0))

-----------------------------------------
-- not recursive
entrypoint isMapped1 :: [Word] >>= [Flag]
isMapped1[t0] =
  t1 <- and((t0, 1))
  primNeq((t1, 0))

-----------------------------------------
-- not recursive
b102 :: forall (a :: *). [a] >>= [Unit]
b102[t0] =
  a(())

-----------------------------------------
-- not recursive
b101 :: [] >>= [Unit]
b101[] =
  b(())

-----------------------------------------
-- not recursive
entrypoint usecase :: [Word] >>= [Unit]
usecase[t0] =
  t1 <- and((t0, 1))
  t2 <- primEq((t1, 0))
  if t2
    then b101[]
    else b102[t0]

-----------------------------------------
-- not recursive
b104 :: [] >>= [Unit]
b104[] =
  a(())

-----------------------------------------
-- not recursive
entrypoint usecase1 :: [Word] >>= [Unit]
usecase1[t0] =
  t1 <- and((t0, 1))
  t2 <- primEq((t1, 0))
  if t2
    then b101[]
    else b104[]

-----------------------------------------
-- Entrypoints: aPDE isMapped isMapped1 usecase usecase1
