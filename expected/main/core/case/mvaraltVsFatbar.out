data SC
  = Ack
  | Set
  | Clear
  | Map
  | Unmap

data Unit
  = Unit

-----------------------------------------
-- not recursive
external print :: [Bit 32] ->> [[] ->> [Unit]]

-----------------------------------------
-- not recursive
b17 :: [] >>= [Unit]
b17[] =
  t0 <- print @ 1
  t0 @ []

-----------------------------------------
-- not recursive
b16 :: [] >>= [Unit]
b16[] =
  t0 <- print @ 2
  t0 @ []

-----------------------------------------
-- not recursive
b15 :: [] >>= [Unit]
b15[] =
  t0 <- print @ 3
  t0 @ []

-----------------------------------------
-- not recursive
b0 :: forall (a :: tuple). [] >>= a
b0[] =
  halt(())

-----------------------------------------
-- not recursive
b18 :: [[] ->> [SC]] >>= [Unit]
b18[t0] =
  t1 <- t0 @ []
  case t1 of
    Ack -> b17[]
    Set -> b16[]
    Clear -> b15[]
    _ -> b0[]

-----------------------------------------
-- not recursive
k5 :: {[] ->> [SC]} [] ->> [Unit]
k5{t0} [] = b18[t0]

-----------------------------------------
-- not recursive
k6 :: {} [[] ->> [SC]] ->> [[] ->> [Unit]]
k6{} t0 = k5{t0}

-----------------------------------------
-- not recursive
entrypoint handlerF :: [[] ->> [SC]] ->> [[] ->> [Unit]]
handlerF <-
  k6{}

-----------------------------------------
-- not recursive
b5 :: [] >>= [Unit]
b5[] =
  t0 <- print @ 0
  t0 @ []

-----------------------------------------
-- not recursive
b9 :: [[] ->> [SC]] >>= [Unit]
b9[t0] =
  t1 <- t0 @ []
  case t1 of
    Ack -> b17[]
    Set -> b16[]
    Clear -> b15[]
    _ -> b5[]

-----------------------------------------
-- not recursive
k3 :: {[] ->> [SC]} [] ->> [Unit]
k3{t0} [] = b9[t0]

-----------------------------------------
-- not recursive
k4 :: {} [[] ->> [SC]] ->> [[] ->> [Unit]]
k4{} t0 = k3{t0}

-----------------------------------------
-- not recursive
entrypoint handlerV :: [[] ->> [SC]] ->> [[] ->> [Unit]]
handlerV <-
  k4{}

-----------------------------------------
-- Entrypoints: handlerF handlerV
