data Maybe (a :: *)
  = Nothing
  | Just a

data Unit
  = Unit

-----------------------------------------
-- not recursive
external print :: [Bit 32] ->> [[] ->> [Unit]]

-----------------------------------------
-- not recursive
b7 :: [] >>= [Unit]
b7[] =
  t0 <- print @ 1
  t0 @ []

-----------------------------------------
-- not recursive
b11 :: forall (a :: *). [a] >>= [Unit]
b11[t0] =
  t1 <- print @ 2
  t1 @ []

-----------------------------------------
-- not recursive
b8 :: forall (a :: *). [Maybe a] >>= [Unit]
b8[t0] =
  case t0 of
    Nothing -> b7[]
    Just -> b11[t0]

-----------------------------------------
-- not recursive
k4 :: forall (a :: *). {Maybe a} [] ->> [Unit]
k4{t0} [] = b8[t0]

-----------------------------------------
-- not recursive
k5 :: forall (a :: *). {} [Maybe a] ->> [[] ->> [Unit]]
k5{} t0 = k4{t0}

-----------------------------------------
-- not recursive
entrypoint test1 :: forall (a :: *). [Maybe a] ->> [[] ->> [Unit]]
test1 <-
  k5{}

-----------------------------------------
-- Entrypoints: test1
