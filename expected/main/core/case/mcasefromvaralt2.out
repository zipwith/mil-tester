data Maybe (a :: *)
  = Nothing
  | Just a

data Unit
  = Unit

-----------------------------------------
-- not recursive
external print :: [Bit 32] ->> [[] ->> [Unit]]

-----------------------------------------
-- not recursive
b11 :: [Maybe (Bit 32)] >>= [Unit]
b11[t0] =
  assert t0 Just
  t1 <- Just 0 t0
  t2 <- print @ t1
  t2 @ []

-----------------------------------------
-- not recursive
b12 :: [] >>= [Unit]
b12[] =
  t0 <- print @ 2
  t0 @ []

-----------------------------------------
-- not recursive
b8 :: [[] ->> [Maybe (Bit 32)]] >>= [Unit]
b8[t0] =
  t1 <- t0 @ []
  case t1 of
    Just -> b11[t1]
    Nothing -> b12[]

-----------------------------------------
-- not recursive
k4 :: {[] ->> [Maybe (Bit 32)]} [] ->> [Unit]
k4{t0} [] = b8[t0]

-----------------------------------------
-- not recursive
k5 :: {} [[] ->> [Maybe (Bit 32)]] ->> [[] ->> [Unit]]
k5{} t0 = k4{t0}

-----------------------------------------
-- not recursive
entrypoint test1 :: [[] ->> [Maybe (Bit 32)]] ->> [[] ->> [Unit]]
test1 <-
  k5{}

-----------------------------------------
-- Entrypoints: test1
